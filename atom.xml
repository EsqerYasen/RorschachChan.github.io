<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>生活就是等待戈多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-04T03:20:07.012Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>石锤淡啤酒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx动态编译新的模块</title>
    <link href="http://yoursite.com/2018/01/03/Nginx%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/01/03/Nginx动态编译新的模块/</id>
    <published>2018-01-03T13:44:44.000Z</published>
    <updated>2018-01-04T03:20:07.012Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="开始动手">开始动手</span></h2><p>打算给电脑上的nginx添加一个当时没有编译安装的echo-nginx-module模块，这是一个第三方模块，要知道nginx要添加模块是需要重新编译的，这一点跟apache不同，apache是在配置文件里引用.so文件的。</p><p>首先先<code>nginx -V</code>，查看一下nginx已经编译的模块都有啥，如图：<br><img src="/images/nginxV.png" alt="akb48" title="nginx模块一览"></p><p>于是我就<code>git clone https://github.com/openresty/echo-nginx-module</code>，但是发现竟然告诉我“git: command not found”。oh shit，原来这台nginx实验机器压根就没有装过git啊！而yum源里的软件基本上已经过时的太久了，就拿git来说吧，使用<code>yum info git</code>看到的版本是1.8.3.1。但是在<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a> 里可以看到，git的版本现在已经丧心病狂的到达了2.16的版本了。<br><img src="/images/yuminfogit.png" alt="akb48" title="git版本太落后"></p><h2><span id="那么我们先安装git">那么我们先安装git!</span></h2><p>通过<code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code>和<code>yum install  gcc perl-ExtUtils-MakeMaker</code>来安装依赖库。<code>wget https://github.com/git/git/archive/v2.16.0-rc0.tar.gz</code>来下载2.16的git保存到centos里。<code>tar -xzvf v2.9.2.tar.gz -C /目标目录/</code>，然后在目标目录里面执行<code>make prefix=/usr/local/git all</code>和<code>make prefix=/usr/local/git install</code>，编译过程可能会比较长，请耐心等待。</p><p>编译结束之后，<code>echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</code>，把git添加到环境变量，再<code>source /etc/bashrc</code>让它实时生效，最后再一次看看<code>git --version</code>，大功告成！<br><img src="/images/gitversion.png" alt="akb48" title="展现git版本"></p><h2><span id="开始编译新模块">开始编译新模块</span></h2><p>git搞定了之后，重新<code>git clone https://github.com/openresty/echo-nginx-module</code>，然后在nginx的configure文件夹里面，把echo-nginx-module模块添加上。命令如下：</p><p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/root/pcre-8.41 --with-http_v2_module --add-module=/root/echo-nginx-module-0.61</code>,我这里还附赠了一个“http_v2_module”。</p><p>configure完毕之后，去<code>make</code>一下就可以了，不要轻易<code>make install</code>，不然就是重新安装了。原来的nginx.conf等配置都没了。</p><p>养成替换nginx二进制文件的好习惯，如下：</p><h2><span id="代码块">代码块：</span></h2><pre><code>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bakcp nginx编译目录/objs/nginx /usr/local/nginx/sbin/</code></pre><p>然后再打开看一下<code>nginx -V</code><br><img src="/images/nginxV2.png" alt="akb48" title="安装模块成功"></p>]]></content>
    
    <summary type="html">
    
      你的nginx总不能一辈子都不变的吧
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>从vmstat命令里看服务器瓶颈</title>
    <link href="http://yoursite.com/2018/01/03/%E4%BB%8Evmstat%E5%91%BD%E4%BB%A4%E9%87%8C%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%93%B6%E9%A2%88/"/>
    <id>http://yoursite.com/2018/01/03/从vmstat命令里看服务器瓶颈/</id>
    <published>2018-01-03T12:56:56.000Z</published>
    <updated>2018-01-03T13:04:53.271Z</updated>
    
    <content type="html"><![CDATA[<p>重新翻看基础知识的第一天…<br><a id="more"></a></p><p>这几天重新翻看基础知识，看到了vmstat，我认为它是一个非常优秀的命令,因为它包括了top和free，甚至还包含了一些io的信息，可以说是运维人员常备命令之一。常用方法：#vmstat (-a) 多少秒刷一次 刷多少次</p><p><img src="/images/vmstat.png" alt="vmstat" title="vmstat的效果"></p><p>对上面这个图来一个简单的解释：</p><p>r: 运行队列中进程数量，这个值长期大于1就要判断是否需要增加CPU。<br>b: 等待IO的进程数量</p><p>swpd: 使用虚拟内存大小(如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能）<br>free: 空闲物理内存大小<br>buff: 用作缓冲的内存大小<br>cache: 用作缓存的内存大小(如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小)<br>inact: 非活跃内存大小（当使用-a选项时显示）<br>active: 活跃的内存大小（当使用-a选项时显示）</p><p>si: 每秒从交换区写到内存的大小，由磁盘调入内存<br>so: 每秒写入交换区的内存大小，由内存调入磁盘<br>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p><p>bi: 每秒读取的块数<br>bo: 每秒写入的块数<br>注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。</p><p>in: 每秒中断数，包括时钟中断。<br>cs: 每秒上下文切换数。<br>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p><p>us: 用户进程执行时间百分比(user time)<br>注意： us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p><p>sy: 内核系统进程执行时间百分比(system time)<br>注意：sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p><p>wa: IO等待时间百分比<br>注意：wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</p><p>id: 空闲时间百分比</p><p>最后总结：如果r经常大于4 ，且id经常少于40，表示cpu的负荷很重。如果bi，bo长期不等于0，表示内存不足。</p><p>r（运行队列）展示了正在执行和等待CPU资源的任务个数。当这个值超过了CPU数目，就会出现CPU瓶颈了。 CPU 100%并不能说明什么，Linux总是试图要CPU尽可能的繁忙，使得任务的吞吐量最大化。唯一能够确定CPU瓶颈的还是r（运行队列）的值。</p>]]></content>
    
    <summary type="html">
    
      使用vmstat查看服务器情况
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>关于阿里云CDN的两个故障解决</title>
    <link href="http://yoursite.com/2017/12/28/CDN%E7%BD%91%E7%AB%99%E4%B8%80%E6%AC%A1%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/28/CDN网站一次打不开的问题/</id>
    <published>2017-12-28T09:34:57.000Z</published>
    <updated>2018-01-03T07:01:26.931Z</updated>
    
    <content type="html"><![CDATA[<p>测试中心今天在测试时候发现了一个问题：官方的A网站做了域名跳转，跳转到阿里云CDN，但是在浏览器里输入A地址栏的时候，发现域名的确变成了CDN的域名，但是页面是403。<br><a id="more"></a></p><p>如图：<br><img src="/images/cdn403.png" alt="跳转CDN出现403" title="跳转CDN出现403"></p><p>但是奇怪的是，再在浏览器点击一下回车，网页就神奇的打开了。</p><p>这个原因就是阿里云的CDN有一个“Refer防盗链”，需要在防盗链里面把A域名添加到白名单，这样的话就可以直接访问了。至于为什么第二次回车就可以访问，是因为那时候域名已经成CDN自己的域名了，当然可以访问。<br><img src="/images/referer.png" alt="refer防盗链配置" title="在这里添加防盗链的白名单"></p><p>但是这个防盗链也要注意！毕竟白/黑名单添加都是一个危险举动，一定三思后行。</p><p>不就之后，商城也下来一个需求，说公司有两个多年不用的域名B和C，打算废物利用，两个都要达到直接“跳转官网”的目的。</p><p>于是我就到阿里云域名管理的那里搜索一下，发现目前官网域名后端绑定的是一个CDN，于是也把域名B和域名C做一个CNAME到这个域名，不过登陆浏览器发现域名B和域名C都反馈502。</p><p>于是我就到电子商城后端的nginx.conf里查看，确认server_name字段没有写错，然后把域名B和域名C的CNAME直接改成了CDN的域名，再通过了dig确认。但是等于浏览器还是发现502。</p><p>最后找了阿里云的人了解，原来阿里云规定“一个CDN只能绑定一个域名，因为节点上没有那两个域名的配置，所以只要不符合节点上有配置文件信息的，全部502”。所以B和C是无法访问的。要解决这个问题有两招，1）把域名B和域名C直接A记录绑定CDN后面的SLB上，但是代价就是访问速度不如CDN快；2）重新购买两个CDN，都绑定SLB，然后把这两个CDN分别绑定到域名B和域名C上，代价是多收一点流量费…</p><p><img src="/images/messi.jpg" alt="梅西在国家德比进球" title="在伯纳乌进球感觉真好！"></p>]]></content>
    
    <summary type="html">
    
      为啥有些网站必须要点两次才能打开？
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CDN" scheme="http://yoursite.com/tags/CDN/"/>
    
      <category term="网站技术" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>screen的用法</title>
    <link href="http://yoursite.com/2017/12/21/screen%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/21/screen的用法/</id>
    <published>2017-12-21T07:59:44.000Z</published>
    <updated>2018-01-03T07:05:57.537Z</updated>
    
    <content type="html"><![CDATA[<p>如果你想在后台执行程序…<br><a id="more"></a><br>很多时候在Linux要后台执行程序，都是使用“&amp;”，或者是nohup，不过这两个更多应用于临时的脚本。一个比较高科技的方法就是使用“screen”。</p><p>安装screen的方法很简单：yum install -y screen</p><p>如果新建一个screen，就输入screen -S name，这样会新开一个窗口，然后执行命令。比如我要启动django，那么就输入python manage.py runserver 0.0.0.0:9000即可。</p><p>这个重开一个窗口，列出所有screen进程，就这样：<br>[root@docker ~]# screen -ls<br>There are screens on:<br>    3029.xiedi    (Attached)</p><p>如果想链接上之前那个django，执行命令screen -r 3029即可。</p><p><img src="/images/kobe.png" alt="goodbye,Kobe" title="kobe vs durant"></p>]]></content>
    
    <summary type="html">
    
      如果你想在后台执行程序...
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他软件" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>pictest</title>
    <link href="http://yoursite.com/2017/12/13/pictest/"/>
    <id>http://yoursite.com/2017/12/13/pictest/</id>
    <published>2017-12-13T13:40:06.000Z</published>
    <updated>2018-01-03T07:06:26.282Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个我用来测试图片上传的文章<br><a id="more"></a></p><p>啊！五环，你比四环多一环！<br>啊！五环，你比六环少一环！<br><img src="/images/1.gif" alt="akb48" title="天气妹儿"><br>终于有一天，你会修到七环</p><p><img src="/images/paradin.jpg" alt="paradin" title="SQ"></p>]]></content>
    
    <summary type="html">
    
      这是一个我用来测试图片上传的文章
    
    </summary>
    
      <category term="用来保护视力的图片" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E4%BF%9D%E6%8A%A4%E8%A7%86%E5%8A%9B%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="美女" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%A5%B3/"/>
    
      <category term="图片" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>一个人去旅行</title>
    <link href="http://yoursite.com/2017/12/13/%E8%BF%99%E9%87%8C%E8%AE%B0%E5%BD%95%E7%9A%84%E4%B8%8D%E5%8F%AA%E6%9C%89%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BF%98%E6%9C%89%E7%94%9F%E6%B4%BB%E5%92%8C%E6%80%9D%E6%83%B3%EF%BC%81/"/>
    <id>http://yoursite.com/2017/12/13/这里记录的不只有代码，还有生活和思想！/</id>
    <published>2017-12-13T06:17:22.000Z</published>
    <updated>2018-01-03T07:06:21.722Z</updated>
    
    <content type="html"><![CDATA[<p>先用陈升先生的一首《一个人去旅行》做我这个博客的开场白<br><a id="more"></a></p><p>你说要一个人去旅行　但是归期却没有约定　亚得里亚海边风中的吉他声<br>你说你带着苍白的回忆　却谢谢能与我相逢　我怕你在异乡夜里孤独醒来<br>要拒绝两人单调的生活　想寻找自由　迷信了爱情　就迷失了我自己<br>你就这样　离开吧　抛弃吧　他乡的旅人<br>你就那样　离开吧　抛弃吧　一个人生活</p><p>你说要一个人去旅行　眼里藏着一朵乌云　知道你藏不住秘密　天空就会飘着雨<br>你说你带着一本日记　却不想再拥有回忆　我怕你在异乡孤独的醒来<br>要拒绝两人单调的生活　不想再随波逐流　迷信了孤独　就软弱的抛弃了我的等待</p><p>你就这样　离开吧　抛弃吧　他乡的旅人<br>你就那样　离开吧　抛弃吧　让我孤独生活</p><p>你就这样　离开吧　抛弃我　孤独的旅人<br>你就这样　离开我　抛弃我　让我孤独生活</p><p>我想要一个人去旅行　但愿归期会有约定　每个人都在问我　是否可以找到自由的你<br>亚得里亚海边他乡的人和风中的吉他声　我怕你一个人在异乡孤独醒来<br>我会带着你回来</p>]]></content>
    
    <summary type="html">
    
      先用陈升先生的一首《一个人去旅行》做我这个博客的开场白
    
    </summary>
    
      <category term="音乐" scheme="http://yoursite.com/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
