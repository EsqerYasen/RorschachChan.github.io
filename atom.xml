<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-26T10:03:53.515Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 6.x安装php 5.6和redis扩展的全过程</title>
    <link href="http://yoursite.com/2018/01/26/CentOS-6-x%E5%AE%89%E8%A3%85php-5-6%E5%92%8Credis%E6%89%A9%E5%B1%95%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/26/CentOS-6-x安装php-5-6和redis扩展的全过程/</id>
    <published>2018-01-26T10:00:08.000Z</published>
    <updated>2018-01-26T10:03:53.515Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装php-56">安装PHP 5.6</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum update    整体升级一下yum包</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum list installed | grep php    检查时候安装过PHP</span><br><span class="line">rpm -Uvh http:<span class="comment">//mirror.webtatic.com/yum/el6/latest.rpm </span></span><br><span class="line">yum -y install php56w.x86_64</span><br><span class="line">yum -y --enablerepo=webtatic install php56w-devel</span><br><span class="line">yum -y install php56w-xml.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64 php56w-opcache.x86_64</span><br><span class="line">yum -y install php56w-fpm</span><br><span class="line">chkconfig php-fpm on    开机自启动</span><br><span class="line">/etc/init.d/php-fpm start    启动进程</span><br><span class="line">php -v    查看是否安装成功</span><br></pre></td></tr></table></figure></code></pre><p><img src="/images/php1.png" alt=""><br>注1：如果想更换到php5.5或5.4版本, 直接把上面的56w换成55w或者54w就可以了；<br>注2：php-opcache和php-xcache会有效的提高php执行速度；</p><p>装php的扩展其实不是很麻烦，主要的步骤如下：<br>1）在扩展模块的客户端文件夹里面使用phpize，这样会生成一个configure文件；<br>2）执行configure文件，后面要加上php的路径；<br>3）将“模块.so”文件名添加到php.ini文件里，重启php-fpm进程；<br>4）通过so文件去调用扩展模块的客户端，实现连接对应的模块；</p><h2><span id="安装redis扩展">安装redis扩展</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -v    检查是否安装了redis</span><br><span class="line">redis-server -v</span><br><span class="line">wget http:<span class="comment">//pecl.php.net/get/redis-2.2.8.tgz </span></span><br><span class="line">tar -zxvf redis<span class="number">-2.2</span><span class="number">.8</span>.tgz</span><br><span class="line">cd redis<span class="number">-2.2</span><span class="number">.8</span>    </span><br><span class="line">phpize    一个专门挂接php扩展的工具，该命令一定要使用在php的模块文件夹主目录下，这里报错Cannot find config.m4。因为phpize要根据模块生成模块的配置文件放在模块文件夹下面</span><br></pre></td></tr></table></figure></code></pre><p><img src="/images/php2.png" alt=""><br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="keyword">with</span>-php-config=<span class="regexp">/usr/</span>bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">make test</span><br><span class="line">vim /etc/php.ini      在php.ini里添加一句“extension=<span class="string">"redis.so"</span>”</span><br><span class="line">service php-fpm restart</span><br></pre></td></tr></table></figure></p><p><img src="/images/php3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      《世界第一等》---伍佰         听闽南语歌，就有一个感觉：我虽卑微平凡，但是不甘平庸，最穷不过要饭，不死总会出头！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>一个连接两个文件的python脚本</title>
    <link href="http://yoursite.com/2018/01/26/%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84python%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/01/26/一个连接两个文件的python脚本/</id>
    <published>2018-01-26T07:13:26.000Z</published>
    <updated>2018-01-26T10:08:12.944Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1><span id="背景交代">背景交代</span></h1><p>公司在阿里云上有一个模块叫mrs，一共120台，它是跟云录像有关的，这个服务一直都是云服务器里没有公网但是购买了公网SLB，然后20个为一组配置到一个SLB里，这个SLB是按流量收费的。但是最近到了年末，各种账目审核，领导发现这个SLB的费用太惊人了，这么搞不够挣的。但是实在没办法，因为云录像嘛，肯定流量很大，如图：<br><img src="/images/mrs1.png" alt=""></p><p>纵然流量大，但是开源节流也是必须的，于是领导就责令开发赶快想出一个办法，减少SLB的费用。于是开发们拉上运维就吭哧吭哧的开始算经济账，最后确定每一个云服务器买7M带宽，然后流量全部走公网，把SLB的架构舍弃掉。</p><p>但是开发在这个模块V2.0里有一个变化，就是Zookeeper需要读取到每一台设备的外网IP，同时这个外网IP必须跟机器是一一对应的，这样模块才能正常工作。</p><p>原来的zookeeper在servermap是长这样的：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">剩下略</span><br></pre></td></tr></table></figure></p><p>而现在开发要求改成这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"对应的外网IP"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"对应的外网IP"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"内网IP"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"对应的外网IP"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">剩下略</span><br></pre></td></tr></table></figure></p><p>那么这就要把两个文件合并起来了，而且是在合并后做到一对一，不能把IP搭配串了。</p><h1><span id="准备工作">准备工作</span></h1><p>首先，阿里云的网页控制台是无法做到“包年包月的服务器批量永久升级基础带宽”的，只能通过API实现。那么开启了外网IP之后，服务器就会有一个对应的外网IP地址，然后在控制台里，点击“导出资源列表”，只选择<code>服务器名称</code>、<code>内网IP</code>和<code>外网IP</code>。<br><img src="/images/mrs2.png" alt=""></p><p>然后在生成的excel表格里，剪除掉不需要的服务器以及服务器名称，然后保证“内网IP”在前，“外网IP”在后的样式，只保留IP,然后把这个文件复制到linux里，起个名，比如叫<code>IP.txt</code>,如图：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 tmp]# cat IP.txt</span><br><span class="line"><span class="number">10.161</span><span class="number">.236</span><span class="number">.231</span><span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span></span><br><span class="line"><span class="number">10.161</span><span class="number">.235</span><span class="number">.150</span>  <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line"><span class="number">10.51</span><span class="number">.10</span><span class="number">.182</span><span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line"><span class="number">10.117</span><span class="number">.219</span><span class="number">.72</span>   <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p><p>再把已经使用的zookeeper复制一下，放到一个叫<code>mingdan.txt</code>的文件里，如图：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 tmp]# cat mingdan.txt</span><br><span class="line">[<span class="string">"10.117.219.72"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.161.235.150"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.161.236.231"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.51.10.182"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br></pre></td></tr></table></figure></p><h1><span id="脚本思路">脚本思路</span></h1><p>我最开始打算用<code>awk</code>的<code>NR</code>、<code>FNR</code>去写，但是发现由于我这个文本的结构太过复杂。awk对付这样的力不从心，稍不好就把人搞得无法自拔，于是就考虑使用python的字典。</p><p>各位都知道，字典里key是不能重复的，而我又不想把这个脚本搞得太复杂，就想在<code>mingdan.txt</code>里的每一行加上序号，用这个序号去当key，而后面的内网IP就作为value，这样保证一一对应。加序号的方法很多，你可以在<code>vim</code>状态下<code>:set number</code>，然后手动复制粘贴。不过我是用的是如下两个命令：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^[ \t]*//g' mingdan.txt#这一步是添加每一行序号</span><br><span class="line">sed -i 's/\t/ /g'  mingdan.txt#添加序号之后，会生成一个ta</span><br></pre></td></tr></table></figure></p><p>然后<code>mingdan.txt</code>就成了这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 tmp]# cat mingdan.txt </span><br><span class="line"><span class="number">1</span> [<span class="string">"10.117.219.72"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line"><span class="number">2</span> [<span class="string">"10.161.235.150"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line"><span class="number">3</span> [<span class="string">"10.161.236.231"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br><span class="line"><span class="number">4</span> [<span class="string">"10.51.10.182"</span>] = &#123;app = <span class="string">"mrs"</span>, weight = <span class="number">100</span>&#125;,</span><br></pre></td></tr></table></figure></p><p>万事俱备，现在就要把<code>IP.txt</code>和<code>mingdan.txt</code>按照相同的内网IP整合成一个文件！</p><h1><span id="脚本正文">脚本正文</span></h1><p>这个脚本是不怕<code>mingdan.txt</code>和<code>IP.txt</code>的IP顺序的。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">fd = &#123;&#125;#先设置一个新的空字典叫fd</span><br><span class="line">#以下都是最后拼字符串用的</span><br><span class="line">aaa = <span class="string">'["'</span></span><br><span class="line">bbb = <span class="string">'"] = &#123;app = "mrs",mrsReportIp = "'</span></span><br><span class="line">ccc = <span class="string">'",weight = 100&#125;,'</span></span><br><span class="line"> </span><br><span class="line">#首先先判断mingdan.txt里是否存在</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> open(<span class="string">'mingdan.txt'</span>, <span class="string">'r'</span>):</span><br><span class="line">        ar = re.split(r'[ ""]',l)#做分割，把内网IP切出来</span><br><span class="line">        print "ip is :" + ar[2]#确认是否分割出来的是内网IP地址</span><br><span class="line">        fd[ar[0]] = ar[2]#把这个内网IP地址当作value，前面的序号就是key</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'out.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> open(<span class="string">'IP.txt'</span>, <span class="string">'r'</span>):</span><br><span class="line">                ar = l.split()</span><br><span class="line">                if ar[0] in fd.values():#如果IP.txt里面的内网IP与字典fd里的value相符合</span><br><span class="line">                       fw.write(aaa + ar[0] + bbb + ar[1] + ccc)#拼成一个完整的字符串</span><br><span class="line">                       fw.write('\n')#保存文件</span><br><span class="line">print(<span class="string">'文件整合完毕，请查看out.txt的结果！'</span>)</span><br></pre></td></tr></table></figure></p><h1><span id="执行结果">执行结果</span></h1><pre><code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 tmp]# cat out.txt </span><br><span class="line">[<span class="string">"10.117.219.72"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"1.1.1.1"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.161.235.150"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"2.2.2.2"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.161.236.231"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"3.3.3.3"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[<span class="string">"10.51.10.182"</span>] = &#123;app = <span class="string">"mrs"</span>,mrsReportIp = <span class="string">"4.4.4.4"</span>,weight = <span class="number">100</span>&#125;,</span><br><span class="line">[root@paas-online-crs-001 tmp]#</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      看了今年的阿里云账单，大领导眉头一皱，发现事情不是那么简单
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix-proxy的搭建和配置全过程</title>
    <link href="http://yoursite.com/2018/01/26/Zabbix-proxy%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/26/Zabbix-proxy的搭建和配置全过程/</id>
    <published>2018-01-26T06:27:04.000Z</published>
    <updated>2018-01-26T07:06:37.849Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1><span id="zabbix-proxy的用途和构建图">Zabbix-proxy的用途和构建图</span></h1><p>Zabbix-server是建立在金山云的，现在需要监控阿里云的redis，但是阿里云跟金山云之间通信是无法走内网的，如果直接让zabbix-server与redis直接联系，一旦公网的信息被截获的话，整个金山区的zabbix可能都会遭殃，那么既然有这种“远程监控+当监控的位置通信不便”的需求，就搭建一个zabbix-proxy来解决问题。</p><p>Zabbix-proxy是一个监控代理服务器，它收集监控到的数据，先存放在缓冲区，保存的时间可以通过配置文件设定，然后再传送到zabbix-server，这样也大大减缓了zabbix-server的压力，<font color="red">注意！监控代理需要一个单独的数据库，因为它的数据库表名与zabbix-server的数据库表名是一样的，如果不单独分开，后果就是数据错乱。</font></p><p>有人看到这里可能问了，说来说去你的zabbix-proxy跟阿里的redis依旧是走公网的啊！虽然这样也是走公网，我现在只需要配置一个防火墙规则来让他俩保证通信即可，通过防火墙来提升安全系数。架构如图：<br><img src="/images/proxy1.png" alt=""></p><h1><span id="安装mysql-55">安装Mysql 5.5</span></h1><p>Zabbix-proxy机器情况：金山云<code>centos 6.5</code>，安装zabbix版本：<code>3.0.8</code><br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@js-online-cjhmq-002 opt]yum list installed | grep mysql    #列出已经安装过的mysql情况</span><br><span class="line">[root@js-online-cjhmq-002 opt]yum -y remove mysql-libs.x86_64      #把之前的mysql连根拔起</span><br><span class="line">[root@js-online-cjhmq-002 opt]# rpm -ivh http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm</span><br><span class="line">Retrieving http:<span class="comment">//repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm</span></span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">  1:mysql-community-release########################################### [100%]</span><br><span class="line">[root@js-online-cjhmq-002 opt]groupadd zabbix                       #新建用户组zabbix</span><br><span class="line">[root@js-online-cjhmq<span class="number">-002</span> opt]useradd -g zabbix -u <span class="number">808</span> -m zabbix</span><br><span class="line">#-g：指定用户所属的群组；</span><br><span class="line">#-u：指定用户id。</span><br><span class="line">#-m：自动建立用户的登入目录；</span><br></pre></td></tr></table></figure></p><p>现在要修改一下<code>/etc/yum.repos.d/mysql-community.repo</code>这个文件，将5.5的enabled改为1,5.6的enabled改为0：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Enable to use MySQL 5.5</span><br><span class="line">[mysql55-community]</span><br><span class="line">name=MySQL <span class="number">5.5</span> Community Server</span><br><span class="line">baseurl=http:<span class="comment">//repo.mysql.com/yum/mysql-5.5-community/el/6/$basearch/</span></span><br><span class="line">enabled=1    #这里改成1</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">gpgkey=file:<span class="regexp">/etc/</span>pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line"># Enable to use MySQL 5.6</span><br><span class="line">[mysql56-community]</span><br><span class="line">name=MySQL <span class="number">5.6</span> Community Server</span><br><span class="line">baseurl=http:<span class="comment">//repo.mysql.com/yum/mysql-5.6-community/el/6/$basearch/</span></span><br><span class="line">enabled=0    #这里改成0</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=file:<span class="regexp">/etc/</span>pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure></p><p>然后执行<code>yum install mysql-community-client mysql-community-devel mysql-community-server php-mysql</code>， 安装服务端和客户端，安装完毕之后可以<code>mysql -h127.0.0.1</code>看一下。<br><img src="/images/proxy2.png" alt=""></p><p>安装完毕之后，修改一下<code>/etc/my.cnf</code>，如图：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size = 512M        #这个根据服务器性能填写，这个机器是2核2G的，所以我拿出半个G给mysql</span><br><span class="line">innodb_file_per_table=1               #这个是新增的字段，设置InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据目录</span><br></pre></td></tr></table></figure></p><p>mysql安装完毕之后，我们还要导表进去，如图：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line">mysqladmin -uroot password <span class="string">'123456'</span></span><br><span class="line">mysql -uroot -p123456 -e <span class="string">'create database zabbix_proxy character set utf8;'</span></span><br><span class="line">mysql -uroot -p123456 -e <span class="string">"grant all privileges on zabbix_proxy.* to zabbix@localhost identified by 'zabbix';"</span></span><br><span class="line">mysql -uroot -p123456 -e <span class="string">"flush privileges;"</span></span><br><span class="line">mysql -uzabbix -pzabbix zabbix_proxy &lt;<span class="regexp">/解压路径/</span>zabbix<span class="number">-3.0</span><span class="number">.8</span>/database/mysql/schema.sql</span><br></pre></td></tr></table></figure></p><p>至此，mysql部分已经全部搞定。</p><h1><span id="安装zabbix-proxy">安装Zabbix-proxy</span></h1><p>先去<code>https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.0.8/</code>下载<code>zabbix-3.0.8.tar.gz</code>，上传到proxy服务器里。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zabbix<span class="number">-3.0</span><span class="number">.8</span>.tar.gz</span><br><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/zabbix<span class="number">-3.0</span><span class="number">.8</span>  --sysconfdir=<span class="regexp">/etc/</span>zabbix  --enable-proxy  --enable-agent  --enable-ipv6  --<span class="keyword">with</span>-mysql=<span class="regexp">/usr/</span>bin/mysql_config  --<span class="keyword">with</span>-net-snmp  --<span class="keyword">with</span>-libcurl  --<span class="keyword">with</span>-openipmi  --<span class="keyword">with</span>-unixodbc  --<span class="keyword">with</span>-ldap  --<span class="keyword">with</span>-ssh2  --enable-java</span><br></pre></td></tr></table></figure></p><p>如果出现了<code>configure: error: Invalid LDAP directory - unable to find ldap.h</code>，解决方法就是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openldap*</span><br></pre></td></tr></table></figure></p><h1><span id="zabbix-proxy的配置">Zabbix-proxy的配置</span></h1><p>打开<code>/etc/zabbix/zabbix_proxy.conf</code>，需要修改几个地方：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ProxyMode=0                                   #0是主动模式，1是被动模式</span><br><span class="line">Server=A.B.C.D                #这里填写zabbix-server的内网IP</span><br><span class="line">Hostname=J.Q.K.A              #这里要与/etc/hosts下的名字一模一样</span><br><span class="line">LogFile=<span class="regexp">/tmp/</span>zabbix_proxy.log</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix_proxy</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br><span class="line">ConfigFrequency=120              #主动去server端去拉去配置更新的频率120秒一次</span><br><span class="line">DataSenderFrequency=60              #发送采集的监控数据到服务器端，默认是1秒，我们一分钟发送一次</span><br><span class="line">#ProxyLocalBuffer=0                #ProxyLocalBuffer表示数据传递给server之后还要在proxy里保存多久（单位为小时）。如果注释就是代表不删除。</span><br><span class="line">#ProxyOfflineBuffer=1               #ProxyOfflineBuffer表示数据没有传递给server的话还要在proxy里保存多久（单位为小时）。如果注释就是代表不删除。</span><br></pre></td></tr></table></figure></p><p>然后就是启动proxy:<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/zabbix_proxy/sbin/zabbix_proxy</span><br></pre></td></tr></table></figure></p><p>用netstat查看一下端口和进程是否都OK：<br><img src="/images/proxy3.png" alt=""></p><h1><span id="zabbix-server端的配置">Zabbix-server端的配置</span></h1><p>登入zabbix-server的网页，如图添加proxy：<br><img src="/images/proxy4.png" alt=""></p><p>点击“create proxy”之后，就对应填写资料吧：<br><img src="/images/proxy5.png" alt=""></p><p><img src="/images/proxy6.png" alt=""></p><p>这里对上面的几个选项多说几句：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Connections to proxy：服务器如何连接到被动代理：无加密（默认），使用PSK（预共享密钥）或证书。</span><br><span class="line">Connections <span class="keyword">from</span> proxy：从活动代理中选择允许的连接类型。 可以同时选择几种连接类型（用于测试和切换到其他连接类型）。 默认为“无加密”。</span><br><span class="line">#点击Certificate之后又两个参数：</span><br><span class="line">Issuer：允许颁发证书。 证书首先通过CA（认证机构）验证。 如果CA有效，则由CA签名，则可以使用Issuer字段来进一步限制允许的CA。 该字段是可选的，如果您的Zabbix安装使用多个CA的证书，则使用该字段。</span><br><span class="line">Subject：允许的证书。 证书首先通过CA验证。 如果它有效，由CA签名，则主题字段可用于仅允许Subject字符串的一个值。 如果此字段为空，则接受由配置的CA签名的任何有效证书。</span><br><span class="line">#点击PSK之后又两个参数：</span><br><span class="line">PSK identity：预共享密钥身份字符串。</span><br><span class="line">PSK ： 预共享密钥（hex-string）。 如果Zabbix使用mbed TLS（PolarSSL）库，Zabbix将使用GnuTLS或OpenSSL库，<span class="number">64</span>位十六进制（<span class="number">32</span>字节PSK），最大长度为<span class="number">512</span>位十六进制数（<span class="number">256</span>字节PSK）。 示例：<span class="number">1</span>f87b595725ac58dd977beef14b97461a7c1045b9a1c963065002c5473194952</span><br></pre></td></tr></table></figure></p><p>保存之后，就在zabbix-server用<code>zabbix-get</code>去ping一下proxy，看看返回值是否是1，如果是<code>zabbix_get [18290]: Check access restrictions in Zabbix agent configuration</code>，就检查一下刚才的hostname等值是否正确。<br><img src="/images/proxy7.png" alt=""></p><h1><span id="被监控机器的配置">被监控机器的配置</span></h1><p>在被监控的阿里云redis里安装<code>zabbix-agent</code>，在<code>agentd.conf</code>里把<code>hostname</code>写成自己在<code>/etc/hosts</code>里的<code>hostname</code>，<code>Server</code>地址和<code>ServerActive</code>的地址都要写成proxy的外网IP地址。保存之后启动agent进程，这个时候在proxy端是可以通过<code>zabbix_get</code>得到这台被监控机器的值，如图：<br><img src="/images/proxy8.png" alt=""></p><p>在Zabbix-Server的WEB界面里，为阿里云的redis新建一个host，<code>Agent interface</code>那里填写被监控的机器IP，端口是10050，<code>Monitored by proxy</code>的地方要写成刚刚添加的proxy。如图：<br><img src="/images/proxy9.png" alt=""></p><p>上面已经提到过，用proxy模式并且zabbix的客户端也是主动模式提交数据，这样能大大提高采集效率，降低zabbix服务器端和proxy端的压力。现在我们希望添加的还是使用zabbix_agent的方式，新加到zabbix_proxy里面的主机使用<code>zabbix_agent（active）</code>的方式。注意在模板的克隆要选择<code>full clone</code>，不要选“clone”，那样的话就仅仅是把iterm的名字克隆过去而已，如图：<br><img src="/images/proxy10.png" alt=""></p><p>然后在items选择具体的类型，根据需要，想改那个改哪个，如图，注意！我图里写的是<code>Zabbix agent</code>，但是type这里选择<code>Zabbix agent (active)</code>。<br><img src="/images/proxy11.png" alt=""></p><p>改完之后，保存一下，就会看到type都是<code>zabbix agent（active）</code>了。<br><img src="/images/proxy12.png" alt=""></p><p>最后在host里把这个机器添加到proxy的模板里，如图：<br><img src="/images/proxy13.png" alt=""></p><p>在Administration的Proxies也看到效果了，如果server与proxy没有正确连接的话，last seen的地方会是<code>--</code>，如果连接的话就会显示具体时间，如图:<br><img src="/images/proxy15.png" alt=""></p><p>返回到hosts里，查看那个被监控的redis机器也成功被监控到了，<code>ZBX</code>已经变绿。如图：<br><img src="/images/proxy14.png" alt=""></p><p>因为我们线上环境基本都是用的zabbix_proxy方式是active方式，然后客户端也是active方式，既然都是active方式，那么zabbix_agent的Hostname就很重要，打个比方如果再zabbix_server端把一个主机的Hostname改了，然后客户端那边也改了，服务端和客户端的Hostname是统一的，但是proxy那里还记录的是旧Hostname，然后就会在proxy日志里面看到下面一条：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot send list <span class="keyword">of</span> active checks to <span class="string">"proxy内网IP地址"</span>: host [virt_proxy内网IP地址] not found</span><br></pre></td></tr></table></figure></p><p>proxy主动模式下，<code>ConfigFrequency</code>默认的是3600秒一小时，显然有点大了，可以适当的调低一下，如10分钟或者几分钟什么的。然后出现问题多看看zabbix服务端和proxy的日志，对症下药。</p><h1><span id="参考资料">参考资料</span></h1><p><a href="http://www.51niux.com/?id=156" target="_blank" rel="noopener">http://www.51niux.com/?id=156</a><br><a href="http://www.cnblogs.com/wangxiaoqiangs/p/5336630.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangxiaoqiangs/p/5336630.html</a></p>]]></content>
    
    <summary type="html">
    
      把监控的手伸的再长一点...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="监控技术" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器更改时区为utc</title>
    <link href="http://yoursite.com/2018/01/25/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%94%B9%E6%97%B6%E5%8C%BA%E4%B8%BAutc/"/>
    <id>http://yoursite.com/2018/01/25/阿里云服务器更改时区为utc/</id>
    <published>2018-01-25T14:31:16.000Z</published>
    <updated>2018-01-26T06:55:58.895Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>开发提出需求说，某个模块是给洋人使用，于是把服务器里的时间改成UTC时间。我登陆到服务器里使用<code>date</code>查看了一下，发现目前使用的是东八区时间，如图：<br><img src="/images/time1.png" alt="goodbye,Kobe"></p><p>首先先开启UTC，方法就是在<code>/etc/sysconfig/clock</code>的文件里修改这样一处：<code>UTC=true</code>。这样即使机器重启，UTC时间依旧会“<code>BIOS ▶ UTC时区转换 ▶ 系统时间</code>”的顺序正常使用。</p><p>在Centos 6.5里，各时区的时间是在一个叫<code>/usr/share/zoneinfo/</code>的文件夹下，在里面我们发现了我们的目标—-<code>UTC</code>，如图：<br><img src="/images/time2.png" alt="goodbye,Kobe"></p><p>然后就是修改，方法如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/localtime /etc/localtime-bak</span><br><span class="line">ln -s /usr/share/zoneinfo/UTC /etc/localtime</span><br></pre></td></tr></table></figure></p><p>先把老的时间文件备份，然后把UTC文件做一个软连接过来即可。我们所熟悉的<code>date</code>命令就是<code>/etc/localtime</code>的输出结果。</p><p>现在去<code>date</code>一下，看看结果，果然改成了<code>UTC</code>：<br><img src="/images/time3.png" alt="goodbye,Kobe"></p><p>这个时候，如果你服务器里装的是nginx的话，就会发现nginx日志里的时间也会变成<code>UTC</code>而不会再是<code>CST</code>了。</p>]]></content>
    
    <summary type="html">
    
      为美国人服务的模块就要改成美国时间
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里云购买、启动、停止ecs等等操作的python脚本</title>
    <link href="http://yoursite.com/2018/01/24/%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%AD%E4%B9%B0%E3%80%81%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2ecs%E7%9A%84python%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/01/24/阿里云购买、启动、停止ecs的python脚本/</id>
    <published>2018-01-24T14:52:41.000Z</published>
    <updated>2018-01-25T04:47:44.335Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>以下所有脚本都是在python 2.7的环境亲自测试的。<br>阿里云的ak/sk是没有地域概念的，在任何地域都可以使用。</p><h2><span id="购买服务器">购买服务器</span></h2><p>以在新加坡购买服务器为例子：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line">#注意！服务器创建完毕之后，状态是关机的。</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> CreateInstanceRequest</span><br><span class="line"># 创建 Client 实例</span><br><span class="line">clt = client.AcsClient('阿里云ak','阿里云sk','新加坡的地域')#各地域的缩写请看：https://help.aliyun.com/document_detail/40654.html?spm=5176.doc25499.2.14.yh6n8c</span><br><span class="line"></span><br><span class="line"># 创建 request，并设置参数</span><br><span class="line">request = CreateInstanceRequest.CreateInstanceRequest()</span><br><span class="line"></span><br><span class="line"># 设置ECS细节</span><br><span class="line">request.set_ImageId("centos_7_04_64_20G_alibase_201701015.vhd")#这里是镜像</span><br><span class="line">request.set_InstanceName("xjp-test-001")#这里写名称</span><br><span class="line">request.set_SecurityGroupId("sg-23t6c6mjw")#这里是安全组</span><br><span class="line">request.set_Password("W2.bi7FX1dyb)T3Wh^,[")#这里是密码，推荐使用https传输，安全</span><br><span class="line">request.set_InstanceChargeType("PrePaid")#确定是包年包月</span><br><span class="line">request.set_Period("2")#先买两个月的</span><br><span class="line">request.set_SystemDiskCategory("cloud_efficiency")#注意，如果是海外的机器的话，要额外说明，海外的机器只有高速云盘和SSD盘</span><br><span class="line"></span><br><span class="line"># 设置实例规格</span><br><span class="line">request.set_InstanceType(<span class="string">"ecs.s2.large"</span>)</span><br><span class="line"></span><br><span class="line"># 发起 API 请求并打印返回</span><br><span class="line">response = clt.do_action_with_exception(request)</span><br><span class="line">print response</span><br></pre></td></tr></table></figure></p><h2><span id="服务器停机">服务器停机</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> StopInstanceRequest</span><br><span class="line">list1 = [<span class="string">'要停机的ecs id1'</span>,<span class="string">'要停机的ecs id2'</span>,<span class="string">'要停机的ecs id3'</span>...]</span><br><span class="line"></span><br><span class="line">clt = client.AcsClient(<span class="string">'阿里云ak'</span>,<span class="string">'阿里云sk'</span>,<span class="string">'地域名'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">       shutdown = StopInstanceRequest.StopInstanceRequest()</span><br><span class="line">       shutdown.set_InstanceId(i)</span><br><span class="line">       action = clt.do_action_with_exception(shutdown)</span><br><span class="line">       print <span class="string">"现在停机:"</span> + i</span><br><span class="line">       print action</span><br></pre></td></tr></table></figure></code></pre><h2><span id="服务器启动">服务器启动</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> StartInstanceRequest</span><br><span class="line">list = [<span class="string">'要停机的ecs id1'</span>,<span class="string">'要停机的ecs id2'</span>,<span class="string">'要停机的ecs id3'</span>...]</span><br><span class="line"></span><br><span class="line">clt = client.AcsClient(<span class="string">'阿里云ak'</span>,<span class="string">'阿里云sk'</span>,<span class="string">'地域名'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">       start = StartInstanceRequest.StartInstanceRequest()</span><br><span class="line">       start.set_InstanceId(i)</span><br><span class="line">       action = clt.do_action_with_exception(start)</span><br><span class="line">       print <span class="string">"现在启动:"</span> + i</span><br><span class="line">       print action</span><br></pre></td></tr></table></figure></code></pre><h2><span id="查询阿里云镜像">查询阿里云镜像</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> DescribeImagesRequest</span><br><span class="line"><span class="keyword">import</span> aliyunsdkcore.request</span><br><span class="line"></span><br><span class="line">clt = client.AcsClient(<span class="string">'阿里云ak'</span>,<span class="string">'阿里云sk'</span>,<span class="string">'地域名'</span>)</span><br><span class="line"></span><br><span class="line">request = DescribeImagesRequest.DescribeImagesRequest()</span><br><span class="line">request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line"># 发起请求</span><br><span class="line">response = clt.do_action_with_exception(request)</span><br><span class="line">print response</span><br></pre></td></tr></table></figure></code></pre><h2><span id="查询服务器规格">查询服务器规格</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> DescribeInstanceTypesRequest</span><br><span class="line"><span class="keyword">import</span> aliyunsdkcore.request</span><br><span class="line"></span><br><span class="line">clt = client.AcsClient(<span class="string">'阿里云ak'</span>,<span class="string">'阿里云sk'</span>,<span class="string">'地域名'</span>)</span><br><span class="line"></span><br><span class="line">request = DescribeInstanceTypesRequest.DescribeInstanceTypesRequest()</span><br><span class="line">request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line"># 发起请求</span><br><span class="line">response = clt.do_action_with_exception(request)</span><br><span class="line">print response</span><br></pre></td></tr></table></figure></code></pre><h2><span id="参考资料">参考资料</span></h2><p><a href="https://help.aliyun.com/document_detail/25499.html?spm=5176.doc25501.6.857.wR0MHP" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/25499.html?spm=5176.doc25501.6.857.wR0MHP</a></p><p><img src="/images/xiaomage.jpg" alt="小马哥" title="GOOD LUCK AND THANK U,Masche."></p>]]></content>
    
    <summary type="html">
    
      有了这些脚本，七拼八凑的就可以写出来一个批量购买服务器的脚本了。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="阿里云api" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91api/"/>
    
  </entry>
  
  <entry>
    <title>Crontab里解决脚本时间重叠的问题</title>
    <link href="http://yoursite.com/2018/01/24/Crontab%E9%87%8C%E8%A7%A3%E5%86%B3%E8%84%9A%E6%9C%AC%E6%97%B6%E9%97%B4%E9%87%8D%E5%8F%A0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/24/Crontab里解决脚本时间重叠的问题/</id>
    <published>2018-01-24T06:17:32.000Z</published>
    <updated>2018-01-24T06:26:57.148Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="正文">正文</span></h2><p>Linux里的Crontab是一个好东西，但是它的默认最小执行频率是1分钟，但是我们在实际生产环境里有的时候遇到的脚本执行时间是大于1分钟的，这样就会出现一个很尴尬的情况，就是在1分钟过后，系统进程会出现多个脚本，neck and neck式的在后台运行，比如这样：<br><img src="/images/log499.png" alt="akb48"></p><p>从上面的图可以看到，10点36分<code>log499.sh</code>没有执行完毕，10点37又开始了执行了一个新的<code>log499.sh</code>脚本。这种脚本冲突肯定不是我们所希望的，那么如何才能保证后台只是在一段时间里只执行一个脚本呢？</p><p>这个时候我们就要使用文件锁，<code>flock</code>，这种方法要比判断pid高大上的多。</p><p>首先假设我们的脚本名字叫abc.sh，这个脚本文件的执行时间是要大于1分钟的，同时我们再设定一个锁文件，位置就叫<code>/tmp/abc.lock</code>,这个文件可以是空的，然后<code>crontab -e</code>，添加一句命令如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * flock -xn /tmp/abc.lock -c <span class="string">'sh /路径/abc.sh &gt;&gt; /记录日志的路径 2&gt;&amp;1'</span></span><br></pre></td></tr></table></figure></p><p>这个时候静候crontab启动abc.sh，通过<code>ps -ef|grep abc</code>，发现在后台始终只有一个abc进程。</p><p>但是有的时候会有这样的一个问题，就是abc执行一次之后，在下一次该执行的时候却没有执行，好像crontab失效了一样，对于这样的情况，就需要添加下面的语句到abc.sh末尾：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /tmp/abc.lock      #删除掉原有的锁文件</span><br><span class="line">sleep n                      #睡n秒</span><br><span class="line">touch /tmp/abc.lock     #再新建一个锁文件</span><br></pre></td></tr></table></figure></p><p>这样不断地更新lock锁文件，就会保证crontab每次都会按期执行。</p><p>这里要注意一下，里面我加了一句<code>sleep n</code>，这里的n是为了跨分钟的存在，这是为了防止没有走到下一个分钟又会生成一个新的lock锁文件，这样还是会出现重复启动脚本的情况。</p><p>这里就涉及到flock的一个原理：<strong>在每一次执行任务的时候都会先去尝试取到锁文件，如果取到了锁文件，那么就会下一步，反之就会放弃执行</strong>。A任务在运行的时候已经占据了lock文件，那么B任务来了，发现没有lock了，就不会执行任务。</p><p>这里我们使用了flock的三个参数：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-x, --exclusive: 获得一个独占锁</span><br><span class="line">-n, --nonblock:  如果没有立即获得锁，直接失败而不是等待</span><br><span class="line">-c, --command:   在shell中运行一个单独的命令</span><br></pre></td></tr></table></figure></p><p>当然，flock还是有很多丰富的参数可以供各位使用，大家就各自去google一下吧。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.csdn.net/fdipzone/article/details/38284009" target="_blank" rel="noopener">http://blog.csdn.net/fdipzone/article/details/38284009</a><br><a href="http://chuansong.me/n/285635151949" target="_blank" rel="noopener">http://chuansong.me/n/285635151949</a><br><a href="https://segmentfault.com/q/1010000008039907" target="_blank" rel="noopener">https://segmentfault.com/q/1010000008039907</a></p>]]></content>
    
    <summary type="html">
    
      话说那是一个年久失修的模块，现在只能靠这种每分钟监控的脚本来残喘续命了...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="crontab" scheme="http://yoursite.com/tags/crontab/"/>
    
      <category term="运维技术" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>yum提示Error: rpmdb open failed</title>
    <link href="http://yoursite.com/2018/01/24/yum%E6%8F%90%E7%A4%BAError-rpmdb-open-failed/"/>
    <id>http://yoursite.com/2018/01/24/yum提示Error-rpmdb-open-failed/</id>
    <published>2018-01-24T06:09:35.000Z</published>
    <updated>2018-01-25T09:35:20.166Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在一台机器里，使用<code>yum</code>安装的时候，出现了如下的故障：<br><img src="/images/yum1.png" alt="akb48"></p><p>这种情况就是RPM数据库被破坏了，这个时候就需要我们重建数据库，于是就输入如下的命令：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd / <span class="keyword">var</span> / lib / rpm /</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">` ls | grep 'db.' `</span> ; <span class="keyword">do</span> mv $i $i .bak ; done</span><br><span class="line">rpm -- rebuilddb</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure></p><p>重新<code>cleanup</code>就正常了。</p>]]></content>
    
    <summary type="html">
    
      解决yum的小故障
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="yum" scheme="http://yoursite.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>由一个实例浅析sed用法</title>
    <link href="http://yoursite.com/2018/01/23/%E7%94%B1%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E6%B5%85%E6%9E%90sed%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/23/由一个实例浅析sed用法/</id>
    <published>2018-01-23T14:27:54.000Z</published>
    <updated>2018-01-24T05:56:59.068Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>首先，假设我们有一个文件，叫123.txt，<code>cat</code>一下看到里面的内容是这样的：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@func-lms-001 ~]# cat 123.txt </span><br><span class="line">james</span><br><span class="line">curry</span><br><span class="line">  durant</span><br><span class="line">wade</span><br><span class="line">yaoming</span><br><span class="line">    messi</span><br><span class="line">[root@func-lms-001 ~]#</span><br></pre></td></tr></table></figure></p><p>如果我们想在james前面加上lebron，那么采用的sed语句就是：<code>sed -i &#39;/^james/s/^/lebron /&#39; 123.txt</code>，如果要在curry后面加上champion，那么采用的语句就是：<code>sed -i &#39;/^curry/s/$/ champion!/&#39; 123.txt</code>。</p><p>使用完上面两句话之后，再#cat一下，看下效果：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@func-lms-001 ~]# cat 123.txt </span><br><span class="line">lebron james</span><br><span class="line">curry champion!</span><br><span class="line">  durant</span><br><span class="line">wade</span><br><span class="line">yaoming</span><br><span class="line">     messi</span><br><span class="line">[root@func-lms-001 ~]#</span><br></pre></td></tr></table></figure></p><p>现在我们要把durant前面加上FMVP这几个字母，按照上面的语句找葫芦画瓢的话，应该是：<code>sed -i &#39;/^durant/s/^/FMVP /&#39; 123.txt</code>。但是很抱歉，这个语句是错误的！因为<code>^</code>是匹配开头durant的意思，而我们再看一下durant那一行的开头是空格。</p><p>那么就要用liunx的正则来匹配空格，于是这句话就变成了：<code>sed -i &#39;/^\s\+durant/s/^/FMVP/&#39; 123.txt</code>，<code>^\s\+</code>这个就是正则里匹配空格的意思 。</p><p><code>cat</code>一下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@func-lms-001 ~]# cat 123.txt </span><br><span class="line">lebron james</span><br><span class="line">curry champion!</span><br><span class="line">FMVP   durant</span><br><span class="line">wade</span><br><span class="line">yaoming</span><br><span class="line">     messi</span><br><span class="line">[root@func-lms-001 ~]#</span><br></pre></td></tr></table></figure></p><p>那么现在要在messi后面加上”GOAL !!!”，就很简单了。语句是：<code>sed -i &#39;/^\s\+messi/s/$/ GOAL !!!/&#39; 123.txt</code>。</p><p>以上我们把有/无空格情况下的首尾添加字符都练习了一遍，下面我们要看看如果要在中间添加怎么办？</p><p>比如说，有一天苦逼的运维接到开发PL的邮件，说”由于安全基线要求，现在需要监听内网端口“，具体的需求就是把所有含tomcat的模块里的server.xml的文件里添加上内网IP。</p><p>原有的server.xml的节选如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Service name=<span class="string">"LMS"</span>&gt;</span><br><span class="line">        &lt;Connector port=<span class="string">"8080"</span> connectionTimeout=<span class="string">"20000"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> redirectPort=<span class="string">"8443"</span>  enableLookups=<span class="string">"false"</span> disableUploadTimeout=<span class="string">"true"</span> maxThreads=<span class="string">"500"</span> minSpareThreads=<span class="string">"20"</span> acceptCount=<span class="string">"100"</span>/&gt;</span><br><span class="line"></span><br><span class="line">         &lt;Connector port=<span class="string">"8088"</span> connectionTimeout=<span class="string">"20000"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> redirectPort=<span class="string">"8443"</span>  enableLookups=<span class="string">"false"</span> disableUploadTimeout=<span class="string">"true"</span> maxThreads=<span class="string">"500"</span> minSpareThreads=<span class="string">"20"</span> acceptCount=<span class="string">"100"</span>/&gt;</span><br><span class="line">                </span><br><span class="line">        &lt;Connector port=<span class="string">"8099"</span> protocol=<span class="string">"AJP/1.3"</span> redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line">        &lt;Engine defaultHost=<span class="string">"localhost"</span> name=<span class="string">"Catalina"</span>&gt;</span><br><span class="line">                 &lt;Realm className=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span><br><span class="line">                                &lt;Realm className=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span> resourceName=<span class="string">"UserDatabase"</span> /&gt;</span><br><span class="line">                 &lt;<span class="regexp">/Realm&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在要把<code>&lt;Connector port=&quot;8099&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code>这一句里面加上内网IP:<code>1.2.3.4</code>，改成这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Service name=<span class="string">"LMS"</span>&gt;</span><br><span class="line">               &lt;Connector port=<span class="string">"8080"</span> connectionTimeout=<span class="string">"20000"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> redirectPort=<span class="string">"8443"</span>  enableLookups=<span class="string">"false"</span> disableUploadTimeout=<span class="string">"true"</span> maxThreads=<span class="string">"500"</span> minSpareThreads=<span class="string">"20"</span> acceptCount=<span class="string">"100"</span>/&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Connector port=<span class="string">"8088"</span> connectionTimeout=<span class="string">"20000"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> redirectPort=<span class="string">"8443"</span>  enableLookups=<span class="string">"false"</span> disableUploadTimeout=<span class="string">"true"</span> maxThreads=<span class="string">"500"</span> minSpareThreads=<span class="string">"20"</span> acceptCount=<span class="string">"100"</span>/&gt;</span><br><span class="line">                       </span><br><span class="line">               &lt;Connector port=<span class="string">"8099"</span> address=<span class="string">"1.2.3.4"</span> protocol=<span class="string">"AJP/1.3"</span> redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line">               &lt;Engine defaultHost=<span class="string">"localhost"</span> name=<span class="string">"Catalina"</span>&gt;</span><br><span class="line">                        &lt;Realm className=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span><br><span class="line">                                       &lt;Realm className=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span> resourceName=<span class="string">"UserDatabase"</span> /&gt;</span><br><span class="line">                        &lt;<span class="regexp">/Realm&gt;</span></span><br></pre></td></tr></table></figure></p><p>请问怎么做？</p><p>答案1：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/&lt;Connector port="8099"/s/port="8099"/port="8099" address="1.2.3.4"/g'</span> server.xml</span><br></pre></td></tr></table></figure></p><p>答案2：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s@Connector port="8099"@&amp; address="1.2.3.4"@'</span> server.xml</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      sed是一个装逼利器！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix添加网卡内外流量监控</title>
    <link href="http://yoursite.com/2018/01/23/Zabbix%E6%B7%BB%E5%8A%A0%E7%BD%91%E5%8D%A1%E5%86%85%E5%A4%96%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2018/01/23/Zabbix添加网卡内外流量监控/</id>
    <published>2018-01-23T13:41:12.000Z</published>
    <updated>2018-01-23T13:51:44.231Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>现在笔者想对host名单里面的<code>zabbix_server</code>进行网卡的内外流量情况的一个监控，首先登录zabbix之后，<code>configuration</code>—<code>hosts</code>，出现如下的菜单：<br><img src="/images/zabbixnet1.png" alt="akb48"></p><p>现在可以看到这个zabbix_server后面link了很多个模板，正是因为link了很多的模板，所以导致它的items非常多，42个。现在是要在zabbix_server里添加两个新的监控项，这一步跟模板其实没有什么关系，只需要在items里直接添加items即可。</p><p>我们先添加网卡外流量的items，整个配置如图所示：<br><img src="/images/zabbixnet2.png" alt="akb48"></p><p>里面具体的数值可以自己更换，比如<code>Applications</code>什么的，<code>key\units\Use custom multiplier</code>这些是固定的，全部写完之后就可以save。</p><p>找葫芦画瓢，我们可以再添加一个网卡的内流量监控，也是一样的套路，如图所示：<br><img src="/images/zabbixnet3.png" alt="akb48"></p><p>有了<code>items</code>，就要有<code>trigger</code>，有了items里的<code>key</code>，那么<code>trigger</code>也很简单，这里的<code>expression</code>多时候各位都是从网上ctrl+c下来，却不能ctrl+v，因为会红字报错—-<code>Incorrect item key &quot;net.if.in[eth0,bytes]&quot; provided for trigger expression on &quot;服务器名称&quot;</code>，于是就有很多不明真相的吃瓜群众就走“add”路线，然后发现要走add路线还要先把服务器添加到对应的模板上去。其实大可不必，这个expression是可以自己写的，但是一定要确定trigger跟items是配对的。以外网流量所示：<br><img src="/images/zabbixnet4.png" alt="akb48"></p><p>在这里我添加成了1K，这样是为了方便监控，具体数值因情况而异，而且重要性我选择了无。</p><p>最后就是要形成图表来糊弄领导，让领导感受一下什么叫做高大上，在graph的界面里选择<code>create graph</code>，然后就如图所示的填写：<br><img src="/images/zabbixnet5.png" alt="akb48"></p><p>一个是红色线，一个是绿色线，双龙戏珠，<code>save</code>。</p><p>最后来到<code>Monitoring</code>—<code>Graphs</code>里，找到正确的host,group和graph，就会看到激动人心的图表了：<br><img src="/images/zabbixnet6.png" alt="akb48"></p><p>这里要注意几点，有时候zabbix反应较慢，可能写好的key会出现<code>not support</code>的情况，这个时候可以先登录zabbix_server去<code>zabbix_get</code>一下，<code>zabbix_get</code>的方法之前有讲过，请见<a href="http://chenx1242.blog.51cto.com/10430133/1738820" target="_blank" rel="noopener">http://chenx1242.blog.51cto.com/10430133/1738820</a> ，如果<code>zabbix_get</code>是成功返回值的，先检查对应的单位（结果是浮点值，但是units设定是一个整数值肯定会<code>not support</code>）,如果单位检查正确，就修改zabbix重新check的时间，实在不行就重新建立一个items。</p>]]></content>
    
    <summary type="html">
    
      zabbix讲究一气呵成，从头到尾没人打扰然后布置。但是干运维难免有人来打扰，这个过来要求布环境，那个要求来买服务器。所以zabbix之路难免走的坑坑洼洼。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="服务器监控" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用Nessus进行漏洞扫描的过程</title>
    <link href="http://yoursite.com/2018/01/23/%E4%BD%BF%E7%94%A8Nessus%E8%BF%9B%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/23/使用Nessus进行漏洞扫描的过程/</id>
    <published>2018-01-23T04:53:51.000Z</published>
    <updated>2018-01-23T06:04:53.571Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>对于一个服务器运维工作者，掌握和运用一门漏洞扫描的工具也是行走江湖的必备项，Nessus就是漏洞扫描的强力武器。Nessus为一款当下比较流行的系统弱点扫描与分析软件，他的优点是操作简单（配置几乎全web化），而且页面精美、扫描项广泛；缺点就是目前不支持中文…</p><h2><span id="下载与安装">下载与安装</span></h2><p>要安装Nessus，需要登陆<code>https://www.tenable.com/products/nessus/select-your-operating-system</code>,选择对应的系统，我这个服务器是centos 7，那么就选择下图里红色的那个rpm包：<br><img src="/images/nessus1.png" alt="paradin"></p><p>点击之后，出来一个同意条款，同意之后就开始自动下载。但是要安装nessus仅仅有程序是不够的，还需要一个对应的验证码，在上面那个界面里，下拉一点有一个<code>get an activation code</code>的check，点击之后跳转到<code>https://www.tenable.com/products/nessus/nessus-plugins/obtain-an-activation-code</code>，里选择家用free版，点击下面的<code>register now</code>：<br><img src="/images/nessus2.png" alt="paradin"></p><p>注册是很简单的，填写名称和电邮就可以了。不久后就会在电子邮件里面获得一个校验码。</p><p>把下载的那个Nessus-6.11.1-es7.x86_64.rpm包上传到centos之后，<code>rpm -ivh Nessus-6.11.1-es7.x86_64.rpm</code>进行安装，安装完成之后，<code>service nessusd start</code>启动进程，启动完毕之后，使用<code>netstat -lnpt|grep 8834</code>，来检查一下8834端口是否被监听，如图：<br><img src="/images/nessus3.png" alt="paradin"></p><p>端口监听OK，那么在浏览器里输入<code>https://服务器外网IP地址:8834</code>打开控制web界面，如果有提示当前连接不安全，无视掉就可以。nessus的欢迎界面如下：<br><img src="/images/nessus4.png" alt="paradin"></p><p>注册一个账号之后，在这个界面里面选择home那一条，输入邮箱里面获得的那个注册码：<br><img src="/images/nessus5.png" alt="paradin"></p><p>整个的配置就完事了，继而就是nessus自动安装的过程，大约需要几分钟：<br><img src="/images/nessus6.png" alt="paradin"></p><p>整个安装完毕之后，就会看到nessus的主界面，简单明了的风格：<br><img src="/images/nessus7.png" alt="paradin"></p><p>至此整个nessus的安装过程结束。</p><h2><span id="配置扫描策略以及启动扫描任务">配置扫描策略以及启动扫描任务</span></h2><p>nessus扫描漏洞的流程很简单：需要先”制定策略”，然后在这个策略的基础上建立”扫描任务”，然后执行任务。首先，我们先建立一个<code>policy</code>，如图：<br><img src="/images/nessus8.png" alt="paradin"></p><p>点击<code>New Policy</code>之后，就会出现很多种扫描策略，这里我们选择<code>Advanced Scan</code>(高级扫描)：<br><img src="/images/nessus9.png" alt="paradin"> </p><p>我给这个测试的扫描策略，起名叫”chenchenchen”，如图：<br><img src="/images/nessus10.png" alt="paradin"> </p><p>对于上面这个图，<code>Permissions</code>是权限管理，是否可以准许其他的nessus用户来使用你这个策略；<code>Discovery</code>里面有主机发现、端口扫描和服务发现等功能；<code>assessment</code>里面有对于暴力攻击的一些设定；<code>Report</code>里面是报告的一些设定；Advanced里面是一些超时、每秒扫描多少项等基础设定，一般来说这里默认就好。我们主要来看看那个<code>plugins</code>。</p><p><code>Plugins</code>里面就是具体的策略，里面有父策略，具体的父策略下面还有子策略，把这些策略制定得体的话，使用者可以更加有针对性的进行扫描。比如我这个策略是针对于centos系统的扫描策略，那么一些冗余的项目大可以完全不要，举个例子：<br><img src="/images/nessus11.png" alt="paradin"> </p><p>在上面这个图里面，我不需要<code>amazon linux local security checks</code>这个“亚马逊linux本地安全检查”父策略，那就把它disabled掉，而对于<code>centos local security checks</code>这个父策略呢，我又不需要那几个关于bind的子策略，那我就单独把那些子策略disabled掉，这样等等操作，就搭配成为了一个用时不长但是又包含了所有制定的检查项的策略，然后点击<code>save</code>保存。</p><p>保存完后，我们就发现policy里多了一条<code>chenchenchen</code>的记录：<br><img src="/images/nessus12.png" alt="paradin"> </p><p>既然策略有了，现在我们就来制定一个任务。在主界面里选择<code>My Scans</code>,点击<code>New Scans</code>,这个时候还是有很多个图标，但是我们选择后面的<code>User defined</code>，如图：<br><img src="/images/nessus13.png" alt="paradin"> </p><p>这里我们就看到了我们已经制定好的那个chenchenchen策略，点击这个chenchenchen之后，就要给这个依赖chenchenchen策略的任务起名字以及需要扫描的网络段，由于我这个测试机的内网ip段是10.132.27.0，于是我就写了“10.132.27.0/24”，任务名字叫chentest：<br><img src="/images/nessus14.png" alt="paradin"> </p><h2><span id="启动扫描任务">启动扫描任务</span></h2><p>点击save保存之后，就会看到My Scans里多了这个chentest的任务，点击三角播放箭头，那么这个任务就开始执行了！如图：<br><img src="/images/nessus15.png" alt="paradin"> </p><p>从该界面可以看到扫描任务的状态为Running（正在运行），表示chentest扫描任务添加成功。如果想要停止扫描，可以单击方块（停止一下）按钮。如果暂停扫描任务，单击暂停按钮。</p><p>扫描完毕之后，我们就会看到一个结果反馈，如图：<br><img src="/images/nessus16.png" alt="paradin"> </p><p>具体的颜色代表，在旁边有描述，例子里这些蓝色的info代表没有重大漏洞，点击一下蓝色，还会出现更加详细的信息，包括IP地址、操作系统类型、扫描的起始时间和结束时间：<br><img src="/images/nessus17.png" alt="paradin"> </p><p><img src="/images/nessus18.png" alt="paradin"> </p><p>同时，nessus还支持pdf、web、csv等多种方式汇报扫描结果，至此，整个nessus漏洞扫描的全过程就结束了。</p><h2><span id="nessus配置smtp">Nessus配置smtp</span></h2><p>Nessus漏洞扫描是提供邮件服务，可以将扫描的结果发送给指定的邮箱。配置它的方法很简单，先登陆Nessus的界面，点击左上角的<code>settings</code>，然后选择左侧菜单栏里的<code>Smtp server</code>，如图：<br><img src="/images/nessus19.png" alt="paradin"></p><p>再就是填写对应的项目，我这里发送邮件的地址是：<code>chenx3314@sina.com</code>，接受的地址是<code>124208739@qq.com</code>，由于发送邮件使用的是新浪的邮箱，那么host就填写新浪的smtp服务器，即smtp.sina.com，如果是要SSL加密的话，端口写465，同时在Encryption那里选择<code>Force SSL</code>，在Auth Method那里选择<code>login</code>的鉴权方式，然后输入chenx3314@sina.com的账号密码，如图：<br><img src="/images/nessus20.png" alt="paradin"></p><p>点击<code>Send Test Email</code>，然后输入接收的邮箱，如果是多个邮箱那么就用英文逗号隔开。看到成功的提示就是OK了：<br><img src="/images/nessus21.png" alt="paradin"></p><p>然后就可以到邮箱里面看到那个测试的邮件内容：<br><img src="/images/nessus22.png" alt="paradin"></p>]]></content>
    
    <summary type="html">
    
      传说中最流行的漏洞扫描程序...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维技术" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nessus" scheme="http://yoursite.com/tags/nessus/"/>
    
  </entry>
  
  <entry>
    <title>mysql清除磁盘碎片</title>
    <link href="http://yoursite.com/2018/01/23/mysql%E6%B8%85%E9%99%A4%E7%A3%81%E7%9B%98%E7%A2%8E%E7%89%87/"/>
    <id>http://yoursite.com/2018/01/23/mysql清除磁盘碎片/</id>
    <published>2018-01-23T02:44:23.000Z</published>
    <updated>2018-01-23T06:47:49.775Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="任务背景">任务背景</span></h2><p>接到金山云报警短信，说某数据库的容量已经达到了90%的水位线，于是登陆控制台查看详细情况。</p><p>在控制台首先发现，每一天的磁盘容量的确有所波动，那么就证明开发人员写的“资源回收”模块是在正常运行的，如图：<br><img src="/images/suipian3.png" alt="paradin"></p><p>那么就说明没有什么数据是可以删的，既然删不掉多余的数据又不想多掏钱扩磁盘容量，只能从“磁盘碎片”下手了。而<code>InnoDB</code>引擎清理磁盘碎片的命令就是<code>OPTIMIZE</code>。</p><h2><span id="具体操作">具体操作</span></h2><p>首先我先查询一下所有的“磁盘碎片情况”，使用语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CONCAT(TABLE_SCHEMA,<span class="string">'.'</span>,TABLE_NAME) <span class="keyword">as</span> 数据表名,concat(truncate(sum(DATA_LENGTH+DATA_FREE+INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> total_size, concat(truncate(sum(DATA_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> data_size,concat(truncate(sum(DATA_FREE)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> data_free, concat(truncate(sum(INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">'MB'</span>) <span class="keyword">as</span> index_size <span class="keyword">from</span> information_schema.tables group by TABLE_NAME order by data_length desc;</span><br></pre></td></tr></table></figure></p><p>或者使用<code>select table_schema, table_name, data_free, engine from information_schema.tables where table_schema not in (&#39;information_schema&#39;, &#39;mysql&#39;) and data_free &gt; 0;</code>也可以，这个是查询<code>data_free</code>大于0的所有表。</p><p>然后看到我这个叫<code>history_device_flow_day</code>的表里情况如下：<br><img src="/images/suipian1.png" alt="paradin"></p><p>表里的<code>data_free</code>就是磁盘碎片的量，比如我现在要干掉<code>history_device_flow_day</code>里所有的磁盘碎片，是975MB，于是先查询一下这个<code>history_device_flow_day</code>的存储引擎，使用语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status <span class="keyword">from</span> jsonlinefssrds where name=<span class="string">'history_device_flow_day'</span>;</span><br></pre></td></tr></table></figure></p><p>上面语句里的<code>jsonlinefssrds</code>是对应的数据库，看到的效果如下：<br><img src="/images/suipian4.png" alt="paradin"></p><p>存储引擎是<code>InnoDB</code>，那么就可以启动清除碎片的语句了：<code>OPTIMIZE TABLE 数据表表名;</code>，因为<code>OPTIMIZE TABLE</code>只对<code>MyISAM</code>、<code>BDB</code>和<code>InnoDB</code>表起作用。</p><p>再执行了<code>OPTIMIZE TABLE history_device_flow_day;</code>之后，大约9分钟，就会看到“OK”的字样：<br><img src="/images/suipian5.png" alt="paradin"></p><p>估计有的朋友会问，那上面不是明明写了“Table does not support optimize, doing recreate + analyze instead”吗？这个其实无妨，实际上磁盘碎片已经被清除掉了。我们可以再用一次查询磁盘碎片的命令看一下，如图：<br><img src="/images/suipian2.png" alt="paradin"></p><p>的确释放了900多M。</p><p>或者使用<code>ALTER TABLE 表名 ENGINE = Innodb;</code>（只是<code>InnoDB</code>的表可以这么做，而且据说这么做更友好）来达到清理磁盘碎片的目的，这个命令表面上看什么也不做,实际上是重新整理碎片了。当执行优化操作时,实际执行的是一个空的<code>ALTER</code>命令,但是这个命令也会起到优化的作用,它会重建整个表,删掉未使用的空白空间。</p><h2><span id="补充">补充</span></h2><p>为什么会产生磁盘碎片？那是因为某一个表如果经常插入数据和删除数据，必然会产生很多未使用的空白空间，这些空白空间就是不连续的碎片，这样久而久之，这个表就会占用很大空间，但实际上表里面的记录数却很少，这样不但会浪费空间，并且查询速度也更慢。</p><p><font color="red">注意！<code>OPTIMIZE</code>操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作。</font>所以把<code>OPTIMIZE</code>命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响。比较好的方式就是做个shell,定期检查mysql中 <code>information_schema</code>.<code>TABLES</code>字段,查看<code>DATA_FREE</code>字段,大于0的话,就表示有碎片，然后启动脚本。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://pengbotao.cn/mysql-suipian-youhua.html" target="_blank" rel="noopener">http://pengbotao.cn/mysql-suipian-youhua.html</a><br><a href="http://irfen.me/mysql-data-fragmentation-appear-and-optimization/" target="_blank" rel="noopener">http://irfen.me/mysql-data-fragmentation-appear-and-optimization/</a></p>]]></content>
    
    <summary type="html">
    
      InnoDB使用的Clustered Index,索引和数据绑定在一起,重排序是不现实的。所以不支持MyISAM式的OPTIMIZE,而是绑定到了ALTER TABLE命令上面。可以通过执行以下语句来整理碎片,提高索引速度
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>一道传说中是百度面试的shell试题</title>
    <link href="http://yoursite.com/2018/01/23/%E4%B8%80%E9%81%93%E4%BC%A0%E8%AF%B4%E4%B8%AD%E6%98%AF%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E7%9A%84shell%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/23/一道传说中是百度面试的shell试题/</id>
    <published>2018-01-23T01:37:31.000Z</published>
    <updated>2018-01-23T01:45:15.170Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>【问题】<font color="blue">写脚本实现，可以用shell、perl等。把文件b中有的，但是文件a中没有的所有行，保存为文件c，并统计c的行数。</font><br>翻译成人话就是，假设有一个文件a是:<br>a<br>b<br>c<br>d</p><p>文件b是:<br>1<br>2<br>3<br>4<br>a<br>b</p><p>现在要求输出“b有a没有”的行，即1 2 3 4，然后<code>wc -l</code>一下。</p><p>【思路】两个文件比较，第一想法就是<code>diff</code>，但是<code>diff</code>无论是<code>-c</code>还是<code>-y</code>会牵扯进大量的<code>&gt; &lt; + -</code>不说，而且diff命令是直白对比，即使字母相同但所在行不同，也会被<code>diff</code>记录。如果再用<code>for in</code>语句然后一项一项对比也不会很清晰的解决这个问题，所以要换个方法。</p><p>第二个方法就是<code>comm</code>命令，但是这个命令有一个前提，就是要<code>sort</code>排序，<code>comm</code>比<code>diff</code>高明之处在于它只比较内容而不在意是否同一行，但是要注意对比文件的先后。<code>comm -12 a b</code>是找”a和b都有”的项，<code>comm -23 a b</code>就是找”a有而b没有”。</p><p>【解答】perl我不会，我就用shell写：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#written by ChrisChan @ 2016-4-21</span><br><span class="line">sort a.txt&gt;a1.txt        #排序，不然会有提示</span><br><span class="line">sort b.txt&gt;b1.txt</span><br><span class="line">comm -23 b1.txt a1.txt &gt;c.txt    #由于是要找b有a没有的,就要b写在前，a写在后</span><br><span class="line">echo $(cat c.txt|wc -l)</span><br></pre></td></tr></table></figure></p><p>其实还有一个更简单的，只用一句话:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v -x b.txt -f a.txt|wc -l</span><br></pre></td></tr></table></figure></p><p>很多书上不写<code>grep -x -f</code>的意思，这里补一下：<br><code>-f</code>:指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。<br><code>-x</code>:只显示全列符合的列。</p><p>从一个题就能轻松看出shell的能力级别，用diff死纠缠就是初级，用comm就是中级，而grep就是高级。的确是一个好题。</p><p>【补充】如果考python，求这种类似“你有我没有”的东西，用set里面的差集算法。<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;A=&#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>&#125;</span><br><span class="line">&gt;&gt;&gt;B=&#123;<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(A-B)</span><br><span class="line">set([1,2])    #A有B没有</span><br><span class="line">&gt;&gt;&gt;print(A ^ B)</span><br><span class="line">set([1,2,5,6])  #差集的补集</span><br><span class="line">&gt;&gt;&gt; A&amp;B</span><br><span class="line">&#123;3, 4&#125;    #交集</span><br><span class="line">&gt;&gt;&gt; A|B</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;    #全集</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      comm命令、diff命令和grep命令
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="面试经验" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>解决Zabbix在web界面中文显示的问题</title>
    <link href="http://yoursite.com/2018/01/22/%E8%A7%A3%E5%86%B3Zabbix%E5%9C%A8web%E7%95%8C%E9%9D%A2%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/22/解决Zabbix在web界面中文显示的问题/</id>
    <published>2018-01-22T03:31:40.000Z</published>
    <updated>2018-01-22T04:42:32.036Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><font color="red">注意！这个是解决web界面中文显示乱码的问题，不是zabbix web界面全中文汉化的问题。</font><h2><span id="22版本的处理方法">2.2版本的处理方法</span></h2><p>zabbix里给host或者item等项目起中文名字的时候，可能在graph上无法正确显示中文字符，如图：<br><img src="/images/zabbixchinese1.jpg" alt="paradin"></p><p>那么遇到这样的情况其实很简单，就是zabbix的web界面没有安装中文字库的问题，那就对症下药，下载中文字库。</p><p>中文字库的下载地址在这里：<code>http://linux.linuxidc.com/2012%E5%B9%B4%E8%B5%84%E6%96%99/11%E6%9C%88/22%E6%97%A5/Zabbix%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</code> ，下载“LinuxIDC.com下载-kaiti.tar.gz”。</p><p>后把这个文件改一下名，可能很多linux不识别那个中文字“下载”,<code>mv LinuxIDC.com下载-kaiti.tar.gz kaiti.tar.gz</code>，<code>tar -zxvf kaiti.tar.gz</code></p><p>然后就会发现当前路径里生成了一个叫<code>kaiti.ttf</code>，这个就是我们所需要的中文“楷体”字体文件。</p><p>来到zabbix的web字体路径，在我的机器里，这个负责字体的文件夹叫<code>/usr/local/nginx/html/zabbix/fonts/</code>。虽然各位安装zabbix的路径各有差别，但是这个文件夹一般都是在<code>nginx or apache</code>的html下，所以很好找的。</p><p>在这个fonts文件夹里默认已经有一个叫<code>DejaVuSans.ttf</code>的文件了，于是就把这个<code>kaiti.tff</code>也放到这个文件夹下。</p><p>光有字体文件没有用，还需要在配置文件里使用这个字体文件，于是就vim一下同样在<code>nginx or apache/html/zabbix/include</code>的<code>defines.inc.php</code>。把里面所有的<code>DejaVuSans</code>替换成<code>kaiti</code>，.<code>tff</code>这个后缀是不用加的。然后保存退出，重新刷一下界面就看到效果了。</p><p>vim的替换语句 :<code>%s/DejaVuSans/kaiti/g</code><br><img src="/images/zabbixchinese2.png" alt="paradin"></p><p><img src="/images/zabbixchinese3.png" alt="paradin"></p><h2><span id="3x版本的处理方法">3.x版本的处理方法</span></h2><p>现在zabbix已经升级到3.x了，上述的方法已经失效了，这里记录一下新的中文配置方法。</p><p>首先从windows里，拷贝一个中文字体的文件到zabbix的服务器的<code>/usr/share/zabbix/fonts</code>文件夹里，比如我先择了“楷体”，这个文件叫<code>simkai.ttf</code>，<code>chmod +x simkai.ttf</code> 给予可执行权限。<br><img src="/images/zabbixchinese4.png" alt="paradin"></p><p>然后<code>vim /usr/share/zabbix/include/defines.inc.php</code>，修改两处地方，分别是第四十五行，把原来的改成<code>simkai</code>，如图：<br><img src="/images/zabbixchinese5.png" alt="paradin"></p><p>还有一处就是第九十三行，也是改成<code>SIMKAI</code>：<br><img src="/images/zabbixchinese6.png" alt="paradin"></p><p>保存文件之后，刷新一下zabbix界面即可。</p>]]></content>
    
    <summary type="html">
    
      我知道你懂英语，但是你的领导们未必懂啊....
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="运维与监控" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E4%B8%8E%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>防盗链的等等相关</title>
    <link href="http://yoursite.com/2018/01/22/%E9%98%B2%E7%9B%97%E9%93%BE%E7%9A%84%E7%AD%89%E7%AD%89%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/01/22/防盗链的等等相关/</id>
    <published>2018-01-22T01:48:38.000Z</published>
    <updated>2018-01-22T02:27:02.701Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="为什么网站们都要限制流量">为什么网站们都要限制流量？</span></h2><p>无论是网站服务器亦或是游戏服务器还是邮件服务器，说穿了也是一台电脑，也有CPU和内存。只不过服务器的CPU功能比个人电脑的CPU功能强大，比如个人电脑的CPU一秒钟能算1亿个数，那么服务器的CPU一秒钟就能算十亿个数。毕竟个人电脑只针对个人，但是服务器是要“接客”的，有了强大的硬件做后盾，网页/游戏/邮箱才不会那么轻易的Down掉。</p><p>但是CPU不是人类大脑，人脑是越用越聪明，CPU是越用越磨损，毕竟始终在连电的环境下。于是乎，没有必要的运算能省就省，一个人省一次，十万个人就省十万次，一千万个人就省一千万次，这样达到积少成多的目的。</p><p>CPU计算的是各种数据，而这些数据也叫作流量。有用的流量、有价值的流量通过CPU计算无可厚非，但是出现了没有用的流量或者是别人盗用我们的资源，那么这种情况能避免都要避免。什么叫盗用我们的资源，比如自己网站（网站A）上的图片或者视频，被其他人直接复制网站然后粘贴到他们的主页（网站B）上，其他用户登录了B网站，然后点击了那个图片和视频，由于是网址重链接，里外里提供数据的还是我们的服务器。也就是说B网站就是一个中介，而真正提供服务的是网站A，但是广告费和点击率都要网站B赚走了，这事儿实在是叔可忍婶不可忍。</p><h2><span id="什么是盗链如何发现被盗链">什么是盗链？如何发现被盗链？</span></h2><p>什么叫盗链，上面已经说的差不多了，如果上面的文字没有看懂的话，举个例子，如果您看到了这两个图片，证明这个网站就是在盗链。<br><img src="/images/daolian1.jpg" alt="paradin"></p><p><img src="/images/daolian2.jpg" alt="paradin"><br>这两个就是一个盗取的是QQ空间的图片，另一个就是百度的图片。用其他网站的图片这事儿本身是无所谓的，只要不涉及版权问题，都希望自己的作品能广泛传播，但是请不要直接通过网址重定向，厚道一点的行为应该是：“图片另存为”，然后到目标网站上去重新上传一下。</p><p>这里再多说一点网站的基础知识。</p><p>PV值：<code>PV=page view</code>，网站是有少则一个网页多则N多网页组成的一个整体，PV值就是统计用户访问网站的总页数。比如www.JQK.com这个网站，今天有100个用户登录，平均每个用户翻阅了里面5个网页。那么这个网站的PV值就是500。若一个IP地址，对一个页面刷新10000次，PV值也是1.要查询网站的PV值登陆<code>http://www.alexa.cn</code>就行。</p><p>Hit值：这个就是对网页里每个元素的点击量，一个网页里的图片就是一个元素，一个flv文件也是一个元素，一首歌曲也是一个元素。这些的总量就是hit值，hit值越高就证明这个网站被人查看的情况越高，那么也证明网站的高人气，那么自然广告也会卖出去很多钱。</p><p>因为建网站这事儿关心到了金钱利益，网站越被人关注，自然价值也越大。于是会有一个公式来评判网站的“每日贡献”：<code>总流量=访问流量+下载流量= Page view值 x 页面大小+下载文件大小 x 下载次数</code></p><p>作为管理者，每天观察一下自己一亩三分地儿的网站数据情况是本职工作。但是有时候也会遇到网站流量很惊人的情况，一般来说，网站流量过大（CPU运转很多）的原因如下：</p><p>1）网站是一个很大的网站：比如说淘宝，京东，网易，youtube,facebook那种大网站，里面成万上亿的网页，而且每天又有那么多人登陆，自然浏览量很大。虽然这些大集团的服务器也是少则几千，多则上万，甚至在不同地区也会有不少的服务器集群，但是这几万台服务器需要提供的数据会很多也是不争的事实。这种现象是正常的。</p><p>2）网页内容太大：可能本身网站是一个小网站，加起来也就十页二十页的内容，但是每一天的流量依旧很惊人，那么很有可能是单页或者某几页的字节太大。比如网页里有太多的图片，太多的视频，太多的其他链接，也有可能是前端码农们给这个网页的规划不合理。导致这个网页每一次被点击都要大费周折（hit值和PV值不高，但是日流量很高），长此以往不仅会耽误用户的整体体验，对服务器也是一个重大伤害。</p><p>3）搜索引擎产生了大量的数据流量：网站需要推广，于是就在各种搜索引擎上打广告，也有自己网站的很多图片用于外部调用。这样的结果就是本身来观摩网站的人很少，但是“借着引擎经过”的人很多，所以就会有PV值不高，但是Hit值和日流量很高的现象出现。</p><p>4）图片或者其他元素被盗链：第一部分就说过了，别人拿我们的图片去吸引别人关注，然后别人想要深入了解，还要来使用我们的服务器去提供详细数据。这种“用我们的牌子住我们的房，吃我们的饭却不给我们钱”的现象实在应该被弄死。这种现象的特征也是PV值不高（没人真正点击网站），但是Hit值和日流量很大（自己服务器的数据都给别的网站提供了）。</p><p>5）网站被DDos攻击了：被一些恶意的IP地址频繁登陆，来回的刷流量。这样迫使CPU做出运算的行为其实就是在远程的破坏服务器的硬件CPU，遇到这种现象，之前Nginx文章里有写，要么通过access.log找到这些IP封掉，要么就在配置文件里加上限制<code>limit-rate</code>。</p><h2><span id="服务器是如何知道图片是从站外而来的呢">服务器是如何知道图片是从站外而来的呢？</span></h2><p>在http协议里有一个重要的选项叫refer，这个选项的内容就是该元素的来源地址。如果这个元素是服务器自己提供的，那么头文件里是没有refer这个选项的。通过refer这个信息，我们也可以知道登陆网站的客户是从哪个网站点击链接而来的。这样方便进行一个统计和规划。</p><p>假如，我在QQ空间里面发现一个图，然后右键图片，选择”在新标签栏里打开图片”，这时候通过浏览器“审查元素”的功能，能查查看请求头信息和响应头信息，发现响应头信息里多了一个refer，里面的内容就是图片的源地址：<br><img src="/images/daolian3.jpg" alt="paradin"></p><p>我在QQ空间里看腾讯的照片自然是可以的，但是如果我在别的网站里看腾讯的照片，加重了腾讯服务器的负担，自然腾讯公司会不满意。于是腾讯服务器发现当前要引用这个图片的地址与refer头信息不是一个来源之后，就不会把这个图片的数据传送过来，于是就看到那个“此图片来自QQ空间，未经准许不可饮用”的警告图片。</p><p>既然知道了服务器是如何判断文件是否盗链，那么只要伪装一个refer就可以欺骗服务器达到“反防盗链”的目的了。至于这部分，可以自己单独研究。<br>如何使用Nginx反盗链？</p><p>同样的使用<code>Nginx.conf</code>，在http的大括号下面，新建一个location，加入如下信息：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location</span><br><span class="line">~ .*\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv)$ &#123;</span><br><span class="line">#指定对以上几种类型的文件建立防盗链</span><br><span class="line">    valid_referers</span><br><span class="line">none blocked *.alala.com alala.com;</span><br><span class="line">#盗链的范围不包括alala.com和alala.com下的二级网站，</span><br><span class="line">     <span class="keyword">if</span></span><br><span class="line">($invalid_referer)</span><br><span class="line"> &#123;</span><br><span class="line">     #rewrite</span><br><span class="line"> ^<span class="regexp">/ http:/</span><span class="regexp">/www.alala.com/</span>error.html;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line"><span class="number">403</span>;</span><br><span class="line">#如果发现有引用以上文件的地址与refer头信息不符的情况，直接重定向成error.html这个网页，服务器返回403，forbidden。</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="使用第三方模块ngx_http_accesskey_module实现nginx防盗链">使用第三方模块ngx_http_accesskey_module实现Nginx防盗链</span></h2><p>实现方法如下：</p><ol><li>下载NginxHttpAccessKeyModule模块文件：<code>http://wiki.nginx.org/File:Nginx-accesskey-2.0.3.tar.gz</code>；</li><li>解压此文件后，找到nginx-accesskey-2.0.3下的config文件。编辑此文件：替换其中的<code>$HTTP_ACCESSKEY_MODULE</code>为<code>ngx_http_accesskey_module</code>；</li><li><p>用一下参数重新编译nginx：<br> ./configure –add-module=Nginx目录/to/nginx-accesskey<br>然后执行: <code>make &amp;&amp; make install</code></p></li><li><p>修改nginx的conf文件，添加以下几行：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">  accesskey on;</span><br><span class="line">  accesskey_hashmethod md5;</span><br><span class="line">  accesskey_arg <span class="string">"key"</span>;</span><br><span class="line">  accesskey_signature <span class="string">"mypass$remote_addr"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中：<br>1.accesskey为模块开关；<br>2.accesskey_hashmethod为加密方式MD5或者SHA-1；<br>3.accesskey_arg为url中的关键字参数；<br>4.accesskey_signature为加密值，此处为mypass和访问IP构成的字符串。</p>]]></content>
    
    <summary type="html">
    
      捍卫自己的图片合法权利！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="网络相关" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录一次配置http跳转https的过程</title>
    <link href="http://yoursite.com/2018/01/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AEhttp%E8%B7%B3%E8%BD%AChttps%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/18/记录一次配置http跳转https的过程/</id>
    <published>2018-01-18T09:33:31.000Z</published>
    <updated>2018-01-22T02:35:54.038Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>公司最近搞了一个数据运营平台，这个平台会以web界面的形式把各个数据展示出来，这个项目是我们一个经理的重点关照项目。把平台模块部署完毕并且启动之后，又把这个平台服务器的外网IP绑定到<code>alkaid.lechange.com</code>这个域名上，在浏览器里输入<code>https://alkaid.lechange.com</code>,就看到了前端同行们写的网页。</p><p>但是我们的霸气经理说这样不行，说要更多要求更高标准更好体验，于是乎提出一个需求就是：<font color="blue">在输入<code>alkaid.lechange.com</code>的时候会自动跳转到<code>https://alkaid.lechange.com</code>。</font></p><p>既然如此，我们就在nginx上原有的<code>nginx.conf</code>里补充几个配置文件：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include upstream</span><br><span class="line">include upstream.conf;</span><br><span class="line"># include servers</span><br><span class="line">include alkaid.conf;</span><br><span class="line">include alkaid-https.conf;</span><br></pre></td></tr></table></figure></p><p>这样在执行<code>nginx.conf</code>的时候，就会调用<code>upstream.conf</code>、<code>alkaid.conf</code>和<code>alkaid-https.conf</code>，我们主要看一下这三个文件。</p><p>alkaid.conf文件如下：<br>    ```js<br>    server {<br>        listen 80;<br>        server_name *.lechange.com;<br>        proxy_buffering off;<br>        location / {<br>                rewrite ^/ <a href="https://alkaid.lechange.com" target="_blank" rel="noopener">https://alkaid.lechange.com</a> permanent;<br>                client_max_body_size 100m;<br>            }<br>    }</p><p>这里我们监听了80端口，下面那个<code>client_max_body_size 100m</code>是用来设定<code>nginx+php</code>上传文件的大小，这里规定是100m，这个可以写进<code>nginx.conf</code>里，如果有对上传文件方面感兴趣，可以看<a href="http://www.cnblogs.com/zhwl/archive/2012/09/18/2690714.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhwl/archive/2012/09/18/2690714.html</a> 。</p><p>再来看看<code>alkaid-https.conf</code>，如下：<br>    <code>``js    server {        listen 10000;        server_name *.lechange.com;        proxy_buffering off;        location / {                proxy_pass http://alkaid_backend;                proxy_set_header   X-Real-IP        $remote_addr;                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;                proxy_redirect     off;            }    }这里监听了10000端口，location写的是</code><a href="http://alkaid_backend`,这个`alkaid_backend`是啥东西?" target="_blank" rel="noopener">http://alkaid_backend`,这个`alkaid_backend`是啥东西?</a></p><p>这个时候我们就需要看一下<code>upstream.conf</code>，里面内容是:<br>    ```js<br>    upstream alkaid_backend {<br>        server   X.X.X.X:JQK;<br>        check interval=5000 rise=2 fall=5 timeout=1000 type=tcp default_down=false;<br>    }</p><p>X.X.X.X是模块服务器的内网IP地址，而JQK是模块服务器的模块端口，这里要根据实际的情况来写。可见<code>alkaid_backend</code>对应的就是模块服务器和它的端口，下面是检查间隔等等数值。</p><p>现在我们启动<code>nginx</code>，然后把nginx的外网地址绑定去<code>alkaid.lechange.com</code>这个域名，在浏览器里输入<code>alkaid.lechange.com</code>，就会达到自动跳转的目的了！</p><p>这里要额外多说一下，我们这里设定了80的配置文件也设置了443的文件，但是这俩文件的转发过程却不同：<code>alkaid-https.conf</code>文件把443的请求转向了平台模块服务器的服务，而<code>alkaid.conf</code>文件把凡是从80端口进来的请求直接全部永久重定向到<code>https://alkaid.lechange.com</code> ，但是这个<code>alkaid.lechange.com</code>还是会去访问平台模块服务器的服务，也就是说<code>alkaid.conf</code>文件多了一步重定向。</p>]]></content>
    
    <summary type="html">
    
      有了https，不用白不用
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>将电商平台测试环境添加了域名和https</title>
    <link href="http://yoursite.com/2018/01/18/%E5%B0%86%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%B7%BB%E5%8A%A0%E4%BA%86%E5%9F%9F%E5%90%8D%E5%92%8Chttps/"/>
    <id>http://yoursite.com/2018/01/18/将电商平台测试环境添加了域名和https/</id>
    <published>2018-01-18T06:42:12.000Z</published>
    <updated>2018-01-22T02:35:56.432Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="情况描述">情况描述</span></h2><p>今天电商平台来了新的产品经理。摸了一遍情况之后，提出了两个需求，<font color="blue">第一个是要把测试环境也要上https，达到与线上一致；第二个就是测试环境要配上域名，不要再用IP地址登陆。</font></p><p>配置域名是很简单的，在阿里云的云解析上直接给测试环境新加一个域名，然后对应添加阿里云外网SLB的IP地址即可。进入页面也发现首页地址显示正常，但是再点点就发现了里面有点不对。</p><p>没错，现象就是“只有首页是域名，其他网站都是IP”，<br><img src="/images/ecstore1.jpg" alt="paradin"></p><p>遇到这个情况，我就跑去<code>nginx.conf</code>里，看一下<code>server_name</code>的配置，看到的确写得是func.lechange.com，如图：<br><img src="/images/ecstore2.png" alt="paradin"></p><p>于是就在页面上使用<code>ctrl+shift+c</code>查看具体情况，发现里面的代码是这个样的：<br><img src="/images/ecstore3.jpg" alt="paradin"></p><p>这就人赃俱获了，<strong>开发已经在html里把地址写死了，使用了绝对路径而不是相对路径</strong>，于是就打回让开发自己慢慢改。</p><p>然后又回到SLB界面，新增新的https监听，前端端口443，后端是80，搭配正确的证书，SLB保存之后，在浏览器输入测试环境的<code>https://网址</code>之后，发现整个界面全乱了，如图：<br><img src="/images/ecstore4.png" alt="paradin"></p><p>但是使用<code>http://网址</code>去访问还是正常的，如图：<br><img src="/images/ecstore5.png" alt="paradin"></p><p>很明显，这是因为https下跨协议调用http的是不行的，所以那些css、js如果不支持https的话就无法正常显示。使用<code>ctrl+shift+c</code>看错误更加明显。<br><img src="/images/ecstore6.png" alt="paradin"></p><p>遇到这个问题，就有如下几种方法：</p><p>第一种：将所有的访问路径都写死<code>https</code>，不过这个我们公司代码规范不准许;<br>第二种：去掉URL中的<code>http://</code>或<code>https://</code>，将其替换为<code>//</code>，这样，浏览器就可以根据当前页面的请求方式来动态切换了；<br>第三种：可以在<code>&lt;head&gt;</code>中添加<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code>,浏览器会在加载HTTP资源时自动替换成HTTPS请求；<br>第四种：在nginx里写一个proxy_redirect跳转，这个就比较有技术含量了；</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://thehackernews.com/2015/04/disable-mixed-content-warning.html" target="_blank" rel="noopener">https://thehackernews.com/2015/04/disable-mixed-content-warning.html</a><br><a href="https://www.tuicool.com/articles/ARVVFjI" target="_blank" rel="noopener">https://www.tuicool.com/articles/ARVVFjI</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content</a></p>]]></content>
    
    <summary type="html">
    
      一次通宵，腰疼三天...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="网络基础" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师笔试题第十四套</title>
    <link href="http://yoursite.com/2018/01/17/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A5%97/"/>
    <id>http://yoursite.com/2018/01/17/Linux运维工程师笔试题第十四套/</id>
    <published>2018-01-17T14:18:33.000Z</published>
    <updated>2018-01-23T14:16:45.049Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>这几天一边看着《nginx高性能WEB服务器详解》，一边看着基础知识。那么最容易入眼的基础知识是什么呢？当然是面试题了，于是乎就找出来一些阿里（含滴滴和蚂蚁金服）的运维面试题，以题带看。</p><p>看完之后觉得阿里真的不是盖的，面试题的质量比那些晚上乱七八糟的题质量好多了，细节抠的真是非常细。我记得曾经有一个前辈曾经说过，工作中我们经常注意一些奇淫技巧，但是忽视了基础知识的重要性，现在好多程序员不会认认真真地读本书，喜欢快餐文化，受了市面上很多培训机构的影响，这是要不得的。</p><p>最后再说一句，以下所有的题都属于“开放性”试题，可以根据基本点去发散，说出你的理解和认识。但是注意，不要避重就轻耍滑头，问A，可以发散到A1、A2…但是不要发散到X、Y、Z，然后大谈特谈XYZ，这种“小聪明”就是找死的行为。</p><h2><span id="废话到此为止上题">废话到此为止，上题</span></h2><p>1）<font color="blue">http一般是无状态的，怎么让它变成有状态的？</font><br>[我的答案]http跟IP、UDP一样都是无状态的，http的无状态意思是“每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况”。<font color="green">补充一下，TCP是有状态的，它的请求并不独立，它通过包头的一些控制字段来分别包的关系，这里可以自行脑补一下“三次握手”的图。</font></p><p>那么http是无状态的这一点是无法改变的，那么要变得“有状态”，就需要引入cookie和session，通过这两个机制去实现一个有状态的WEB应用。用一个表达式可以这么理解：<code>Web应用=http协议+session、cookies等状态机制+其他辅助的机制</code>。</p><p>2）<font color="blue">解释一下cookie和session的区别</font><br>[我的答案]Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中，session是一个抽象概念，开发者为了实现中断和继续等操作，抽象出来的一个“会话”，接上面那道题，session这个东西能不用就不要用，因为它是有状态的，服务器要维护一个有状态的东西是很消耗资源的（比如内存和空间），我估计，天猫京东那规模的电商，肯定有一个专门的session集群。</p><p>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式，cookie是一个实际存在的东西，它是在http协议中定义在header中的字段。</p><p>session的常见实现要借助cookie来发送sessionID给客户端，如果浏览器禁用cookie，那么就要通过重写url来获取sessionid，各位可以联想一下电商的购物车，购物车可以实现在一个网站的不同页面把东西都放进一个购物车，这就是session的重点应用。现在也很流行一个token，其实token和sessionid是一个意思。</p><p>3）<font color="blue">多进程和多线程的区别，自己喜欢用哪个？为什么？</font></p><p>4) <font color="blue">lvs脑裂如何解决，为什么会产生双master？双master时VIP通不通?</font><br>[我的答案]</p><p>额外补充一句，<font color="red">要排除脑裂问题，第一步是检查iptables，重要的话不说三遍也重要！</font></p><p>5) <font color="blue">为什么TCP比UDP的信息更加可靠？</font><br>tcp滑动窗口，详细说说原理，窗口的大小如何确定。</p><p>6) <font color="blue">cdn的工作原理。如何评估一个cdn sp做的好不好。</font><br>[我的答案]cdn的工作原理：通过权威dns服务器来实现优质节点的选择，通过缓存来减少源站的压力。</p><p>IT界有个很有名的比喻，正向代理是“找马云借钱”，反向代理是“给10086打电话”，而反向代理就是CDN的实现原理雏形的一部分。</p><p>7）<font color="blue">dns查询的过程说一下，为什么要有cname而不是直接返回一个cdn边缘节点的ip。</font><br>[我的答案]dns查询的过程以www.taobao.com为例：<br>1.在浏览器键入www.taobao.com,其实真正dns协议里用到的是www.taobao.com.最后还有一个点，可能是因为美观等原因，一般都不显示;<br>2.查询本地缓存（host文件或者是浏览器的缓存）中有没有该域名对应的记录，有的话就直接用了;<br>3.向运营商的DNS服务器发起dns解析的请求，一般称运营商的DNS服务器为local dns;<br>4.local dns会查询本地的缓存，local dns设置的缓存时间是有讲究的，过长过短都不好。另外local dns的查询是运营商的事，这里面水很深，外部不可控(这也是天朝能搭建特色墙的根源)；<br>5.local dns如果没有缓存，会把域名从右往左扫描，依次请求对应的服务器，例如对于域名www.taobao.com.，先去问负责.的根域名服务器，就是传说中全球只有几台的那些服务器，他们会答复.com是谁管理的，然后local dns又去找管理.com的服务器（假设名字为S1），去问问taobao.com是谁管，一般来说，在S1查到的记录是一条cname记录（阿里毕竟大公司，自己管理自己旗下的域名），然后就转到了阿里自己的DNS服务器上来了，一般称之为权威服务器；<br>6.权威服务器是阿里自己建的，然后根据公司内部的一些配置啊，调整啊，查到www.taobao.com.对应的服务器是谁，返回一个IP地址；<br>7.local dns缓存这个IP地址，并且回复浏览器；<br>8.浏览器和对应的IP地址的服务器建立TCP连接，发送HTTP报文；</p><p>用图表示就是：<br><img src="/images/cdnyuanli.png" alt="akb48"></p><p>8）<font color="blue">举例说下正则表达式和扩展正则表达式例如：url、ip、邮箱的正则表达式？</font></p><p>9）<font color="blue">解释raid0、raid1、raid01、raid10、raid5、raid6，并分析各自读写性能？</font></p><p>10）<font color="blue">radi为什么不搞个raid50、raid15，不能搞是因为有什么冲突还是什么等等?</font></p><h2><span id="拓展阅读">拓展阅读</span></h2><p><a href="https://segmentfault.com/a/1190000007243675" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007243675</a><br><a href="http://mertensming.github.io/2016/10/19/cookie-session/" target="_blank" rel="noopener">http://mertensming.github.io/2016/10/19/cookie-session/</a><br><a href="https://wizardforcel.gitbooks.io/network-basic/content/index.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/network-basic/content/index.html</a><br><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11564.html</a><br><a href="https://coolshell.cn/articles/11609.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11609.html</a><br><a href="http://blog.sina.com.cn/s/blog_93b45b0f0101a4ix.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_93b45b0f0101a4ix.html</a></p>]]></content>
    
    <summary type="html">
    
      大牛之路，如此辛苦
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>实战Kibana的日志关键词搜索和日志可视化</title>
    <link href="http://yoursite.com/2018/01/17/%E5%AE%9E%E6%88%98Kibana%E7%9A%84%E6%97%A5%E5%BF%97%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%E5%92%8C%E6%97%A5%E5%BF%97%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2018/01/17/实战Kibana的日志关键词搜索和日志可视化/</id>
    <published>2018-01-17T07:44:01.000Z</published>
    <updated>2018-01-22T02:32:43.719Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="准备工作">准备工作</span></h2><p>首先，先下载一个elastic网站上下载一个它提供的demo—莎翁的《亨利四世》，下载地址是<a href="https://download.elastic.co/demos/kibana/gettingstarted/shakespeare.json" target="_blank" rel="noopener">https://download.elastic.co/demos/kibana/gettingstarted/shakespeare.json</a> 。</p><p>打开这个json字符串，里面就是《亨利四世》的话剧剧本，长得是这个样子：<br><img src="/images/kibana1.png" alt="akb48"></p><p>可以看到里面有<code>play_name</code>、<code>speaker</code>、<code>speech_number</code>、<code>line_id</code>等等名称，每个名称后面都有一个对应的值。</p><p>然后启动elasticsearch，按照上面的文件格式生成索引。语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http:<span class="comment">//localhost:9200/shakespeare -d '</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"mappings"</span> : &#123;</span><br><span class="line">  <span class="string">"_default_"</span> : &#123;</span><br><span class="line">   <span class="string">"properties"</span> : &#123;</span><br><span class="line">    "speaker" : &#123;"type": "string", "index" : "not_analyzed" &#125;,    #确定type是字符</span><br><span class="line">    <span class="string">"play_name"</span> : &#123;<span class="string">"type"</span>: <span class="string">"string"</span>, <span class="string">"index"</span> : <span class="string">"not_analyzed"</span> &#125;,</span><br><span class="line">    "line_id" : &#123; "type" : "integer" &#125;,    #确定type是数字</span><br><span class="line">    <span class="string">"speech_number"</span> : &#123; <span class="string">"type"</span> : <span class="string">"integer"</span> &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">';</span></span><br></pre></td></tr></table></figure></p><p>导入刚刚下载的那个json：<code>curl -XPOST &#39;localhost:9200/shakespeare/_bulk?pretty&#39; --data-binary @shakespeare.json</code></p><p>具体elasticsearch的增删改查语法可以参看阮大师的<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a> ，个人建议将elasticsearch和mysql对比一下，这样更方便理解。</p><p>然后后台启动kibana，确认5601端口已经stand by，如图：<br><img src="/images/kibana2.png" alt="akb48"></p><p>然后在浏览器地址栏输入<code>服务器外网ip：5601</code>打开kibana。</p><p>导入数据结束之后，使用<code>curl &#39;localhost:9200/_cat/indices?v&#39;</code>，去查看一下效果，如果看到index里有shakespeare那一栏就是导入成功了，如图：<br><img src="/images/kibana3.png" alt="akb48"></p><p>在启动Kibana后，Kibana会自动在配置的es中创建一个名为<code>.kibana</code>的索引（上图第二个），这个索引用来存储数据，注意！不要删除了它。</p><h2><span id="kibana的界面搜索">Kibana的界面搜索</span></h2><p>如果此时的kibana里是第一次配置的话，那么第一步就是配置新索引，我们之前在生成索引的时候写的是<code>shakespeare</code>，那么现在也写<code>shakespeare</code>，然后点击<code>create</code>，如图：<br><img src="/images/kibana4.png" alt="akb48"></p><p>然后在菜单栏左侧的<code>discover</code>里选择刚刚建立的<code>shakespeare</code>，就会看到这样的东西：<br><img src="/images/kibana5.png" alt="akb48"></p><p>在Search上就可以进行搜寻，比如说我搜寻<code>freedom</code>，如图：<br><img src="/images/kibana6.png" alt="akb48"></p><p>如果我搜寻<code>KING HENRY IV</code>，他不分大小写的把所有king、henry、iv都搜索出来。</p><p>如果我想搜寻line_id的第一行到第三行，那么语句就是<code>line_id:[1 TO 3]</code>，如图：<br><img src="/images/kibana17.png" alt="akb48"></p><p>如果想在上面的基础上进一步细化，比如说要在line_id是从第一行到第三行，同时_type是scene的语句：<code>line_id:[1 TO 3] AND _type:scene</code>：<br><img src="/images/kibana18.png" alt="akb48"></p><p>假如不想要scene，那么就把<code>AND</code>改成<code>NOT</code>。</p><p>如果这个时候只想关注一些指定的字段，那么可以将鼠标移动到索引下面的字段上，然后选在add即可，同样的移动上面已经选择的字段选择remove进行移除，比如我们试一下这个<code>speaker</code>：<br><img src="/images/kibana19.png" alt="akb48"></p><p>add之后在点击右侧的具体的speaker，就会看到里面的细节，比如这位westmoreland（威斯摩兰伯爵）：<br><img src="/images/kibana7.png" alt="akb48"></p><p>这个时候就能看见这位伯爵大哥的台词细节，在第几场的第几节，说的是什么台词。再返回菜单左侧点击这个speaker，我们还会看到一个比重：<br><img src="/images/kibana8.png" alt="akb48"></p><p>从这里就很清晰的看到，FALSTAFF（法斯塔夫）这个哥们的台词最多，也符合书里塑造的那个嗜酒话痨的艺术形象。而我们的KING HENRY IV(亨利四世)的台词只是第四位，占比重11%而已…</p><p>这样具体的搭配搜索之后，可以点击界面右上侧的save进行保存搜寻结果，再搭配share分享搜索结果的url网址，如图：<br><img src="/images/kibana9.png" alt="akb48"></p><h2><span id="kibana的图像化展示">Kibana的图像化展示</span></h2><p>Kibana也能做到类似grafana那样的炫酷图象化展示，更加立体的表现日志情况，首先选择左侧菜单栏里的<code>Visualize</code>（可视化）：<br><img src="/images/kibana10.png" alt="akb48"></p><p>然后点击<code>Create a Visualization</code>,里面既有很多种图形供你选择，有饼型，有箭头的，有文字的，有仪表盘的，如图：<br><img src="/images/kibana11.png" alt="akb48"></p><p>我们这里先建立一个饼型的，还是上面那个台词多少的例子，首先选择<code>shakespeare</code>作为数据源，然后点击<code>split slices</code>，如图：<br><img src="/images/kibana12.png" alt="akb48"></p><p>然后在<code>Aggergation</code>里选择<code>Terms</code>，然后在<code>Field</code>里选择<code>Speaker</code>,size那里写8,最后点击上面的那个三角播放键，看看结果：<br><img src="/images/kibana13.png" alt="akb48"></p><p>这就很清晰的看出，亨利四世一共说了1086句话，占比11.11%。</p><p>如果我们再加一个<code>Split Slices</code>，这一次在原有的specker的基础上选择<code>play_name</code>，图象变成了一个同心圆，最外面的一层就是新增的“play_name”的情况，如图显示FALSTAFF的所有台词会在两个play_name里出现：<br><img src="/images/kibana14.png" alt="akb48"></p><p>如果这个盘子里不想统计FALSTAFF这个话包，就添加一个过滤器，选择<code>speaker is not</code>，后面写上FALSTAFF即可，如图：<br><img src="/images/kibana15.png" alt="akb48"></p><p>效仿刚才的方法也可以做一个仪表盘，如图：<br><img src="/images/kibana16.png" alt="akb48"></p><p>可视化的数据也可以save和share，同样在web界面的右上角。保存的数据是可以在左侧菜单栏里的Dashboard里展示，做成一个类似zabbix那样的展示！</p>]]></content>
    
    <summary type="html">
    
      Kibana那个界面做的还是挺好看的
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>工作所用的模块回滚脚本</title>
    <link href="http://yoursite.com/2018/01/17/%E5%B7%A5%E4%BD%9C%E6%89%80%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97%E5%9B%9E%E6%BB%9A%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/01/17/工作所用的模块回滚脚本/</id>
    <published>2018-01-17T04:25:25.000Z</published>
    <updated>2018-01-22T02:31:05.833Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言与脚本内容">前言与脚本内容</span></h2><p>部署中常备一个回滚脚本也是很有必要的，我所在公司的服务器模块名都是在初始化的时候写进<code>/etc/role_install</code>这个文件里，如下图的这个服务器就是fss服务器：<br><img src="/images/rollback1.png" alt="akb48"></p><p>再比如下面这个服务器，虽然包含nginx的组件但是httpproxy的服务器：<br><img src="/images/rollback2.png" alt="akb48"></p><p>那么有了这样的前提，整个回滚的脚本内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#Written by ChrisChan @July-4th-2017</span><br><span class="line">#Desription:这是一个回滚的脚本。</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>=$(cat /etc/role_install |grep -v zkclient|grep -v nginx)</span><br><span class="line">echo -e <span class="string">'\033[31m现在将执行回滚操作，本次回滚只回滚普通模块，不包含nginx和zkclient!\033[0m'</span> </span><br><span class="line">echo <span class="string">"回滚的模块名称："</span>$<span class="built_in">module</span></span><br><span class="line">echo -e <span class="string">'\033[33m如果想取消回滚操作，请ctrl+c立即停止本脚本...\033[0m'</span></span><br><span class="line">sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">cd /dxpbackup/hswx/$module &amp;&amp; zip $module.zip -x "*og*" -r .    #到备份的文件夹里去压缩</span><br><span class="line">mv /dxpbackup/hswx/$<span class="built_in">module</span>/$<span class="built_in">module</span>.zip /mnt/hswx    </span><br><span class="line">echo $<span class="built_in">module</span><span class="string">".zip文件已经生成！"</span></span><br><span class="line"> </span><br><span class="line">until [ <span class="string">"$decision"</span> == <span class="string">"Y"</span> -o <span class="string">"$decision"</span> == <span class="string">"y"</span> -o <span class="string">"$decision"</span> == <span class="string">"N"</span> -o <span class="string">"$decision"</span> == <span class="string">"n"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        read -p <span class="string">"请问是否用回滚的压缩包覆盖到/mnt/hswx下？(y/n)"</span> decision</span><br><span class="line">        echo <span class="string">"您的选择是："</span>$decision</span><br><span class="line">        <span class="keyword">if</span> [ $decision == Y -o $decision == y ]</span><br><span class="line">               then</span><br><span class="line">                       echo <span class="string">"现在已经开始覆盖..."</span></span><br><span class="line">                       rm -rf /mnt/hswx/$module    #先把原来的内容删除</span><br><span class="line">                       unzip /mnt/hswx/$module.zip -d /mnt/hswx/$module    #重新解压缩进去</span><br><span class="line">                       echo -e <span class="string">'\033[32m覆盖已经完成，可以直接执行/startall脚本!\033[0m'</span></span><br><span class="line">       elif [ $decision == N -o $decision == n ]</span><br><span class="line">               then</span><br><span class="line">                       echo -e <span class="string">'\033[32m生成的'</span>$<span class="built_in">module</span><span class="string">'.zip文件保存在/root文件夹里\033[0m'</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">               echo -e <span class="string">'\033[31m输入字符不符合!请重新输入!\033[0m'</span></span><br><span class="line">       fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2><span id="新的知识点">新的知识点！</span></h2><p>1）zip在压缩文件夹的时候要过滤掉某些文件使用“-x”参数，比如说要在AAA文件夹里面过滤掉abc和jqk这两个文件，那么语句就是<code>zip AAA.zip -x &quot;abc&quot; -x &quot;jqk&quot; -r .</code>或者是<code>zip -r -x=abc -x=jqk AAA.zip .</code> 这样两个语句。</p><p>如果你要过滤掉的是一个文件夹，比如那么就要在文件夹后面名字加上一个<em>，下图就是要压缩整个auc文件夹为456.zip但是又不想要lib这个文件夹，就使用了`zip 456.zip -x “lib</em>“ -r .`：<br><img src="/images/rollback3.png" alt="akb48"></p><p>不过如果文件夹里还有其他lib开头的文件夹也会被过滤掉，这一点要注意。</p><p>2）本shell里面涉及了逻辑判断，而<code>[[</code>和<code>[</code>的区别如下图：<br><img src="/images/rollback4.gif" alt="akb48"></p><p>3）如果if语句中出现报错“[: too many arguments”，很有可能就是字符串变量中可能存在空格，shell解析时将其认为是多个参数，再进行判断时，无法知道该获取哪个值，所以最好都用双引号括起来； </p><p>4）如果是“变量a等于aa且变量b等于bb  或者 变量c等于cc且变量d等于dd ” 这样的判断句怎么写？答曰：<br>    [ $a = “aa” -a $b = “bb” ] || [$c = “cc” -a $d = “dd” ]</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://zhangge.net/4776.html" target="_blank" rel="noopener">https://zhangge.net/4776.html</a></p>]]></content>
    
    <summary type="html">
    
      俗话说的好：“真男人从来不回滚”!
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ansible的几个基本语句</title>
    <link href="http://yoursite.com/2018/01/17/Ansible%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/01/17/Ansible的几个基本语句/</id>
    <published>2018-01-17T03:43:52.000Z</published>
    <updated>2018-01-22T02:27:27.780Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="开篇的废话">开篇的废话</span></h2><p>批处理工具我最早接触的是pssh，因为它实在很简单粗暴，但是它由于太简单粗暴了，应付十台二十台机器还OK，应付五十台一百台服务器就心有余力不足了（而且xshell右键有一个“发送键入到所有会话”的功能，与pssh效果几乎一样），而且我还不太喜欢puppet，总觉得那玩意跟我八字不合，于是乎，在新头头的推荐下，我把目光放在了Ansible。</p><p>Ansible的安装很简单，在Redhat环境下直接<code>yum install -y ansible</code>就行。Redhat已经将Ansible公司收购了，所以在安装上提供了不小的便利。</p><p>Ansible在安装完毕之后，会在<code>/etc/ansible/</code>目录下看见一个叫hosts的文件，这里是所有你要控制的服务器的ip们，可以排列写，比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.133</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.144</span></span><br></pre></td></tr></table></figure></p><p>也可以分组写，比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[aliyun]</span><br><span class="line"><span class="number">10.22</span><span class="number">.33</span><span class="number">.44</span></span><br><span class="line"><span class="number">10.22</span><span class="number">.33</span><span class="number">.45</span></span><br><span class="line">[jinshanyun]</span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.66</span></span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.67</span></span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.68</span>:<span class="number">2222</span>  （这个不是使用ssh默认的<span class="number">22</span>端口，就需要特别指出）</span><br></pre></td></tr></table></figure></p><p>默认情况下，Ansible会把命令全用于这个hosts文件，比如<br>    ansible all -m ping  -u ashin<br>这句话意思是整个hosts里的机器以ashin账户启动，而且都要ping 一下当前本机。</p><h2><span id="具体语句">具体语句</span></h2><p>怎么连接主机与要控制的远程机器请按之前写的“<a href="http://chenx1242.blog.51cto.com/10430133/1763978”一文进行操作，这里先说几个命令语句：" target="_blank" rel="noopener">http://chenx1242.blog.51cto.com/10430133/1763978”一文进行操作，这里先说几个命令语句：</a></p><p>1)<code>ansible all -m shell -a &quot;/bin/echo hello&quot;</code><br>对hosts里所有的机器一起使用”输出hello这个文字”。-m shell可以忽略不写，但是不是shell而是其他的模块就要写出来；</p><p>2)<code>ansible aliyun -m copy -a &quot;src=~/projects/tests/t.py dest=~&quot;</code><br>把hosts里aliyun组的机器的/projects/tests/t.py复制到~目录下；<br>[注意！]copy模块不支持变量路径，也就是说如果目标服务器的部署路径不同，copy不会很智能的去访问.bash_profile来得到用户的自定义变量，写变量替换路径是不会达到目的的。</p><p>3)<code>ansible jinshanyun[0:9] -i -m file -a &quot;dest=~/tests state=absent&quot;</code><br>把hosts里jinshanyun组中从0~9这十台机器的/tests文件夹删除掉，absent是“缺席，不在”的意思；</p><p>4)<code>ansible 192.168.1.133 -m ping</code><br>这句话=<code>ping 192.168.1.133</code>；</p><p>5)<code>ansible v1 -m service -a &quot;name=mysql state=started&quot; -u ashin --sudo -K</code><br>以用户名为ashin登陆hosts里所有v1组的机器，然后检查mysql是否是started状态，若不是就start，同时要输入root的密码作为确认；</p><p>6)<code>ansible 10.11.22.* -m user -a &quot;name=foo password=foo&quot; --sudo -K</code><br>hosts文件里所有10.11.22开头的机器，都要添加一个新的用户名foo，同时密码是foo，并且输入root密码确认身份；</p><p>7)<code>ansible v1:!v2 -m apt -a &quot;name=git state=latest&quot;</code><br>检查所有属于v1组同时还不属于v2组的机器里的git文件是否是最新版本；</p><p>8)<code>ansible webservers:&amp;dbservers -a &quot;/sbin/reboot&quot; -f 10 --sudo -K</code><br>重新启动既是webservers组又是dbservers组的所有机器；</p><p>9)<code>ansible webservers -m raw -a &#39;yum -y install python-simplejson&#39;</code><br>用ansible去链接低版本的centos时，就乎出现“ansible requires a json module, none found! ”的错误，需要远程机安装samplejson包。raw模块是靠底层ssh的通讯，不依靠python的模块，所以如果碰到低版本的系统，如果command和shell模块无法使用，可以先用这条命令安装完需要的包。</p><p>10)<code>ansible all -m synchronize -a &quot;src=/chenshuo/1.sh dest=/chenshuo delete=yes&quot;</code><br>synchronize原意是“同步”，而这个模块是分发模块，这句话的意思是把控制端的/chenshuo/1.sh分发给host文件里的所有ip服务器，delete=yes意思是以控制端服务器的文件为准。</p><p>11)<code>ansible 10.168.194.89 -m synchronize -a &quot;mode=pull src=/chenshuo/nba.txt dest=/chenshuo/a.txt&quot;</code><br>将10.168.194.89这台服务器上的/chenshuo/nba.txt拉到控制服务器的/chenshuo文件夹下，顺便改名叫a.txt。</p><p>12)<code>ansible all -m get_url -a &quot;url=https://pypi.python.org/packages/56/2b/9c9c113fb88082950067a42cc99e3c61f1df72035f89bb0bdf0a60308ca0/pexpect-4.1.0.tar.gz#md5=562a1a21f2a60b36dfd5d906dbf0943e dest=/chenshuo&quot;</code><br>把那一大串网址的下载连接下载到host文件里的所有ip的/chenshuo文件夹下。</p><p>13)<code>ansible 10.117.14.37 -m script -a &quot;/chenshuo/free.sh&quot;</code><br>在10.117.14.37上执行操作端的free.sh，注意操作端必须要有free.sh这个脚本，而10.117.14.37这台机器上并不一定要有。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.csdn.net/iloveyin/article/details/46982023" target="_blank" rel="noopener">http://blog.csdn.net/iloveyin/article/details/46982023</a></p>]]></content>
    
    <summary type="html">
    
      Ansible的基础用法
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Ansible" scheme="http://yoursite.com/tags/Ansible/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
