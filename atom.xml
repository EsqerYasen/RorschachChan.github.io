<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-09T09:24:26.734Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次配置rewrite和return的经历</title>
    <link href="http://yoursite.com/2018/01/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AErewrite%E5%92%8Creturn%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2018/01/09/记一次配置rewrite和return的经历/</id>
    <published>2018-01-09T08:39:10.000Z</published>
    <updated>2018-01-09T09:24:26.734Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言与需求">前言与需求</span></h2><p>自动电商平台归属了大数据研究院之后，我又恢复了那个“把nginx当成爸爸”的日子。开发不断地提出了的要求，我一样一样的疲命应付，并且在应付后记录下来，就怕以后再遇到类似的问题。</p><p>这次的需求是一个跳转，满足某个条件之后把<code>“http://dvlshop.lechange.com/index.php/wap/?client_id=lc_mall_m&amp;redirect_uri=https%3A%2F%2Fdvlshop.lechange.com%2Fopenapi%2Ftrustlogin_api%2Fparse%2Fwap_trustlogin_lecheng%2Fcallback&amp;response_type=code&amp;scope=read&amp;state=http%3A%2F%2Fdvlshop.lechange.com%2Findex.php%2Fwap&amp;user=token%2Flcid_9f9lmo2u6i7hkl6t6eaodn2blmg5jbsg&amp;expire=1514191636&amp;nonce=cdizHO6uvSx5JK79Kmtz5RBpSi0ROhpF&amp;signature=VeCceYCWDE6BZjIdni/68YCmhqc=%27 ”</code><br>改成<br><code>“http://dvlshop.lechange.com/index.php/wap/?client_id=lc_mall_m&amp;redirect_uri=https%3A%2F%2Fdvlshop.lechange.com%2Fopenapi%2Ftrustlogin_api%2Fparse%2Fwap_trustlogin_lecheng%2Fcallback&amp;=code&amp;scope=read&amp;state=http%3A%2F%2Fdvlshop.lechange.com%2Findex.php%2Fwap&amp;user=token%2Flcid_9f9lmo2u6i7hkl6t6eaodn2blmg5jbsg&amp;expire=1514191636&amp;nonce=cdizHO6uvSx5JK79Kmtz5RBpSi0ROhpF&amp;signature=VeCceYCWDE6BZjIdni/68YCmhqc=%27”</code></p><p>具体条件是: </p><ol><li>先判断是否有source_type=lc_app；</li><li>再判断是否有response_type；</li><li>去过两个都满足，将“response_type”改成“+auto+”；</li></ol><p>各位看官，我理解你们此时不想继续看下去的心情，其实我当初看着那么一大坨心里也直犯闹，但是没办法，“食君之禄，分君之忧”，我只能耐着性子一个一个的拆开，还别说，拆开的话就清晰许多了，如下：<br><a href="http://dvlshop.lechange.com/index.php/wap/?" target="_blank" rel="noopener">http://dvlshop.lechange.com/index.php/wap/?</a><br><em>client_id</em>=lc_mall_m&amp;<br><em>redirect_uri</em>=https%3A%2F%2Fdvlshop.lechange.com%2Fopenapi%2Ftrustlogin_api%2Fparse%2Fwap_trustlogin_lecheng%2Fcallback&amp;<br><em>response_type</em>=code&amp;    <code>#满足条件的话把这个改成+auto+</code><br><em>scope</em>=read&amp;<br><em>state</em>=http%3A%2F%2Fdvlshop.lechange.com%2Findex.php%2Fwap&amp;<br><em>user</em>=token%2Flcid_9f9lmo2u6i7hkl6t6eaodn2blmg5jbsg&amp;<br><em>expire</em>=1514191636&amp;<br><em>nonce</em>=cdizHO6uvSx5JK79Kmtz5RBpSi0ROhpF&amp;signature=VeCceYCWDE6BZjIdni/68YCmhqc=%27 </p><h2><span id="开始操作">开始操作</span></h2><p>针对这次需求我的计划是这样的：把原地址看成”$1+ response_type +$2”这样的一个样式，确定$1和$2，然后rewrite成”$1+ +auto+ +$2”不就搞定了么？ 于是乎我就凭着我那二把刀的nginx技术开始动手。折腾了大约半个小时，拿出来这样一个配置：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.php.*</span><br><span class="line">   &#123;</span><br><span class="line">       include php_fcgi.conf;</span><br><span class="line">       include pathinfo.conf;</span><br><span class="line">       set $flag <span class="string">"0"</span>;</span><br><span class="line">       <span class="keyword">if</span> ( $request_uri ~ <span class="string">"source_type=lc_app"</span> ) &#123;</span><br><span class="line">          set $flag  <span class="string">"1"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> ( $request_uri ~ <span class="string">"(.*)response_type(.*)"</span> )&#123;</span><br><span class="line">          set $Flag  <span class="string">"$flag$flag"</span>;</span><br><span class="line">          set $id $<span class="number">1</span>;</span><br><span class="line">          set $query $<span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       if ($Flag = "11")&#123;#注意这个地方是11</span><br><span class="line">           set $flag <span class="string">"0"</span>;</span><br><span class="line">          rewrite ^.*$ http:<span class="comment">//dvlshop.lechange.com/index.php/wap/$id$query last;#前面那一段是写死的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>但是很不幸，<em>nginx -s reload</em>之后的结果是“$1+$2+$1+ response_type +$2”的格式（地址太长太恶心了，我就不写了）。</p><p>然后在arstercz大神的指点下，把那句rewrite改成了<code>return 301 http://dvlshop.lechange.com/index.php/wap/?$id$query;</code>。就达到了效果。</p><h2><span id="原因确定">原因确定</span></h2><p>后来追寻原因，原来是： <strong>rewrite后面接的$uri不需要$args，因为$args会被自动带过来。而return的则会丢失$args，需要手动补上$args。</strong>而我上面的$1,$2恰巧就是$args，所以用rewrite的话就会重复。举个例子，比如请求「<a href="http://localhost/?a=1」想被" target="_blank" rel="noopener">http://localhost/?a=1」想被</a> 301 到「<a href="https://localhost/?a=1?a=1」，要么" target="_blank" rel="noopener">https://localhost/?a=1?a=1」，要么</a><br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    rewrite / https:<span class="comment">//$host$uri permanent;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要么就<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https:<span class="comment">//$host$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="补充说明">补充说明</span></h2><p>PS，这里补充一下uri、request_uri、document_uri之间的区别：</p><ul><li>$request_uri: /stat.php?id=1585378&amp;web_id=1585378</li><li>$uri: /stat.php    (不带？后面)</li><li>$document_uri: /stat.php    （与uri完全相同）</li></ul><p><img src="/images/hugguangmei.gif" alt="抱光妹" title="《四重奏》"></p>]]></content>
    
    <summary type="html">
    
      比较一下return跟rewrite的不同。
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师面试题第一套</title>
    <link href="http://yoursite.com/2018/01/04/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A5%97/"/>
    <id>http://yoursite.com/2018/01/04/Linux运维工程师面试题第一套/</id>
    <published>2018-01-04T08:46:41.000Z</published>
    <updated>2018-01-09T08:38:19.625Z</updated>
    
    <content type="html"><![CDATA[<p>这套题的出处是<a href="http://blog.51cto.com/nolinux/1670406，看到了闲着没事周末就做一做，答案都是我自己在工作里得到的，不一定百分百准确，只是无聊的时候做做，现在拿出来跟各位分享一番。" target="_blank" rel="noopener">http://blog.51cto.com/nolinux/1670406，看到了闲着没事周末就做一做，答案都是我自己在工作里得到的，不一定百分百准确，只是无聊的时候做做，现在拿出来跟各位分享一番。</a></p><p><strong>1、请写出五种系统性能分析工具，并简述其作用和特点</strong><br>[我的答案] top、free、vmstat、iostat、perf等等等等，如果你想装逼，可以回答fio,blktrace，oprofile。<br>具体的作用和特点这里不多说了，但是我着重要推荐vmstat，很实用很棒的一个命令。</p><p><strong>2、请写出web服务器的调优要点</strong><br>[我的答案]以nginx为例，个人总结有如下几个要点：<br>1）尽可能的少用http，因为http是有开销的；<br>2）尽可能的使用CDN；<br>3）添加Expire/Cache-Control头，这个头是缓存用的，可以缓存图片和flash那样不轻易更改的文件，减少访问时间；<br>4）启动gzip压缩，这个没啥好说的了；<br>5）尽可能少的重定向，能rewrite就不要return，我也知道return比rewrite好写，但是重定向是需要时间的，增加一次重定向就会多一次web需求；<br>6）如果可以，把ajax也做缓存；<br>7）减少dns查询，很多网页会有外站的广告，这些广告也是会启动dns查询的，所以如果不缺钱，减少这种广告；<br>8）调好服务器里的TCP协议栈，这个无论是web服务器还是应用服务器都是必须的；</p><p><strong>3、请写出你知道或使用过的nginx扩展模块（注意标注知道和使用）</strong><br>[我的答案] 随便说几个，这玩意到时候结合工作过的情况说说吧：<br>Nginx负载均衡模块：nginx-upstream-fair<br>非阻塞访问redis模块：redis2-nginx-module<br>分布式图片实时动态压缩：ngx-fastdfs</p><p><strong>4、请简述你了解的自动化配置管理工具特点和运行原理</strong><br>[我的答案]我用的最多的就是ansible和saltstack，这俩都是python的，对于我这个半路出家的更亲切。<br>ansible基于SSH协议传输数据，不用装agent，配置比较简单，对windows支持惨不忍睹；<br>saltstack使用消息队列zeroMQ传输数据，如果1000台以上的话它速度比ansible还要快,要安装agent，对windows支持同样惨不忍睹；</p><p><strong>5、目前，有一个文件，内容如下：<br>         172.16.100.1<br>         172.16.100.2<br>         172.16.100.3<br>         172.16.100.4<br>   请使用while和ssh命令，登录文件内的ip并执行hostname命令</strong><br>[我的答案]这个我还真没有什么思路，不过应该是跟“&lt;”输入重定向命令结合的一个脚本吧。<br>PS,为啥不用ansible…哪怕pssh也可以啊！</p><p><strong>6、请使用awk命令将如下两份文件中名字相同的两行合并起来<br>   A文件：<br>          大广州 21岁<br>          广州大 23岁<br>          州广大 22岁<br>          广州大 24岁<br>   B文件：<br>          广州大 男<br>         大广州 男<br>          州广大 男<br>          广州大 男<br>输出效果：<br>    <code>大广州 21岁 男</code></strong><br>[我的答案]awk ‘NR==FNR{a[$1]=$2}NR&gt;FNR{print $0,a[$1]}’  第2个文件名 第1个文件名<br><img src="/images/awkpinjie.png" alt="awk拼接" title="awk拼接的效果"><br>PS，做完这道题，我已经不认识“广”“州”这两个字了…</p><p><strong>7、请使用绘图的方式简述TCP/IP三次握手和四次断开的交互过程</strong><br>[我的答案]这种图满大街都是了，我这个灵魂画师在这里就不污染各位的眼睛，不过这里推荐各位去看一篇文章：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NzA1MTcyMA==&amp;mid=2651160450&amp;idx=2&amp;sn=1128438fa5287b6cee503880698642b2&amp;scene=21" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5NzA1MTcyMA==&amp;mid=2651160450&amp;idx=2&amp;sn=1128438fa5287b6cee503880698642b2&amp;scene=21</a> 对原理讲的浅显易懂。<br>多说一句，网易招聘java的时候也问这个问题，不过他们问的是“为什么要三次握手？”</p><p><strong>8、请根据你的理解，简述高可用服务体系的相关组件，并列举该组件的具体实现服务名字</strong><br>[我的答案] 我觉得这个题是要问一些架构上的东西，以我工作环境为例：<br>统一配置:zookeeper、Consul、Etcd+Confd(这俩比较常见于动态管理nginx)<br>前端展示:nginx<br>消息队列:activemq、kafka<br>读写分离中间件:atlas<br>日志分析:elk</p><p><strong>9、请根据你的理解，简述负载均衡的实现方式</strong><br>[我的答案]负载均衡主要分为两种，硬件（F5）和软件（NGINX、Haproxy、LVS），硬件效果比较牛逼，它是把<strong>4-7层的负载均衡功能做到一个硬件里面</strong>，但是价格昂贵最近用的越来越少了。<br>软件的负载均衡又分两种，四层和七层：四层是<strong>在IP/TCP协议栈上把网络包的IP地址和端口进行修改</strong>，达到转发的目的；七层就是<strong>在应用层里把HTTP请求、URL等具体的应用数据发送到具体的服务器上</strong>。四层的效率比七层的高，四层一般安排在架构的前端，七层一般就是在具体服务器的前端。<br>软件负载均衡比较常见的几个分配方式如下：<br>轮询：访问请求依序分发给后端服务器；<br>加权轮询：访问请求依序分发后端服务器，服务器权重越高被分发的几率也越大；<br>最小连接数： 将访问请求分发给当前连接数最小的一台后端服务器，服务器权重越高被分发的几率也越大；</p><p><strong>10、请根据你的理解，简述数据迁移工具和数据存储服务有哪些以及相关特点</strong><br>[我的答案]由于我公司主要都放在了阿里云，数据库用过的就这么几个:mysql、redis和elasticsearch。对于Storm和Hadoop这俩我还是初学者。<br>mysql:关系型数据库<br>elasticsearch:全文检索框架，这玩意逐渐向一个数据库靠拢了<br>redis:键值储存数据库</p><p>mysql的数据迁移最常见的就是mysqldump，但是要注意使用不当会锁表，<br>redis的数据迁移最稳妥的方法就是主从同步：在slave端启动redis，然后执行<code>slaveof master机器IP地址 6379</code>，然后使用<code>info</code>的时候查看<code>master_link_status</code>如果是<code>up</code>那就是OK了，再执行<code>slaveof no one</code>,提示OK就是OK了；<br>Elasticsearch的数据迁移工具就是Elasticsearch-Exporter，不过我对它仅仅只是了解，用的并不多； </p><p><strong>总结</strong><br>这套题不算难，方向是偏应用的，但是对云端服务的运维来说不算很友好，因为云厂商基本都把数据备份和数据迁移都做成自己的工具（比如阿里云的DTS），所以很多云服务的运维对这种东西了解不多。</p><p><img src="/images/welcomekuniao.jpg" alt="欢迎新人" title="欢迎来到巴塞罗那！库迪尼奥"></p>]]></content>
    
    <summary type="html">
    
      把基础知识重新看起来
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx动态编译新的模块</title>
    <link href="http://yoursite.com/2018/01/03/Nginx%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%E6%96%B0%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/01/03/Nginx动态编译新的模块/</id>
    <published>2018-01-03T13:44:44.000Z</published>
    <updated>2018-01-04T04:50:19.075Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="开始动手">开始动手</span></h2><p>打算给电脑上的nginx添加一个当时没有编译安装的echo-nginx-module模块，这是一个第三方模块，要知道nginx要添加模块是需要重新编译的，这一点跟apache不同，apache是在配置文件里引用.so文件的。</p><p>首先先<code>nginx -V</code>，查看一下nginx已经编译的模块都有啥，如图：<br><img src="/images/nginxV.png" alt="akb48" title="nginx模块一览"></p><p>于是我就<code>git clone https://github.com/openresty/echo-nginx-module</code>，但是发现竟然告诉我“git: command not found”。oh shit，原来这台nginx实验机器压根就没有装过git啊！而yum源里的软件基本上已经过时的太久了，就拿git来说吧，使用<code>yum info git</code>看到的版本是1.8.3.1。但是在<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a> 里可以看到，git的版本现在已经丧心病狂的到达了2.16的版本了。<br><img src="/images/yuminfogit.png" alt="akb48" title="git版本太落后"></p><h2><span id="那么我们先安装git">那么我们先安装git!</span></h2><p>通过<code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code>和<code>yum install  gcc perl-ExtUtils-MakeMaker</code>来安装依赖库。<code>wget https://github.com/git/git/archive/v2.16.0-rc0.tar.gz</code>来下载2.16的git保存到centos里。<code>tar -xzvf v2.9.2.tar.gz -C /目标目录/</code>，然后在目标目录里面执行<code>make prefix=/usr/local/git all</code>和<code>make prefix=/usr/local/git install</code>，编译过程可能会比较长，请耐心等待。</p><p>编译结束之后，<code>echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</code>，把git添加到环境变量，再<code>source /etc/bashrc</code>让它实时生效，最后再一次看看<code>git --version</code>，大功告成！<br><img src="/images/gitversion.png" alt="akb48" title="展现git版本"></p><h2><span id="编译新模块">编译新模块</span></h2><p>git搞定了之后，重新<code>git clone https://github.com/openresty/echo-nginx-module</code>，然后在nginx的configure文件夹里面，把echo-nginx-module模块添加上。命令如下：</p><p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/root/pcre-8.41 --with-http_v2_module --add-module=/root/echo-nginx-module-0.61</code>,我这里还附赠了一个“http_v2_module”。</p><p>configure完毕之后，去<code>make</code>一下就可以了，不要轻易<code>make install</code>，不然就是重新安装了。原来的nginx.conf等配置都没了。</p><p>养成替换nginx二进制文件的好习惯，如下：</p><pre><code>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bakcp nginx编译目录/objs/nginx /usr/local/nginx/sbin/</code></pre><p>然后再打开看一下<code>nginx -V</code><br><img src="/images/nginxV2.png" alt="akb48" title="安装模块成功"></p>]]></content>
    
    <summary type="html">
    
      你的nginx总不能一辈子都不变的吧
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>从vmstat命令里看服务器瓶颈</title>
    <link href="http://yoursite.com/2018/01/03/%E4%BB%8Evmstat%E5%91%BD%E4%BB%A4%E9%87%8C%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%93%B6%E9%A2%88/"/>
    <id>http://yoursite.com/2018/01/03/从vmstat命令里看服务器瓶颈/</id>
    <published>2018-01-03T12:56:56.000Z</published>
    <updated>2018-01-08T14:24:31.445Z</updated>
    
    <content type="html"><![CDATA[<p>这几天重新翻看基础知识，看到了<code>vmstat</code>，我认为它是一个非常优秀的命令,因为它包括了<code>top</code>和<code>free</code>，甚至还包含了一些io的信息，可以说是运维人员常备命令之一。常用方法：<code>vmstat (-a) 多少秒刷一次 刷多少次</code>。</p><p><img src="/images/vmstat.png" alt="vmstat" title="vmstat的效果"></p><p>对上面这个图来一个简单的解释：</p><p>r: 运行队列中进程数量，这个值长期大于1就要判断是否需要增加CPU。<br>b: 等待IO的进程数量</p><p>swpd: 使用虚拟内存大小(如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能）<br>free: 空闲物理内存大小<br>buff: 用作缓冲的内存大小<br>cache: 用作缓存的内存大小(如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小)<br>inact: 非活跃内存大小（当使用-a选项时显示）<br>active: 活跃的内存大小（当使用-a选项时显示）</p><p>si: 每秒从交换区写到内存的大小，由磁盘调入内存<br>so: 每秒写入交换区的内存大小，由内存调入磁盘<br>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p><p>bi: 每秒读取的块数<br>bo: 每秒写入的块数<br>注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。</p><p>in: 每秒中断数，包括时钟中断。<br>cs: 每秒上下文切换数。<br>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p><p>us: 用户进程执行时间百分比(user time)<br>注意： us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p><p>sy: 内核系统进程执行时间百分比(system time)<br>注意：sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p><p>wa: IO等待时间百分比<br>注意：wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</p><p>id: 空闲时间百分比</p><p>最后总结：如果r经常大于4 ，且id经常少于40，表示cpu的负荷很重。如果bi，bo长期不等于0，表示内存不足。</p><p>r（运行队列）展示了正在执行和等待CPU资源的任务个数。当这个值超过了CPU数目，就会出现CPU瓶颈了。 CPU 100%并不能说明什么，Linux总是试图要CPU尽可能的繁忙，使得任务的吞吐量最大化。唯一能够确定CPU瓶颈的还是r（运行队列）的值。</p>]]></content>
    
    <summary type="html">
    
      使用vmstat查看服务器情况
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>关于阿里云CDN的两个故障解决</title>
    <link href="http://yoursite.com/2017/12/28/CDN%E7%BD%91%E7%AB%99%E4%B8%80%E6%AC%A1%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/28/CDN网站一次打不开的问题/</id>
    <published>2017-12-28T09:34:57.000Z</published>
    <updated>2018-01-09T06:13:19.193Z</updated>
    
    <content type="html"><![CDATA[<p>测试中心今天在测试时候发现了一个问题：官方的A网站做了域名跳转，跳转到阿里云CDN，但是在浏览器里输入A地址栏的时候，发现域名的确变成了CDN的域名，但是页面是403。</p><p>如图：<br><img src="/images/cdn403.png" alt="跳转CDN出现403" title="跳转CDN出现403"></p><p>但是奇怪的是，再在浏览器点击一下回车，网页就神奇的打开了。</p><p>这个原因就是阿里云的CDN有一个“Refer防盗链”，需要在防盗链里面把A域名添加到白名单，这样的话就可以直接访问了。至于为什么第二次回车就可以访问，是因为那时候域名已经成CDN自己的域名了，当然可以访问。<br><img src="/images/referer.png" alt="refer防盗链配置" title="在这里添加防盗链的白名单"></p><p>但是这个防盗链也要注意！毕竟白/黑名单添加都是一个危险举动，一定三思后行。有可能你的css\js是用cdn加速的，一旦加上了白名单，可能css就会变得很难看。</p><p>不就之后，商城也下来一个需求，说公司有两个多年不用的域名B和C，打算废物利用，两个都要达到直接“跳转官网”的目的。</p><p>于是我就到阿里云域名管理的那里搜索一下，发现目前官网域名后端绑定的是一个CDN，于是也把域名B和域名C做一个CNAME到这个域名，不过登陆浏览器发现域名B和域名C都反馈502。</p><p>于是我就到电子商城后端的nginx.conf里查看，确认server_name字段没有写错，然后把域名B和域名C的CNAME直接改成了CDN的域名，再通过了dig确认。但是等于浏览器还是发现502。</p><p>最后找了阿里云的人了解，原来阿里云规定“一个CDN只能绑定一个域名，因为节点上没有那两个域名的配置，所以只要不符合节点上有配置文件信息的，全部502”。所以B和C是无法访问的。要解决这个问题有两招，1）把域名B和域名C直接A记录绑定CDN后面的SLB上，但是代价就是访问速度不如CDN快；2）重新购买两个CDN，都绑定SLB，然后把这两个CDN分别绑定到域名B和域名C上，代价是多收一点流量费…</p><p><img src="/images/messi.jpg" alt="梅西在国家德比进球" title="在伯纳乌进球感觉真好！"></p>]]></content>
    
    <summary type="html">
    
      为啥有些网站必须要点两次才能打开？
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CDN" scheme="http://yoursite.com/tags/CDN/"/>
    
      <category term="网站技术" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>screen的用法</title>
    <link href="http://yoursite.com/2017/12/21/screen%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/21/screen的用法/</id>
    <published>2017-12-21T07:59:44.000Z</published>
    <updated>2018-01-04T03:35:41.357Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候在Linux要后台执行程序，都是使用“&amp;”，或者是nohup，不过这两个更多应用于临时的脚本。一个比较高科技的方法就是使用<code>screen</code>。</p><p>安装screen的方法很简单：<code>yum install -y screen</code>。</p><p>如果新建一个screen，就输入<code>screen -S name</code>，这样会新开一个窗口，然后执行命令。比如我要启动django，那么就输入<code>python manage.py runserver 0.0.0.0:9000</code>即可。</p><p>这个重开一个窗口，列出所有screen进程，就这样：</p><pre><code>[root@docker ~]# screen -lsThere are screens on:    3029.xiedi    (Attached)</code></pre><p>如果想链接上之前那个django，执行命令<code>screen -r 3029</code>即可。</p><p><img src="/images/kobe.png" alt="goodbye,Kobe" title="kobe vs durant"></p>]]></content>
    
    <summary type="html">
    
      如果你想在后台执行程序...
    
    </summary>
    
      <category term="用来讨饭吃的技术" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E8%AE%A8%E9%A5%AD%E5%90%83%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="其他软件" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>pictest</title>
    <link href="http://yoursite.com/2017/12/13/pictest/"/>
    <id>http://yoursite.com/2017/12/13/pictest/</id>
    <published>2017-12-13T13:40:06.000Z</published>
    <updated>2018-01-03T07:06:26.282Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个我用来测试图片上传的文章<br><a id="more"></a></p><p>啊！五环，你比四环多一环！<br>啊！五环，你比六环少一环！<br><img src="/images/1.gif" alt="akb48" title="天气妹儿"><br>终于有一天，你会修到七环</p><p><img src="/images/paradin.jpg" alt="paradin" title="SQ"></p>]]></content>
    
    <summary type="html">
    
      这是一个我用来测试图片上传的文章
    
    </summary>
    
      <category term="用来保护视力的图片" scheme="http://yoursite.com/categories/%E7%94%A8%E6%9D%A5%E4%BF%9D%E6%8A%A4%E8%A7%86%E5%8A%9B%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="美女" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%A5%B3/"/>
    
      <category term="图片" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>这里记录的不只有代码，还有生活和思想！</title>
    <link href="http://yoursite.com/2017/12/13/%E8%BF%99%E9%87%8C%E8%AE%B0%E5%BD%95%E7%9A%84%E4%B8%8D%E5%8F%AA%E6%9C%89%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BF%98%E6%9C%89%E7%94%9F%E6%B4%BB%E5%92%8C%E6%80%9D%E6%83%B3%EF%BC%81/"/>
    <id>http://yoursite.com/2017/12/13/这里记录的不只有代码，还有生活和思想！/</id>
    <published>2017-12-13T06:17:22.000Z</published>
    <updated>2018-01-05T07:42:48.046Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/石锤淡啤酒.png" alt="beer" title="那些在阳光下挥洒青春的日子啊！"></p><p>你说要一个人去旅行　但是归期却没有约定　亚得里亚海边风中的吉他声<br>你说你带着苍白的回忆　却谢谢能与我相逢　我怕你在异乡夜里孤独醒来<br>要拒绝两人单调的生活　想寻找自由　迷信了爱情　就迷失了我自己<br>你就这样　离开吧　抛弃吧　他乡的旅人<br>你就那样　离开吧　抛弃吧　一个人生活</p><p>你说要一个人去旅行　眼里藏着一朵乌云　知道你藏不住秘密　天空就会飘着雨<br>你说你带着一本日记　却不想再拥有回忆　我怕你在异乡孤独的醒来<br>要拒绝两人单调的生活　不想再随波逐流　迷信了孤独　就软弱的抛弃了我的等待</p><p>你就这样　离开吧　抛弃吧　他乡的旅人<br>你就那样　离开吧　抛弃吧　让我孤独生活</p><p>你就这样　离开吧　抛弃我　孤独的旅人<br>你就这样　离开我　抛弃我　让我孤独生活</p><p>我想要一个人去旅行　但愿归期会有约定　每个人都在问我　是否可以找到自由的你<br>亚得里亚海边他乡的人和风中的吉他声　我怕你一个人在异乡孤独醒来<br>我会带着你回来</p>]]></content>
    
    <summary type="html">
    
      先用陈升先生的一首《一个人去旅行》做我这个博客的开场白
    
    </summary>
    
      <category term="音乐" scheme="http://yoursite.com/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
