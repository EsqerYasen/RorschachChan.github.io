<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-23T12:43:25.807Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决html里单引号转义的问题</title>
    <link href="http://yoursite.com/2019/01/23/%E8%A7%A3%E5%86%B3html%E9%87%8C%E5%8D%95%E5%BC%95%E5%8F%B7%E8%BD%AC%E4%B9%89%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/23/解决html里单引号转义的问题/</id>
    <published>2019-01-23T08:45:08.000Z</published>
    <updated>2019-01-23T12:43:25.807Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="正文">正文</span></h2><p>在使用django展现页面的时候，会出现这样的一个需求：</p><p>我们在<code>views.py</code>里获取到的一个数组，比如叫name，内容是：<code>[&#39;james&#39;,&#39;wade&#39;,&#39;bosh&#39;,&#39;yaoming&#39;]</code>，然后<code>return render_to_response(&#39;a.html&#39;,{&#39;names&#39;:name,})</code>，让<code>a.html</code>可以使用到这个name数组。然后在<code>a.html</code>里需要对这个name数组进行for循环展示，正常思路的话，js如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">var name="&#123;&#123;names&#125;&#125;".split(",")</span><br><span class="line">alert(name)</span><br><span class="line">然后进行for循环，略过不表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么得到的会是如下效果：<br><img src="/images/django43.png" alt="akb48"></p><p>可见虽然name在<code>views.py</code>里是list，但是传入到html是一个字符串，对于字符串使用split按照逗号分隔。而html里会把单引号转义成了<code>&amp;#39;</code>，而<code>&amp;#39;</code>这个玩意儿比较恶心，它不能被<code>JSON.parse</code>加工成一个数组，进而不能被for循环。</p><p>那么遇到这种问题怎么办?改成这样：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">var str="&#123;&#123;names&#125;&#125;".replace(/&amp;#39;/g,'"')</span><br><span class="line">   var name=JSON.parse(str)</span><br><span class="line">  alert(name)</span><br><span class="line">然后进行for循环，略过不表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行效果如下：<br><img src="/images/django44.png" alt="akb48"><br>上面代码首先先把所有的单引号replace成双引号，<font color="red">html是不会转义双引号的</font>，所以就可以正常使用了。</p><p>当然如果views.py里提供的name直接是双引号的话，就不用这么折腾了。</p><h2><span id="与正文内容无关的补充">与正文内容无关的补充</span></h2><p>Centos 7修改中文字符集的方法：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localedef -c -f UTF<span class="number">-8</span> -i zh_CN zh_CN.UTF<span class="number">-8</span></span><br><span class="line"><span class="keyword">export</span> LC_ALL=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">echo <span class="string">'LANG="zh_CN.UTF-8"'</span> &gt; <span class="regexp">/etc/</span>locale.conf</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      这样就不用把数据时刻都往数据库里塞了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>将本地时间转化成UTC时间</title>
    <link href="http://yoursite.com/2019/01/22/%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%97%B6%E9%97%B4%E8%BD%AC%E5%8C%96%E6%88%90UTC%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2019/01/22/将本地时间转化成UTC时间/</id>
    <published>2019-01-22T05:56:46.000Z</published>
    <updated>2019-01-22T08:06:39.478Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="实际代码">实际代码</span></h2><p>在日常工作中，有些时候需要把本地时间转换成UTC时间，通常来说，最直接的方法就是把北京时间（<code>CST时间</code>）减去8小时，但是如果考虑到夏令时，那么这样简单的数学计算就会得到错误的结果。要解决这种涉及时区的问题，就要使用特殊的模块<code>pytz</code>。<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (default, Sep  <span class="number">3</span> <span class="number">2018</span>, <span class="number">10</span>:<span class="number">11</span>:<span class="number">51</span>) </span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-28</span>)] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime,time,pytz    <span class="comment">#引入模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)     <span class="comment">#得到当前时间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line"><span class="string">'2019-01-22 14:03:03'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(now)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;     #此时类型是字符串</span></span><br><span class="line">&gt;&gt;&gt; now = datetime.datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">49</span>, <span class="number">707859</span>)     <span class="comment">#转换成datetime模式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(now)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; utc_time = now.astimezone(pytz.utc)    #转换成了UTC时间就不要用担心夏令时等等麻烦事了</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(utc_time)</span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">04</span>:<span class="number">49.707859</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(utc_time)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;     #还需要将<span class="title">datetime</span>格式转换成<span class="title">str</span></span></span><br><span class="line">&gt;&gt;&gt; utc_now = utc_time.strftime('%Y-%m-%d %H:%M:00')</span><br><span class="line"><span class="string">'2019-01-22 13:57:00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(utc_now)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;     #此时返回了字符串</span></span><br></pre></td></tr></table></figure></p><p>上面的代码说明了过程，以及得到的东西的类型，其实精简下来只有三行：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime,time,pytz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc_time = now.astimezone(pytz.utc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc_now = utc_time.strftime(<span class="string">'%Y-%m-%dT%H:%M:00Z'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (utc_now)</span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-22</span>T06:<span class="number">46</span>:<span class="number">00</span>Z</span><br></pre></td></tr></table></figure></p><p>如果要查时区名称，可以使用<code>pytz.country_timezones</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pytz <span class="keyword">import</span> timezone </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pytz.country_timezones[<span class="string">'CN'</span>]</span><br><span class="line">[<span class="string">'Asia/Shanghai'</span>, <span class="string">'Asia/Urumqi'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pytz.country_timezones[<span class="string">'US'</span>]</span><br><span class="line">[<span class="string">'America/New_York'</span>, <span class="string">'America/Detroit'</span>, <span class="string">'America/Kentucky/Louisville'</span>, <span class="string">'America/Kentucky/Monticello'</span>, <span class="string">'America/Indiana/Indianapolis'</span>, <span class="string">'America/Indiana/Vincennes'</span>, <span class="string">'America/Indiana/Winamac'</span>, <span class="string">'America/Indiana/Marengo'</span>, <span class="string">'America/Indiana/Petersburg'</span>, <span class="string">'America/Indiana/Vevay'</span>, <span class="string">'America/Chicago'</span>, <span class="string">'America/Indiana/Tell_City'</span>, <span class="string">'America/Indiana/Knox'</span>, <span class="string">'America/Menominee'</span>, <span class="string">'America/North_Dakota/Center'</span>, <span class="string">'America/North_Dakota/New_Salem'</span>, <span class="string">'America/North_Dakota/Beulah'</span>, <span class="string">'America/Denver'</span>, <span class="string">'America/Boise'</span>, <span class="string">'America/Phoenix'</span>, <span class="string">'America/Los_Angeles'</span>, <span class="string">'America/Anchorage'</span>, <span class="string">'America/Juneau'</span>, <span class="string">'America/Sitka'</span>, <span class="string">'America/Metlakatla'</span>, <span class="string">'America/Yakutat'</span>, <span class="string">'America/Nome'</span>, <span class="string">'America/Adak'</span>, <span class="string">'Pacific/Honolulu'</span>]</span><br></pre></td></tr></table></figure></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.cnblogs.com/cathouse/archive/2012/11/19/2777678.html" target="_blank" rel="noopener">https://www.cnblogs.com/cathouse/archive/2012/11/19/2777678.html</a><br><a href="https://blog.csdn.net/junli_chen/article/details/52999448" target="_blank" rel="noopener">https://blog.csdn.net/junli_chen/article/details/52999448</a><br>《Python cookbook》字符串如何转化成日期<br>《Python cookbook》处理设计到市区的日期问题</p>]]></content>
    
    <summary type="html">
    
      遇到转换时区的事情真是够蛋疼的！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="UTC时间" scheme="http://yoursite.com/tags/UTC%E6%97%B6%E9%97%B4/"/>
    
      <category term="时区转换" scheme="http://yoursite.com/tags/%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>较深入解析filebeat.yml各字段功能</title>
    <link href="http://yoursite.com/2019/01/21/%E8%BE%83%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90filebeat-yml%E5%90%84%E5%AD%97%E6%AE%B5%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/01/21/较深入解析filebeat-yml各字段功能/</id>
    <published>2019-01-21T12:31:46.000Z</published>
    <updated>2019-01-22T07:44:50.365Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="常见的几个参数">常见的几个参数</span></h2><p>以下面这个<code>filebeat.yml</code>为例：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log#这个值可以是stdin(读入标准)、udp（通过udp读取事件）</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/messages#指定文件，可以使用通配符</span><br><span class="line">  tags: ["logmessages"]#lostash能区分不同目录发过来的日志，用tag区分</span><br><span class="line">  encoding: utf-8#设置字符编码</span><br><span class="line">  scan_frequency: 10s#每 10 秒钟扫描一次</span><br><span class="line">  harvester_buffer_size: 15000#实际读取文件时，每次读取15000字节</span><br><span class="line">  tail_files: true#是否从文件末尾开始读取</span><br><span class="line">  fields:  </span><br><span class="line">    alilogtype: usercenter_serverlog</span><br><span class="line">    serverip: <span class="number">172.16</span><span class="number">.0</span><span class="number">.207</span></span><br><span class="line">  fields_under_root: true #field 字段会放在根索引下，否则会放在 fields 字段下</span><br><span class="line"></span><br><span class="line">#这里添加第二个日志路径</span><br><span class="line">  - type: log</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - <span class="regexp">/tmp/</span>test.log</span><br><span class="line">  tags: [<span class="string">"test"</span>]</span><br><span class="line"></span><br><span class="line">output.kafka:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  hosts: [<span class="string">"172.31.0.84:9092"</span>]</span><br><span class="line">  topic: 'system-secure'#支持 topic: '%&#123;[fields][alilogtype]&#125;' 这种写法</span><br></pre></td></tr></table></figure></p><p>在kibana上看到的效果如图：<br><img src="/images/filebeat1.png" alt="akb48"></p><h2><span id="exclude和include">exclude和include</span></h2><p>而如果是这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- type: log</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - <span class="regexp">/tmp/</span>test.log</span><br><span class="line">  exclude_lines: ['^JAMES']#排除掉JAMES开头的行</span><br><span class="line">  include_lines: ['^HARDEN', '^CURRY']      #保留HARDEN或者CURRY开头的行        </span><br><span class="line">  tags: [<span class="string">"test"</span>]</span><br><span class="line"></span><br><span class="line">output.kafka:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  hosts: [<span class="string">"172.31.0.84:9092"</span>]</span><br><span class="line">  topic: <span class="string">'system-secure'</span></span><br></pre></td></tr></table></figure></p><p>效果如图：<br><img src="/images/filebeat2.png" alt="akb48"></p><p>注意！如果同时定义了include_lines和exclude_lines，则Filebeat首先执行include_lines，然后执行exclude_lines。 这两个选项的定义顺序无关紧要。 即使exclude_lines出现在配置文件中的include_lines之前，include_lines选项也会始终在exclude_lines选项之前执行。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.xiaot123.com/post/elk_filebeat1" target="_blank" rel="noopener">http://www.xiaot123.com/post/elk_filebeat1</a><br><a href="https://blog.csdn.net/u013613428/article/details/78665081" target="_blank" rel="noopener">https://blog.csdn.net/u013613428/article/details/78665081</a><br><a href="http://www.51niux.com/?id=204" target="_blank" rel="noopener">http://www.51niux.com/?id=204</a><br><a href="https://github.com/wangriyu/docker-elk/wiki/Filebeat-Kafka-ELK" target="_blank" rel="noopener">https://github.com/wangriyu/docker-elk/wiki/Filebeat-Kafka-ELK</a></p>]]></content>
    
    <summary type="html">
    
      未完待续...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="filebeat" scheme="http://yoursite.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>将kafka加入到Elk集群</title>
    <link href="http://yoursite.com/2019/01/21/%E5%B0%86kafka%E5%8A%A0%E5%85%A5%E5%88%B0Elk%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/01/21/将kafka加入到Elk集群/</id>
    <published>2019-01-21T07:08:31.000Z</published>
    <updated>2019-01-21T09:27:30.073Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="环境交代">环境交代</span></h2><p>架构如图：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（目标模块 ---&gt;filebeat） ---&gt;（kafka ---&gt;logstash） ---&gt;（es ---&gt;kibana）</span><br></pre></td></tr></table></figure></p><p>具体服务器信息如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.0</span><span class="number">.207</span>工作模块+filebeatCentOS <span class="number">7.4</span> <span class="number">64</span>位阿里云<span class="number">1</span>核<span class="number">2</span>G</span><br><span class="line"><span class="number">172.31</span><span class="number">.0</span><span class="number">.84</span>kafka+logstashCentOS <span class="number">7.4</span> <span class="number">64</span>位阿里云<span class="number">2</span>核<span class="number">4</span>G</span><br><span class="line"><span class="number">172.31</span><span class="number">.0</span><span class="number">.76</span>es+es-head+kibanaCentOS <span class="number">7.4</span> <span class="number">64</span>位阿里云<span class="number">2</span>核<span class="number">16</span>G</span><br><span class="line">安全组已经开放了elk相应的端口</span><br></pre></td></tr></table></figure></p><p>首先先执行<code>yum update -y &amp;&amp; yum install java-1.8.0-openjdk* -y</code>，在更新的时候不要闲着，在<code>https://www.elastic.co/downloads</code>网站下载所有的elk模块，然后上传到对应的服务器里。 </p><h2><span id="filebeat的部署-配置和启动">filebeat的部署、配置和启动</span></h2><p>filebeat与目标机器安装在一起，它是用<code>6.5.4</code>版本，先从官网上下载rpm包，然后上传到服务器里。<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#假设已经下载好了filebeat-6.5.4-x86_64.rpm</span><br><span class="line">rpm -ivh filebeat<span class="number">-6.5</span><span class="number">.4</span>-x86_64.rpm</span><br><span class="line">cd /etc/filebeat</span><br><span class="line">cp filebeat.yml filebeat.yml-default#备份模板配置文件</span><br></pre></td></tr></table></figure></p><p>修改<code>filebeat.yml</code>如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/messages#设定日志输入源</span><br><span class="line"></span><br><span class="line">output.kafka:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  hosts: ["172.31.0.84:9092"]#这里填入kafka的地址和端口</span><br><span class="line">  topic: 'system-secure'#指定一个topic</span><br></pre></td></tr></table></figure></p><p>配置文件说明了数据的来源和目的地，使用<code>/etc/init.d/filebeat start -e -c /etc/filebeat/filebeat.yml</code>启动filebeat，然后<code>ps -aux|grep filebeat</code>查看一下进程。而filebeat的日志地址是在<code>/var/log/filebeat</code>目录下。</p><h2><span id="logstash的部署-配置和启动">logstash的部署、配置和启动</span></h2><p>logstash是跟kafka在一台服务器里，首先是下载包并且解压缩：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//artifacts.elastic.co/downloads/logstash/logstash-6.5.4.tar.gz</span></span><br><span class="line">tar -zxvf logstash<span class="number">-6.5</span><span class="number">.4</span>.tar.gz -C /opt/</span><br><span class="line">cd /opt/logstash<span class="number">-6.5</span><span class="number">.4</span>/config</span><br></pre></td></tr></table></figure></p><p>新建一个配置文件，叫<code>logstash_kafka2ES.conf</code>：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">        kafka&#123;</span><br><span class="line">                bootstrap_servers=&gt;"172.31.0.84:9092"#kafka的地址和端口</span><br><span class="line">                topics=&gt;"system-secure"#topic要一致</span><br><span class="line">                codec=&gt;plain</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">                hosts=&gt;["172.31.0.76:9200"]#es的地址和端口</span><br><span class="line">                index=&gt;"system-secure-%&#123;+YYYY-MM&#125;"#规定es使用的索引，按月份分类</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件里规定数据来源是kafka的<code>system-secure</code>这个topic，再修改同目录下的<code>jvm.options</code>：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms512m#根据自己实际情况来</span><br><span class="line">-Xmx512m#根据自己实际情况来</span><br></pre></td></tr></table></figure></p><p>保存退出，<code>./bin/logstash -f ./config/logstash_kafka2ES.conf &amp;</code>启动之，日志是logstash目录<code>/logs/logstash-plain.log</code>。</p><p>kafka的配置和启动已经在<a href="https://rorschachchan.github.io/2019/01/16/%E6%90%AD%E5%BB%BAKakfa2-11%E4%B8%BAELK%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">https://rorschachchan.github.io/2019/01/16/%E6%90%AD%E5%BB%BAKakfa2-11%E4%B8%BAELK%E6%9C%8D%E5%8A%A1/</a> 里说过了，这里略过。</p><h2><span id="elasticsearch-654的部署-配置和启动">elasticsearch-6.5.4的部署、配置和启动</span></h2><p>登录到es的服务器上，首先先下载安装包并且解压缩：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.5.4.tar.gz</span></span><br><span class="line">tar -zxvf elasticsearch<span class="number">-6.5</span><span class="number">.4</span>.tar.gz -C /opt/</span><br><span class="line">cd  elasticsearch<span class="number">-6.5</span><span class="number">.4</span>/</span><br><span class="line">useradd elk#es不能用root启动，需要新建一个用户</span><br><span class="line">chown -R elk:elk elasticsearch-6.5.4/#整个文件夹都给elk了</span><br></pre></td></tr></table></figure></p><p>修改一下<code>elasticsearch.yml</code>：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#cluster.name: my-application#由于实验环境是一个es，就没写集群名称</span><br><span class="line">node.name: lcshopelk</span><br><span class="line">path.data: /opt/elasticsearch-6.5.4/data/#存数据的地方</span><br><span class="line">path.logs: /data/tmp/elklog#存日志的路径</span><br><span class="line">bootstrap.memory_lock: true#为了防止swapping，官方建议设定为true，阿里云的云服务器是没有swap，可以不写</span><br><span class="line">network.host: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">http.port: <span class="number">9200</span></span><br><span class="line">http.cors.enabled: true#准许es-head</span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br></pre></td></tr></table></figure></p><p>保存之后修改同目录的<code>jvm.options</code>：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms2g#根据自己实际情况来</span><br><span class="line">-Xmx2g#根据自己实际情况来</span><br></pre></td></tr></table></figure></p><p>这里的配置，官网标准的建议是把50％的可用内存作为<code>Elasticsearch</code>的堆内存，保留剩下的50％。当然它也不会被浪费，<code>Lucene</code>会很乐意利用起余下的内存。查看node下是否开启了<code>Mem_lock</code>的语句是：<code>curl &#39;localhost:9200/_nodes?filter_path=**.mlockall&#39;</code>。</p><p>保存完毕，还没完,<code>vim /etc/security/limits.conf</code>，最后两行改成如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line">* hard nofile <span class="number">65536</span></span><br><span class="line"># allow user 'elk' mlockall</span><br><span class="line">elk soft memlock unlimited</span><br><span class="line">elk hard memlock unlimited</span><br></pre></td></tr></table></figure></p><p>然后切换成elk用户，执行<code>./elasticsearch -d</code>就是后台启动了。</p><h2><span id="kibana和es-head的部署-配置和启动">kibana和es-head的部署、配置和启动</span></h2><p><code>es-head</code>是用docker部署的，语句如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#假设docker已经安装好了</span><br><span class="line">docker run --name es-head -p 9100:9100 tobias74/elasticsearch-head:6#这里必须安装6版本，不然的话，数据不会显示</span><br></pre></td></tr></table></figure></p><p>运行完之后，要进入到容器里修改一下对应的配置文件<code>Gruntfile.js</code>，修改一下<code>connect</code>段落：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">server: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">port: <span class="number">9100</span>,</span><br><span class="line">base: <span class="string">'.'</span>,</span><br><span class="line">keepalive: <span class="literal">true</span>,</span><br><span class="line">hostname: '*'#新增加这样一句话</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存文件，<code>docker restart es-head</code>即可。在浏览器里访问<code>外网ip地址:9100</code>，如图：<br><img src="/images/elk19.png" alt="akb48"></p><p><code>Kibana</code>也是用docker部署的，语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#假设docker已经安装好了</span><br><span class="line">docker run --name kibana -p <span class="number">5601</span>:<span class="number">5601</span> docker.elastic.co/kibana/kibana:<span class="number">6.5</span><span class="number">.4</span></span><br></pre></td></tr></table></figure></p><p>运行完之后，要进入到容器里修改一下对应的配置文件<code>kibana.yml</code>：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"># Default Kibana configuration from kibana-docker.</span><br><span class="line"></span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: "0.0.0.0"#准许任何人访问</span><br><span class="line">elasticsearch.url: http:<span class="comment">//47.96.94.124:9200#这里输入外网IP和es的端口</span></span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>修改完事之后，<code>docker restart kibana</code>，然后在浏览器里访问<code>外网ip地址:9100</code>就可以查看kibana了，然后先去<code>menagement</code> —&gt;<code>index pattern</code>填入刚刚生成的index，然后在<code>discover</code>页面里选择刚刚生成的index就能看到日志内容了：<br><img src="/images/elk20.png" alt="akb48"></p><p><code>X-pack</code>目前还不支持6.2以上的版本，故此先略。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://dzone.com/articles/just-say-no-swapping" target="_blank" rel="noopener">https://dzone.com/articles/just-say-no-swapping</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/heap-sizing.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/heap-sizing.html</a></p>]]></content>
    
    <summary type="html">
    
      elk6跟elk5有了很大的变化，很多文本格式都已经不识别了。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>搭建Kakfa2.11为ELK服务</title>
    <link href="http://yoursite.com/2019/01/16/%E6%90%AD%E5%BB%BAKakfa2-11%E4%B8%BAELK%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/01/16/搭建Kakfa2-11为ELK服务/</id>
    <published>2019-01-16T13:20:51.000Z</published>
    <updated>2019-01-17T03:53:53.646Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="准备工作">准备工作</span></h2><p>试验机器：阿里云<code>centos 7.5</code>，IP地址是<code>172.31.0.84</code>。</p><p>本文是单台<code>kafka+zookeeper</code>架构，如果土豪可以尝试3台zookeeper+3台kafka。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install java<span class="number">-1.8</span><span class="number">.0</span>-openjdk* -y</span><br><span class="line">wget http:<span class="comment">//apache.website-solution.net/kafka/2.1.0/kafka_2.11-2.1.0.tgz</span></span><br><span class="line">tar -zxvf kafka_2<span class="number">.11</span><span class="number">-2.1</span><span class="number">.0</span>.tgz -C /opt</span><br><span class="line">wget http:<span class="comment">//apache.website-solution.net/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</span></span><br><span class="line">tar -zxvf zookeeper<span class="number">-3.4</span><span class="number">.10</span>.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></p><p>其实最新的kafka里面已经包括zookeeper了，不过我习惯了单独启动zookeeper，还是单独下载单独配置单独启动。</p><h2><span id="启动zookeeper">启动zookeeper</span></h2><p>首先先去zookeeper下的conf文件夹里编写配置文件：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper<span class="number">-3.4</span><span class="number">.10</span>/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></p><p>然后编辑<code>zoo.cfg</code>，把最下面几行改成这样：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">autopurge.snapRetainCount=3#保留3个文件</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to "0" to disable auto purge feature</span><br><span class="line">autopurge.purgeInterval=1#保留一小时以内的日志</span><br><span class="line">server.1=172.31.0.84:2888:3888#本机IP地址</span><br></pre></td></tr></table></figure></p><p>2888端口：表示的是这个服务器与集群中的Leader服务器交换信息的端口；<br>3888端口：表示的是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</p><p>然后回到<code>/usr/local/zookeeper-3.4.10/bin</code>里，执行<code>./zkServer.sh start</code>，执行完毕之后，再用<code>./zkServer.sh status</code>检查一下状态，由于是单台，所以状态应该是<code>standalone</code>。</p><h2><span id="启动kafka">启动kafka</span></h2><p>同zookeeper一样，先去kafka的conf文件夹<code>/opt/kafka_2.11-2.1.0/config</code>里，在配置文件<code>zookeeper.properties</code>最下面加上如下几句话:<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tickTime=<span class="number">2000</span></span><br><span class="line">initLimit=<span class="number">20</span></span><br><span class="line">syncLimit=<span class="number">10</span></span><br><span class="line">server.1=172.31.0.84:2888:3888#zookeeper的地址，也就是本机地址</span><br></pre></td></tr></table></figure></p><p>tickTime:这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳。</p><p>修改好了<code>zookeeper.properties</code>之后，才是正式的kafka配置文件<code>server.properties</code>：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">broker.id=<span class="number">1</span></span><br><span class="line">port=9092#broker监听的端口</span><br><span class="line">host.name=172.31.0.84#填服务器 IP</span><br><span class="line">log.dir = / data / kafka - logs    #  该目录可以不用提前创建，在启动时自己会创建</span><br><span class="line">zookeeper.connect = 172.31.0.84:2181  # 这个就是zookeeper的ip及端口</span><br><span class="line">num.partitions = 16          # 需要配置较大 分片影响读写速度</span><br><span class="line">log.dirs = /data/kafka-logs # 数据目录也要单独配置磁盘较大的地方</span><br><span class="line">log.retention.hours = 168    # 时间按需求保留过期时间,避免磁盘满</span><br></pre></td></tr></table></figure></p><p>确认zookeeper状态是启动之后，<code>./bin/kafka-server-start.sh ./config/server.properties &amp;</code>来启动Kafka服务，然后检查一下端口9092是否正常打开</p><h2><span id="kafka简单操作语句">kafka简单操作语句</span></h2><p>一些常用的操作语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建topic</span><br><span class="line">./kafka-topics.sh --create --zookeeper 172.31.0.84:2181 --replication-factor 1 --partitions 1 --topic chenshuotest#factor大小不能超过broker的个数</span><br><span class="line">#查看topic</span><br><span class="line">./kafka-topics.sh --list --zookeeper <span class="number">172.31</span><span class="number">.0</span><span class="number">.84</span>:<span class="number">2181</span></span><br><span class="line">#在topic里增加信息</span><br><span class="line">./kafka-<span class="built_in">console</span>-producer.sh --broker-list <span class="number">172.31</span><span class="number">.0</span><span class="number">.84</span>:<span class="number">9092</span> --topic chenshuotest</span><br><span class="line">#消费掉topic里的信息，需要在另外一个xshell窗口界面操作</span><br><span class="line">./kafka-<span class="built_in">console</span>-consumer.sh --bootstrap-server  <span class="number">172.31</span><span class="number">.0</span><span class="number">.84</span>:<span class="number">9092</span> --topic chenshuotest --<span class="keyword">from</span>-beginning</span><br></pre></td></tr></table></figure></p><h2><span id="参考文档">参考文档</span></h2><p><a href="http://www.cnblogs.com/JetpropelledSnake/p/10057545.html" target="_blank" rel="noopener">http://www.cnblogs.com/JetpropelledSnake/p/10057545.html</a> （zookeeper+kafka集群的配置，请看这里）</p><p><img src="/images/企鹅.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      就是单纯的部署和启动
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>在Django里添加Celery让脚本异步在后台运行</title>
    <link href="http://yoursite.com/2019/01/16/%E5%9C%A8Django%E9%87%8C%E6%B7%BB%E5%8A%A0Celery%E5%81%9A%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/01/16/在Django里添加Celery做异步任务处理/</id>
    <published>2019-01-16T06:12:00.000Z</published>
    <updated>2019-01-16T11:52:15.550Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>当使用Django执行脚本的时候，经常遇到一种情况：跳转到某个url，结果是先在后台执行一个时间较长的脚本，然后才能打开这个url页面，这样用户体验就很不好。</p><p>比如说像这样的<code>views.py</code>配置：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用ansible执行远程命令</span></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(request)</span>:</span></span><br><span class="line">    command = <span class="string">"ansible all -i /root/.ssh/hosts -m shell -a 'echo 'worinixianren' &gt;&gt; /tmp/xianren.txt'"</span>  <span class="comment">#设定ansible远程命令</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        id = request.POST.getlist(<span class="string">"ecs"</span>)<span class="comment">#通过html来获取id</span></span><br><span class="line">        num = []</span><br><span class="line">        num.append(len(id))     <span class="comment">#传递参数，给下一个页面用的</span></span><br><span class="line">        name = []<span class="comment">#传递参数，给下一个页面用的</span></span><br><span class="line">        db = pymysql.connect(<span class="string">"阿里云数据库"</span>,<span class="string">"数据库账号"</span>,<span class="string">"数据库密码"</span>,<span class="string">"databases名"</span>)<span class="comment">#根据上面获得的id去数据库里得到对应的内网IP</span></span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/root/.ssh/hosts'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> id:</span><br><span class="line">                sql = <span class="string">'select * from createyaml_ecs where name = "'</span>+ i + <span class="string">'";'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                ip = cursor.fetchall()[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                name.append(cursor.fetchall()[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">                f.write(ip+<span class="string">" ansible_ssh_user=root"</span>+<span class="string">"\n"</span>)<span class="comment">#将得到的内网IP写入到一个文件里</span></span><br><span class="line">        db.close()<span class="comment">#关闭数据库</span></span><br><span class="line">        child = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=<span class="keyword">True</span>)<span class="comment">#执行ansible命令</span></span><br><span class="line">        stdout, stderr = child.communicate()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'run_command.html'</span>,&#123;<span class="string">'data'</span>:num[<span class="number">0</span>],<span class="string">'name'</span>:name&#125;)<span class="comment">#将内容反馈到html页面里</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'homepage.html'</span>)</span><br></pre></td></tr></table></figure></p><p>像上面这段代码，要看到<code>run_command.html</code>页面就要先把整个ansible部署的脚本全跑完，如果是几百台机器批量操作的脚本，那就要等到海枯石烂水倒流。那遇到这样的情况怎么解决呢？根据不同的请求，有不同的对策：</p><ol><li>单纯的后台跑一个脚本，那么就可以使用<code>Celery</code>；</li><li>在后台跑脚本的同时，还需要不断的向后台发送请求（比如微信上的茶叶妹聊天机器人），那么就要使用<code>Channels</code>；</li></ol><p><code>Celery</code>原理部分和配置定时任务就不多说了，文末的参考资料里有网站，这里主要说的是如何配置<code>Celery</code>。</p><h2><span id="环境交代">环境交代</span></h2><p>存储后端:阿里云redis(需要支持<code>evalsha</code>命令，如果不支持，去控制台<code>升级小版本</code>即可)<br>Python:<code>3.6.5</code><br>Django:<code>2.1.1</code><br>django-celery:<code>3.2.2</code>，安装方法：<code>pip install django-celery</code><br>celery-with-redis：<code>3.0</code>，安装方法<code>pip install celery-with-redis</code><br>celery:<code>3.1.26.post2</code></p><h2><span id="具体配置">具体配置</span></h2><p>首先配置<code>setting.py</code>，全文最后添加这样几句话：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#celery配置信息</span><br><span class="line">#celery中间人 redis://:redis密码@redis服务所在的ip地址:端口/数据库号，我用的是254号</span><br><span class="line">#channels配置redis也是这样配置，如果没有密码，就可以把':redis密码@'省略</span><br><span class="line">BROKER_URL = <span class="string">'redis://:redis密码@阿里云redis地址:6379/254'</span></span><br><span class="line">#celery结果返回，可用于跟踪结果</span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:redis密码@阿里云redis地址:6379/254'</span></span><br><span class="line"></span><br><span class="line">#celery内容等消息的格式设置</span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'application/json'</span>,]</span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line"></span><br><span class="line">#celery时区设置，使用settings中TIME_ZONE同样的时区</span><br><span class="line">CELERY_TIMEZONE = TIME_ZONE</span><br></pre></td></tr></table></figure></p><p>在<code>setting.py</code>同级的文件夹里创建<code>celery.py</code>，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment">#获取当前文件夹名，即为该Django的项目名</span></span><br><span class="line">project_name = os.path.split(os.path.abspath(<span class="string">'.'</span>))[<span class="number">-1</span>]</span><br><span class="line">project_settings = <span class="string">'%s.settings'</span> % project_name</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, project_settings)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#实例化Celery</span></span><br><span class="line">app = Celery(project_name)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#使用django的settings文件配置celery</span></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Celery加载所有注册的应用</span></span><br><span class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure></p><p>还是在同样的文件夹里，编辑<code>__init__.py</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"> </span><br><span class="line"><span class="comment">#引入celery实例对象</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br></pre></td></tr></table></figure></p><p>然后在app（具体应用的文件夹里），创建一个叫<code>tasks.py</code>，这里面就是需要在后台执行的具体脚本：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> celery.decorators <span class="keyword">import</span> task</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="meta">@task#在原有的方法上加上celery装饰器task</span></span><br><span class="line"><span class="comment">#ansible批量部署命令</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_ansible</span><span class="params">()</span>:</span></span><br><span class="line">    command = <span class="string">"ansible all -i /root/.ssh/hosts -m shell -a 'echo 'worinixianren' &gt;&gt; /tmp/xianren.txt'"</span>  <span class="comment">#设定命令</span></span><br><span class="line">child = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=<span class="keyword">True</span>)</span><br><span class="line">    stdout, stderr = child.communicate()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"success!!!"</span>)<span class="comment">#执行成功！</span></span><br></pre></td></tr></table></figure></p><p>保存退出之后，修改原有的<code>views.py</code>，把原来涉及脚本的字段删除，改成:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        id = request.POST.getlist(<span class="string">"ecs"</span>)</span><br><span class="line">        num = []</span><br><span class="line">        num.append(len(id))     <span class="comment">#传递参数，给下一个页面用的</span></span><br><span class="line">        name = []</span><br><span class="line">        db = pymysql.connect(<span class="string">"阿里云数据库"</span>,<span class="string">"数据库账号"</span>,<span class="string">"数据库密码"</span>,<span class="string">"databases名"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/root/.ssh/hosts'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> id:</span><br><span class="line">                sql = <span class="string">'select * from createyaml_ecs where name = "'</span>+ i + <span class="string">'";'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                ip = cursor.fetchall()[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                name.append(cursor.fetchall()[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">                f.write(ip+<span class="string">" ansible_ssh_user=root"</span>+<span class="string">"\n"</span>)</span><br><span class="line">        db.close()</span><br><span class="line">        run_ansible.delay()     <span class="comment">#celery异步执行后台ansible程序，使用delay函数</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'run_command.html'</span>,&#123;<span class="string">'data'</span>:num[<span class="number">0</span>],<span class="string">'name'</span>:name&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'homepage.html'</span>)</span><br></pre></td></tr></table></figure></p><p>返回到<code>manage.py</code>所在的目录，先正常启动django，然后再<code>/usr/local/python3/bin/celery -A project名称 worker -l info</code>启动celery，如图：<br><img src="/images/celery1.png" alt="akb48"></p><p>看到<code>tasks.py</code>已经成功被celery使用了，然后在页面上去执行原本的命令，就会看到celery页面有刷新：<br><img src="/images/celery2.png" alt="akb48"></p><p>此时再去redis里查看一下存储的效果：<br><img src="/images/celery3.png" alt="akb48"></p><p>可见tasks执行的状态已经被保存到了redis里。但是上面我们是在前台页面启动celery，如果想把celery作为一个后台守护进程，那么命令语句如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/python3/bin/celery multi start worker -A project名称 -l info</span><br></pre></td></tr></table></figure></p><p>效果如图：<br><img src="/images/celery4.png" alt="akb48"></p><p>停止或重启将上面的<code>start</code>换为<code>stop</code>或<code>restart</code>即可。</p><h2><span id="补充">补充</span></h2><p>如果<code>tasks.py</code>内容变化了，需要重启celery才能生效。</p><p>如果在启动celery的时候，日志有写<code>UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments! warnings.warn(&#39;Using settings.DEBUG leads to a memory leak, never &#39;</code>，那么就在<code>settings.py</code>里把<code>DEBUG = True</code>改成<code>DEBUG = False</code>即可。</p><p>查看redis有几个库的命令：<code>config get databases</code>。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://yshblog.com/blog/163" target="_blank" rel="noopener">http://yshblog.com/blog/163</a> （对照代码做一遍就更有体会了）<br><a href="https://www.cnblogs.com/wdliu/p/9517535.html" target="_blank" rel="noopener">https://www.cnblogs.com/wdliu/p/9517535.html</a> (原理以及如何配置定时任务)<br><a href="https://www.cnblogs.com/wdliu/p/9530219.html" target="_blank" rel="noopener">https://www.cnblogs.com/wdliu/p/9530219.html</a><br><a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html</a></p>]]></content>
    
    <summary type="html">
    
      题外话：网站路由url不加斜杠，用户自己加斜杠之后访问404，但是不会出现重定向的问题；路由url加斜杠，用户访问的url无论加不加斜杠均可访问正常，但是不加斜杠的访问链接会做重定向，影响访问速度。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
      <category term="异步任务" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>大量任务冲击下的activeMQ报错&quot;GC overhead limit exceeded&quot;</title>
    <link href="http://yoursite.com/2019/01/14/%E5%A4%A7%E9%87%8F%E4%BB%BB%E5%8A%A1%E5%86%B2%E5%87%BB%E4%B8%8B%E7%9A%84activeMQ%E6%8A%A5%E9%94%99GC-overhead-limit-exceeded/"/>
    <id>http://yoursite.com/2019/01/14/大量任务冲击下的activeMQ报错GC-overhead-limit-exceeded/</id>
    <published>2019-01-14T11:54:19.000Z</published>
    <updated>2019-01-14T13:19:20.601Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>半夜阿里云的杭州可用B区出现了机房抖动，几乎所有的B区服务全部掉线。阿里云的技术人员捅咕了半个小时左右，在大约11点40左右恢复了正常。此时几百万的设备开始同时恢复上线，然而经过了1个小时左右，依旧有几十万设备无法上线，有的甚至上线后又掉线。</p><p>我们的架构是设备要先去“注册中心”注册，注册成功之后才会正常的工作。如果多次注册不成功，就会释放连接，把连接让给其他需要注册的设备。但是发现设备上线的速度很慢，扩容了几台“注册中心”模块，效果依旧不见好转。发现注册模块的CPU全部都达到了100%：<br><img src="/images/activemq4.png" alt="akb48"></p><p>登录到服务器里一看，日志不断的刷新这样的内容：<br><img src="/images/activemq1.png" alt="akb48"></p><p>模块与activemq的延迟特别大，此时activemq又有几百万的消息没有消费堆积在队列里。大约十分钟左右，就开始抛出<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>的错误，如图：<br><img src="/images/activemq2.png" alt="akb48"></p><p>但是同一时间段里的activemq并没有出现内存吃紧的情况：<br><img src="/images/activemq3.png" alt="akb48"></p><p>没有办法，就先赌一下的重启了activemq，没想到问题就解决了…</p><p>奇怪，明明activemq没有内存的明显消耗，却报内存耗尽。先把结果记录下来，等下一次再有类似的情况，好好观察一下（也但愿不要再在放假的时候出现故障了…）</p>]]></content>
    
    <summary type="html">
    
      大半夜的出问题，我也是醉了...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="activemq" scheme="http://yoursite.com/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>使用Zabbix的Python api去获取当前监控值</title>
    <link href="http://yoursite.com/2019/01/09/%E4%BD%BF%E7%94%A8Zabbix%E7%9A%84python-api%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%91%E6%8E%A7%E5%80%BC/"/>
    <id>http://yoursite.com/2019/01/09/使用Zabbix的python-api去获取当前监控值/</id>
    <published>2019-01-09T07:24:49.000Z</published>
    <updated>2019-01-15T06:56:20.612Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="事前准备">事前准备</span></h2><p>有些时候我们需要在非zabbix的web界面里得到zabbix-server对某台服务器的实时监控值。但是有些值是zabbix-server加工过的，比如<code>eth0入网流量</code>，zabbix-server加工的方法如下：<br><img src="/images/zabbix1.png" alt="akb48"></p><p>可见是每秒的变量并且还乘了8，那么如果要得到这样加工过的值，想通过shell得到linux的指标无疑是十分麻烦的。那么对于这种需求，我们想到的第一个办法就是使用zabbix的api，通过api去获取值比爬网页要方便许多（而且zabbix-server的web页面不是那么好爬的）。</p><p>Zabbix 3.0的API官方文档：<a href="https://www.zabbix.com/documentation/3.0/manual/api" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.0/manual/api</a><br>Zabbix 3.0的python版API官方文档：<a href="https://github.com/gescheit/scripts/tree/master/zabbix" target="_blank" rel="noopener">https://github.com/gescheit/scripts/tree/master/zabbix</a><br>这里我更推荐用python版的api，因为使用<code>zabbix-api</code>这个python第三方库让开发变得更为简洁。</p><h2><span id="安装zabbix-api">安装zabbix-api</span></h2><p>安装<code>zabbix-api</code>最方便的方法就是pip安装。本文的python版本<code>2.7.15</code>，使用源码安装的，安装包并不带pip，那么安装pip的方法如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib-devel zlib openssl openssl-devel</span><br><span class="line">mv /usr/bin/pip /usr/bin/pip-bak<span class="comment">#备份原有的pip</span></span><br><span class="line">wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools<span class="number">-12.0</span><span class="number">.3</span>.tar.gz<span class="comment">#md5=f07e4b0f4c1c9368fcd980d888b29a65</span></span><br><span class="line">tar -zxvf setuptools<span class="number">-12.0</span><span class="number">.3</span>.tar.gz</span><br><span class="line">cd setuptools<span class="number">-12.0</span><span class="number">.3</span></span><br><span class="line">python setup.py install<span class="comment">#这一步需要上面刚安装的zlib</span></span><br><span class="line">wget https://files.pythonhosted.org/packages/d0/<span class="number">92</span>/<span class="number">1e8406</span>c15d9372084a5bf79d96da3a0acc4e7fcf0b80020a4820897d2a5c/pip<span class="number">-7.1</span><span class="number">.2</span>.tar.gz</span><br><span class="line"><span class="comment">#或者去https://pypi.org/project/pip/7.1.2/#files页面下载pip-7.1.2.tar.gz </span></span><br><span class="line">tar -zxcf pip<span class="number">-7.1</span><span class="number">.2</span>.tar.gz</span><br><span class="line">cd pip<span class="number">-7.1</span><span class="number">.2</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line">ln -s /usr/local/python27/bin/pip2<span class="number">.7</span> /usr/bin/pip<span class="comment">#做一个新的快捷方式</span></span><br></pre></td></tr></table></figure></p><p>有了pip之后，就可以安装<code>zabbix-api</code>，命令是：<code>pip install zabbix-api</code> 。在python的命令行里输入<code>from zabbix_api import ZabbixAPI</code>不报错就代表安装成功。</p><h2><span id="链接zabbix">链接zabbix</span></h2><p>通过zabbix-server鉴权的代码如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">#这个脚本是用来获取zabbix 定时流量值</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zabbix_api <span class="keyword">import</span> ZabbixAPI</span><br><span class="line">zapi = ZabbixAPI(server=<span class="string">"http://网页地址/zabbix/api_jsonrpc.php"</span>)</span><br><span class="line">zapi.login("网页的用户名", "网页的密码")#鉴权</span><br></pre></td></tr></table></figure></p><p>如果没报错，就证明已经成功连接到zabbix-server了。</p><h2><span id="获取监控项">获取监控项</span></h2><p>还是以<code>eth0入网流量</code>为例，获取它的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#这个脚本是用来获取zabbix 定时流量值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zabbix_api <span class="keyword">import</span> ZabbixAPI</span><br><span class="line">zapi = ZabbixAPI(server=<span class="string">"http://网页地址/zabbix/api_jsonrpc.php"</span>)</span><br><span class="line">zapi.login(<span class="string">"网页的用户名"</span>, <span class="string">"网页的密码"</span>)<span class="comment">#鉴权</span></span><br><span class="line"></span><br><span class="line">hostname = [<span class="string">"服务器1名称"</span>,<span class="string">"服务器2名称"</span>,<span class="string">"服务器3名称"</span>,<span class="string">"服务器4名称"</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> hostname:</span><br><span class="line">        list_item = zapi.item.get(&#123;<span class="string">"output"</span>: <span class="string">"extend"</span>,<span class="string">"filter"</span>:&#123;<span class="string">'host'</span>:name&#125;,<span class="string">"search"</span>:&#123;<span class="string">'key_'</span>:<span class="string">'net.if.in[eth0]'</span>&#125;&#125;)</span><br><span class="line">        eth0_value = list_item[<span class="number">0</span>][<span class="string">"lastvalue"</span>]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Incoming traffic bandwidth is:"</span>+(eth0_value)</span><br></pre></td></tr></table></figure></p><p>可见多么简单！</p><p>上面代码里的hostname就是zabbix网页里的<code>Host name</code>，如图：<br><img src="/images/zabbix2.png" alt="akb48"></p><p>然后使用<code>zapi.item.get</code>方法通过<code>filter</code>来过滤，最后得到对应的key值。zapi下面还有很多方法，比如<code>zapi.hostgroup.get</code>、<code>zapi.host.get</code>、<code>zapi.application.get</code>等等等等，可以对于自己的需要，灵活运用。</p><h2><span id="参考文档">参考文档</span></h2><p><a href="https://blog.csdn.net/LYJ_viviani/article/details/70568434" target="_blank" rel="noopener">https://blog.csdn.net/LYJ_viviani/article/details/70568434</a><br><a href="https://segmentfault.com/a/1190000014241994" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014241994</a><br><a href="http://blog.51cto.com/xiaofengfeng/1907573" target="_blank" rel="noopener">http://blog.51cto.com/xiaofengfeng/1907573</a></p><p><img src="/images/东方三侠.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      用zabbix-api获取值然后可以搭配微信通知脚本，这样就可以定时的知道当前服务器的监控值了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="api" scheme="http://yoursite.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Html制作progress进度条</title>
    <link href="http://yoursite.com/2019/01/07/Html%E5%88%B6%E4%BD%9Cprogress%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://yoursite.com/2019/01/07/Html制作progress进度条/</id>
    <published>2019-01-07T07:07:15.000Z</published>
    <updated>2019-01-07T08:13:47.746Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="简单介绍">简单介绍</span></h2><p>无论是下载还是上传，亦或者是执行脚本。进度条都是必不可少的环节，它能让人清晰直观的看到事情发展的进度。现在生成进度条有很多种方法，我选择的是<code>progress</code>，它的用法很简单：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">'70'</span> <span class="attr">max</span>=<span class="string">'100'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>value</code>属性表示进度条已经完成的进度值，范围为<code>0~max</code>之间。如果没有设置<code>max</code>属性，那么<code>value</code>属性值的范围要在0~1之间。如果没有<code>value</code>值，那么完成进度是不确定的。那么整个进度条就是一个动态效果，就像一个加载中loading，中间的进度块来回游荡。如下图：<br><img src="/images/django42.gif" alt="akb48"></p><h2><span id="动态进度条">动态进度条</span></h2><p>有些时候，我们无法正常获取到后台脚本运行的进度，因为某些脚本无法反馈给前端一个值来衡量目前运行到什么阶段，于是这种情况我们只能预估一下这个脚本大约用多少时间，做一个假的进度条来展示进度。如果想做一个逐渐进行的进度条，比如2秒钟跑满的进度条，那么代码如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>进度条：<span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"开始"</span> <span class="attr">onclick</span>=<span class="string">"goprogress()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">goprogress</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pro=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"progress"</span>)[<span class="number">0</span>];<span class="comment">//获取progress的第一行</span></span></span><br><span class="line"><span class="undefined">        gotoend(pro,0);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">gotoend</span>(<span class="params">pro,value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> value=value+<span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">        pro.value=value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(value&lt;<span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;gotoend(pro, value);&#125;,<span class="number">20</span>)<span class="comment">//这里是时间，20的意思是2秒完成</span></span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"任务完成"</span>)&#125;,<span class="number">20</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>整个动态效果如下：<br><img src="/images/django41.gif" alt="akb48"></p><h2><span id="如何页面自动执行函数">如何页面自动执行函数</span></h2><p>上面的例子，需要手动点击button，如果不想把函数绑定点击按钮事件上，而是要页面加载出来后自动执行函数就出现此效果，那么有两种办法：</p><ol><li><p>直接把函数写到html的body标签里面</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"myfunction()"</span>&gt;</span></span><br><span class="line">//具体函数</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在JS语句里调用</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">　　<span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">　　&#123;</span></span><br><span class="line"><span class="javascript">　　 alert(<span class="string">"this window.onload"</span>);</span></span><br><span class="line"><span class="undefined">　　&#125;</span></span><br><span class="line"><span class="javascript">　　<span class="comment">/*用window.onload调用myfun()*/</span></span></span><br><span class="line"><span class="javascript">　　<span class="built_in">window</span>.onload = myfun;<span class="comment">//不要括号</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>或者在JS语句里按以下方法调用：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">           func1();</span></span><br><span class="line"><span class="undefined">           func2();</span></span><br><span class="line"><span class="undefined">           func3();</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/qq965194745/article/details/80034993" target="_blank" rel="noopener">https://blog.csdn.net/qq965194745/article/details/80034993</a><br><a href="https://frontenddev.org/article/how-to-use-javascript-to-do-a-high-force-the-progress-bar.html" target="_blank" rel="noopener">https://frontenddev.org/article/how-to-use-javascript-to-do-a-high-force-the-progress-bar.html</a><br><a href="http://www.voidcn.com/article/p-crqmibur-a.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-crqmibur-a.html</a><br><a href="https://blog.csdn.net/Zhaky/article/details/50922613" target="_blank" rel="noopener">https://blog.csdn.net/Zhaky/article/details/50922613</a><br><a href="http://www.webfront-js.com/articaldetail/47.html" target="_blank" rel="noopener">http://www.webfront-js.com/articaldetail/47.html</a><br><a href="https://www.cnblogs.com/witchgogogo/p/5547258.html" target="_blank" rel="noopener">https://www.cnblogs.com/witchgogogo/p/5547258.html</a> （这个用bootstrap做的进度条更牛逼）</p>]]></content>
    
    <summary type="html">
    
      这个进度条主要是计时的，如果想要真实反映后台脚本的进度，那么需要ajax动态获取后台进度
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="进度条" scheme="http://yoursite.com/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx+Uwsgi将Django部署上线</title>
    <link href="http://yoursite.com/2019/01/05/%E4%BD%BF%E7%94%A8Nginx-Uwsgi%E5%B0%86Django%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/01/05/使用Nginx-Uwsgi将Django部署上线/</id>
    <published>2019-01-05T09:58:17.000Z</published>
    <updated>2019-01-07T02:17:07.729Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Uwsgi与Nginx搭配Django的原理请移步去看<a href="https://rorschachchan.github.io/2018/02/02/Uwsgi%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/02/02/Uwsgi%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</a> 。</p><h2><span id="配置uwsgi">配置uwsgi</span></h2><p>安装Uwsgi的方法很简单，<code>pip install uwsgi</code>即可，一般来说会直接下载到python路径下的bin目录夹里。</p><p>首先，如果启动了django的进程，请先关闭。</p><p>然后我们要在django根目录同级里，新增一个文件夹，比如叫<code>chensite_uwsgi</code>，里面手动编写一个配置文件<code>chensite.ini</code>，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">chdir = /chendjango/Kubernetes<span class="comment">#这里指定django根目录地址</span></span><br><span class="line">module = Kubernetes.wsgi:application<span class="comment">#这里指定django默认自带的wsgi文件路径，前面是文件夹名，后面带上:application</span></span><br><span class="line">master = <span class="keyword">True</span><span class="comment">#指定启动主进程</span></span><br><span class="line">processes = <span class="number">4</span><span class="comment">#指定进程数</span></span><br><span class="line">harakiri = <span class="number">60</span><span class="comment">#当客户端请求uWSGI接口超过60s时，uWSGI会强制关闭客户端连接，然后重启响应客户端的worker</span></span><br><span class="line">max-requests = <span class="number">5000</span><span class="comment">#最多5000请求</span></span><br><span class="line">socket = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span><span class="comment">#使用本地的8000端口启动Django，效果等于python manage.py runserver 0.0.0.0:8000</span></span><br><span class="line">uid = www<span class="comment">#使用www的用户去启动uwsgi，这里注意，如果非root用户可能会出现权限不足的情况，但是使用root用户会危险</span></span><br><span class="line">gid = www</span><br><span class="line">pidfile = /chendjango/chensite_uwsgi/chendjango.pid<span class="comment">#指定pid文件</span></span><br><span class="line">daemonize = /chendjango/chensite_uwsgi/chendjango.log<span class="comment">#指定log文件，同时要求进程在后台运行</span></span><br><span class="line">vacuum = <span class="keyword">True</span><span class="comment">#当服务器退出时自动删除socket文件和pid文件</span></span><br><span class="line">logfile-chmod=<span class="number">644</span> <span class="comment">#指定日志文件的权限</span></span><br></pre></td></tr></table></figure></p><p>配置文件搞定之后，就可以使用<code>/usr/local/python3/bin/uwsgi --ini chensite.ini</code>来启动uwsgi了，启动完毕之后，<code>ps -aux|grep uwsgi</code>看一下进程是否正常，正常的话Django的进程就应该被uwsgi拉起来了，如果不正常可以通过我们刚刚指定的log文件来调试问题。</p><h2><span id="配置nginx">配置nginx</span></h2><p>Nginx在这里的用途就是监听uwsgi，由于uwsgi已经把django进程开启，所以也达到了nginx“控制”django的效果。Nginx的安装方法就不多说了，这里主要说具体配置。</p><p>在nginx的<code>conf/vhosts</code>文件夹里，新建一个叫<code>django.conf</code>的文件来搭配uwsgi。文件内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen <span class="number">80</span>;<span class="comment">#指定外人对应访问端口</span></span><br><span class="line">server_name django.lechange.com;<span class="comment">#指定域名</span></span><br><span class="line">charset utf<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line">location /static &#123;<span class="comment">#这里如实填写静态资源路径</span></span><br><span class="line">alias /chendjango/Kubernetes/static;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media &#123;<span class="comment">#同上</span></span><br><span class="line">alias /chendjango/Kubernetes/media;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;<span class="comment">#如果非静态资源，那么就跳转访问去8000端口</span></span><br><span class="line">uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>;</span><br><span class="line">include/usr/local/nginx/conf/uwsgi_params;<span class="comment">#这里填写uwsgi_params文件的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存退出之后，直接启动nginx，确认进程和端口号都正常的话，在浏览器里上登录对应的django页面就OK了！<br><img src="/images/django40.png" alt="akb48"></p><h2><span id="给网页title添加ico图标">给网页title添加ico图标</span></h2><p>首先先找到一个喜欢的图片，然后去google一下“ico图标转换”，这种转换网站一搜一大把。登录到网站将这个喜欢的图片制作成<code>16X16</code>的ico图标文件，然后上传到服务器，放到django的静态文件目录里的任何地方。比如我只做好了一个<code>batman.ico</code>文件，然后把它放到<code>static/pic</code>文件夹下：<br><img src="/images/django38.png" alt="akb48"></p><p>然后就是在html文件的title字段里添加如下两句话：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网页标题左侧显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"/static/pic/batman.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--收藏夹显示图标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/static/pic/batman.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>保存之后，刷新一下页面，就看到效果了：<br><img src="/images/django39.png" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html" target="_blank" rel="noopener">https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html</a><br><a href="https://segmentfault.com/a/1190000014361352" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014361352</a><br><a href="http://www.runoob.com/django/django-nginx-uwsgi.html" target="_blank" rel="noopener">http://www.runoob.com/django/django-nginx-uwsgi.html</a><br><a href="https://segmentfault.com/a/1190000007952589" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007952589</a></p>]]></content>
    
    <summary type="html">
    
      django自身的启动方式不能用于正式上线，要借助nginx的力量
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Uwsgi" scheme="http://yoursite.com/tags/Uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>Mysql语句导出成excel时解决科学计数法的情况</title>
    <link href="http://yoursite.com/2019/01/04/Mysql%E8%AF%AD%E5%8F%A5%E5%AF%BC%E5%87%BA%E6%88%90excel%E6%97%B6%E8%A7%A3%E5%86%B3%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <id>http://yoursite.com/2019/01/04/Mysql语句导出成excel时解决科学计数法的情况/</id>
    <published>2019-01-04T08:02:25.000Z</published>
    <updated>2019-01-07T07:47:02.707Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="普通情况导出excel">普通情况导出excel</span></h2><p>将结果直接导出到<code>/tmp/result.xls</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -u用户名 -p密码 -e <span class="string">"具体SQL命令"</span> database名 &gt; /tmp/result.xls<span class="comment">#请注意单引号双引号</span></span><br></pre></td></tr></table></figure></p><h2><span id="解决科学计数法">解决科学计数法</span></h2><p>有时候数据库里会有比较长的数字，比如订单号或者身份证号，但是由于excel的操蛋设定，长数字在导出后在Excel中打开后却是用科学计数法显示的，过长的话，后面几位数字全都转换为0了，解决这样问题的方法就是引入<code>CONCAT</code>：</p><p>比如我要从<code>sdb_b2c_delivery</code>这个tables里查询两个时间戳之间的情况，将结果导出到<code>/tmp/result.xls</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -u用户名 -p密码 -e <span class="string">'SELECT CONCAT("",对应的列名1),CONCAT("",对应的列名2) FROM sdb_b2c_delivery WHERE t_begin &gt;= 1543593600 AND t_begin &lt;= 1546271999;'</span> database名 &gt; /tmp/result.xls<span class="comment">#请注意单引号双引号</span></span><br></pre></td></tr></table></figure></p><p>但是这样导出来的结果还是科学计数法，不过可以修改单元格格式，改成“数值”，然后把小数位数改成0即可。<br><img src="/images/excel10.png" alt="akb48"></p><h2><span id="解决中文乱码的问题">解决中文乱码的问题</span></h2><p>有时候数据库里会有中文，但是导出的时候发现excel看到的中文全是乱码，解决这样问题的方法需要加上<code>--default-character-set=utf8</code>，比如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -u用户名 -p密码 --default-character-set=utf8 -e <span class="string">'SELECT CONCAT("",对应的列名1),CONCAT("",对应的列名2) FROM sdb_b2c_delivery WHERE t_begin &gt;= 1543593600 AND t_begin &lt;= 1546271999;'</span> database名 &gt; /tmp/result.xls<span class="comment">#请注意单引号双引号</span></span><br></pre></td></tr></table></figure></p><p>将<code>result.xls</code>直接使用notepad++打开，然后将excel列的格式设置为文本，再粘贴就能得到正确的表格了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.jianshu.com/p/2c8bfbfcd288" target="_blank" rel="noopener">https://www.jianshu.com/p/2c8bfbfcd288</a><br><a href="https://qianrong.me/sql/2.html" target="_blank" rel="noopener">https://qianrong.me/sql/2.html</a></p><p><img src="/images/akun.gif" alt="akb48" title="阿坤小角度攻破阿里森"></p>]]></content>
    
    <summary type="html">
    
      这样就不怕运营再要那些稀奇古怪的数据了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="excel" scheme="http://yoursite.com/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>Python3写文件的几个例子</title>
    <link href="http://yoursite.com/2019/01/04/Python3%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2019/01/04/Python3写文件的几个例子/</id>
    <published>2019-01-04T03:22:55.000Z</published>
    <updated>2019-01-04T06:31:43.584Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="拷贝一个文件的全部内容到另一个文件">拷贝一个文件的全部内容到另一个文件</span></h2><p>复制<code>aaa.txt</code>内容到另一个<code>bbb.txt</code><br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fp = open(<span class="string">'aaa.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">        fq = open(<span class="string">'bbb.txt'</span>,<span class="string">'a'</span>)<span class="comment">#这里用追加模式，这里不能用w</span></span><br><span class="line">        fq.write(line)</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure></p><h2><span id="在文件头部插入数据">在文件头部插入数据</span></h2><p>读出原有文件内容<code>aaa.txt</code>，移动索引到开始，写入新的数据data，然后再写入旧的数据。<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'aaa.txt'</span>, <span class="string">"r+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">     old = f.read()<span class="comment">#将原来的内容取出</span></span><br><span class="line">     f.seek(<span class="number">0</span>)<span class="comment">#索引移动到头</span></span><br><span class="line">     f.write(data)</span><br><span class="line">     f.write(old)</span><br></pre></td></tr></table></figure></p><h2><span id="清空文件的内容">清空文件的内容</span></h2><p>当已存在一个文件对象，且这个文件对象可以对文件进行写<code>write</code>操作(注意不是追加<code>append</code>操作),则可以通过如下语句来清空一个文件的内容:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'file.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.truncate()     <span class="comment">#使用文件对象的成员函数truncate()来清空一个文件</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何让html文件识别换行符">如何让html文件识别换行符？</span></h2><p>如果使用替换方法把<code>\r\n</code>替换成<code>&lt;br&gt;</code>的话太蠢了，其实这种需求可以一句话解决：头尾加<code>&lt;pre&gt;&lt;/pre&gt;</code>。</p><p><img src="/images/hardenkill.gif" alt="akb48" title="哈登加时绝杀勇士"></p>]]></content>
    
    <summary type="html">
    
      整理几个python写文件的特殊情况
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="文件读写" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>伦敦八日游记</title>
    <link href="http://yoursite.com/2019/01/02/%E8%8B%B1%E4%BC%A610%E6%97%A5%E6%B8%B8/"/>
    <id>http://yoursite.com/2019/01/02/英伦10日游/</id>
    <published>2019-01-02T02:42:22.000Z</published>
    <updated>2019-01-09T12:37:30.157Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这次的伦敦八日行其实是我的蜜月假期，原本打算跟媳妇去一趟巴塞罗那，但是网上攻略查了查发现巴塞罗那的小偷太多，甚至还有拦路抢包的事情发生。毕竟出门旅游，不想遇到什么添堵的事情，于是想来想去就选择了治安情况更好的伦敦作为本次的落脚点。</p><h2><span id="前期工作">前期工作</span></h2><p>办理英国签证还是比较麻烦的，虽然在杭州可以直接办理，但是需要提交很多的证件—收入证明、公司营业执照复印件等等，然后要等待一个月左右再去照相按手印。若心急的话，可以走付费的加速通道。机票我媳妇选择了国航，路线是“杭州–&gt;北京–&gt;伦敦”，选择国航的主要原因是“行李在转机的时候可以直挂”。至于住宿，伦敦毕竟也是寸土寸金的地方，住宿还是蛮贵的，100磅一晚是正常价格，我媳妇选择了Airbnb，地址很不错，是靠近牧羊丛地铁站的Richman街道，交通很便利，周围也很安静。</p><p>出门游玩得需要现金吧，于是乎去中国银行兑换英镑，兑换汇率是8.9，我媳妇兑换了1000磅，兑换完了才知道原来市场上流通的英镑最大面值才50…最后就是在淘宝上购买英国电话卡，我俩八天里使劲用才用了6G左右，所以其实10G完全够用了，20G流量纯粹浪费。</p><h2><span id="具体行程">具体行程</span></h2><p>这10天的具体行程如下：<br>22日     从杭州出发，中午北京转机，晚上抵达伦敦希斯罗机场，办理oyster card，入住Airbnb<br>23日        大英博物馆 + 考文特花园 + 海德公园嘉年华<br>24日        杜莎夫人蜡像馆 + 贝克街散步 + 伦敦眼 + 去媳妇的朋友家圣诞聚餐<br>25日        圣诞节全城休息，步行去摄政街看灯，在唐人街吃饭<br>26日     WestField购物 + 温布利看球 + 哈罗德百货购物<br>27日        西敏寺 + 伦敦塔桥 + 大本钟 + 泰晤士河游船<br>28日        温莎城堡 + 碎片大厦观景<br>29日        由于前几天太累了，原定的去剑桥大学参观取消，改成了牛津街购物<br>30日        WestField购物 + 返程到北京<br>31日      抵达杭州</p><h2><span id="伦敦的人">伦敦的人</span></h2><p>伦敦是一个特别国际化的都市，出飞机场坐上地铁的那一刻，我发现车厢里有好多的印度人，让我一度怀疑飞机是不是飞到了新德里。伦敦大街上也是各种肤色，既有黑人白人也有头戴面纱的穆斯林，各路人马聚齐于此。伦敦人给人感觉是很友好的—只要人看到你拿着手机在路上一副不知所措的神情，就会上前主动问你“Are you lost?”记得我跟我媳妇第一天晚上9点多拖着行李找Airbnb的时候，就是一个黑人胖大姐帮我们联系了房东，而且还与我们一起找房东留下的钥匙。</p><p>我所住的Airbnb是提供有线电视的，总共有700个频道（另外还有100个电台），其中收费频道大约是400个，剩下300个频道里只有一个中文频道—凤凰卫视。但是我个人更感兴趣的是那些印度频道、巴基斯坦频道和穆斯林频道，因为第一次能接触到他们的电视节目觉得很新奇好玩。为什么能收到这些频道？我猜可能是英国政府为了照顾当地的印度人和中东人，让他们可以在千里之外看到自己家乡的节目。每天早上，穆斯林频道每天早上都有念经（古兰经？）的环节，屏幕上一盏烛火，背景是巨大的清真寺，然后飘过一行又一行的阿拉伯字，一个浑厚的男声在咿咿呀呀的念经…这个节目基本陪我度过了两个早上煮方便面的时间。<br><img src="/images/apartment.jpg" alt="akb48" title="我们住的公寓，空间很大景色不错！"></p><p>伦敦街头的卖艺人随处可见，多数是自弹自唱的音乐艺人，也有杂技艺人和幽默剧艺人。英国人很喜欢唱歌，尤其是喝酒的时候大家一起大合唱更是壮观。而每到周五周六的晚上，酒吧一条街人满为患，甚至有人在店外喝酒，同时马路上也会有临时的简易厕所供男士们方便。</p><p>英国不愧是腐国，本身洋人就比较高大，所以“彩虹小哥”在马路上就更有视觉冲击力，部分街道甚至会出售男同用品，而他们对这种现象也是司空见惯、习以为常。</p><p>英国男人最有名的，除了腐之外，那就是秃了。上到威廉、哈里两个王子下到地铁里的普通上班族，秃头的概率的确很高，我经常感叹那些白人们有着帅气的面庞和隐隐看到头皮的后脑勺。为什么英国是秃头的重灾区？有人说是因为英国的水质硬，所以毛孔不通畅，也有人说英国雨水多，而且当地人还不喜撑伞，频繁的冷水对头发也有伤害。但是我看到的几个印度和中东的店员却都不秃，那么英国白人秃头的真实原因不得而知，不过秃头的杀伤力的确对他们造成了很大的伤害，所以他们戴帽子的人不在少数。</p><p>说完了男人说女人，英国的女人不秃，头发茂密的很，而且他们还特别抗冷！零度左右的天气，我看到很多穿着破洞牛仔裤的女性，甚至还有穿短袖的，在大街上走来走去。至于什么“发热御寒丝袜”在英国都没得卖。这种抗冷属性应该算是他们的种族天赋。</p><p>顺便插一句题外话，伦敦街头的抗议行动我们看到了三处，第一处是大英博物馆门口有法轮功的静坐和散发传单；第二处是在摄政街的动物保护组织抗议“加拿大鹅”店残杀郊狼扒毛；第三处也是摄政街，有5个左右的伊斯兰人手持经书控诉美国政府。这里面让我印象比较深的是动物保护组织，他们堵着加拿大鹅的门店喊口号，但是抗议归抗议，并没有进去打砸，而且店里依旧有客人在购买，可以说除了闹一点之外都比较和谐。</p><h2><span id="伦敦的吃">伦敦的吃</span></h2><p>有人说伦敦的美食很少，因为英国人本身对于吃的想象力特别匮乏；也有人说伦敦的美食很多，因为它是地球上米其林餐厅最多的城市。其实这两个对立的说法都对，英国人自身对吃仅仅定义为“填饱肚子的行为”而已，所以纵然电视里的美食节目不少，但是英国本土并没有什么饮食文化而言。如果肯舍得钱下馆子的话，那么伦敦还是有很多上佳口味的饭店供人选择。</p><p>我在这几天在伦敦吃到了如下几种菜：牛排（网红店Flat Iron Steak和Bill’s）、龙虾（网红店Burger &amp; Lobster）、披萨（网红店Pane Cunzato）、中国菜（唐人街的金龙轩）、麦当劳、烤鸡（网红店Nando’s）、日料（超赞而且实惠的Eat Tokyo），反倒是鼎鼎大名的“炸鱼薯条”却只是看而没有吃。总体上来说，原味的欧洲菜跟亚洲口味的确有很大的不同，首先是每餐必有薯条（我个人喜欢薯条搭配蛋黄酱吃），其次各种酱汁种类很多，味道七七八八，再其次就是肉蛮好吃的，但是水果基本没有。当然我去的店相对平民，如果去米其林餐厅肯定会吃到高档的菜肴。</p><p>上面说了那么多饭里，我个人最喜欢的还是中国菜—-金龙轩的福建炒饭，蟹肉芡勾的很棒，而且分量十足！<br><img src="/images/bills.jpg" alt="akb48" title="在温莎车站bill&#39;s吃的牛排，分量很多肉质不错"></p><h2><span id="伦敦的买">伦敦的买</span></h2><p>从行程规划里可以看到，我跟我媳妇准备了大量买买买的时间，因为圣诞节之后，就是会持续十天左右的Boxing Day。在此期间，几乎所有的商品都会让利，新品可能折扣少一点，部分老款甚至会打五折乃至更低！</p><p>作为二次元的拥趸，Forbidden Planet是绝对不能错过的书店！它在大英博物馆附近，一楼是各种周边，地下室是书籍出售。在里面我买了两个蝙蝠侠周边。那里的日漫也很多，《暗杀教室》两本只需要三磅，划算的很！<br><img src="/images/ForbiddenPlanet1.jpg" alt="akb48" title="精美的手办，门口橱窗里甚至还有海王1：1的叉子"></p><p>若要正经购物的话，伦敦也有很多去处。我跟媳妇先去了考文特花园，那里能买到很多好玩又精美的小玩意，比如银制的勺子和挂链，甚至还有潘海立根。摄政街跟哈罗德百货更是购物的火拼集中地，附近的商铺应该有100家，消费群体主要是中东人和亚洲人。白人和黑人更多的是聚集在像JD那种体育用品专卖店买鞋。至于为什么高端店被外国人包围，我想因为英国本身福利比较给力，所以土著平民都没有攒钱的意识，过着“今朝有酒今朝醉”的月光生活，自然也不会拿出那么多钱来买奢侈品。</p><p>大名鼎鼎比斯特小镇我俩没有去，因为那个地方在这种打折季肯定人满为患，事实也印证了我俩的预测。</p><p>不过英国的退税跟日本的不同，日本是在商家处直接退税，而英国是要在指定地点退税或者机场退税。机场退税有两条路，一条是去直接退英镑，但是排队非常夸张，大约要排4小时左右；还有一条就是直接退本国的货币，需要收取不俗的手续费而且兑换的汇率也很低，所以英国的退税政策其实并不友好。</p><h2><span id="伦敦文化">伦敦文化</span></h2><p>几天接触下来，只管感觉到伦敦是一个“传统与现代”并存的城市。说它现代，就是各种高大上的各路品牌、宝马奔驰在马路上驰骋、超市基本都实现了无人结账而且几乎各处都配有免费wifi（最良心的是注册wifi只填写电子邮件，而根本不需要填写手机号，这一点跟国内众多注册很不一样！）；说它传统呢，就是普通居民建筑还保留传统英式风格，大大小小的教堂无论年代目前都在服务，特殊地方还有骑马巡警。景点里那些百年以上的软文化都妥善保存，景点外伦敦人喜欢看戏剧的习惯流传至今。这种“新与旧”和谐共存最明显的体现就是在温莎城堡，女王家虽然面积远不如故宫那么大，但是论奢华一点不虚我们。<br><img src="/images/ximinsi.jpg" alt="akb48" title="西敏寺著名的十牧师雕像，最右边是苗族牧师王志明"><br><img src="/images/yvonne.jpg" alt="akb48" title="Yvonne Fletcher警察的墓碑，她殉职之后的一系列事件导致英国与比利亚断交"></p><p>不过，伦敦公共设施维护的普遍都不咋地，最让人吐槽的就是以下几点：垃圾箱很少导致街边烟头满地，非居民区垃圾袋随处可见，喝剩的纸杯也随意放在路边橱窗上，地铁没信号不说而且椅套看上去都旧旧的。据我媳妇在伦敦的朋友说，伦敦居民区的环卫工人每周三才会出来清理一次街道的垃圾袋，所以平时都是把垃圾袋放在家里，到了周三才一并拿出去扔掉，如果平时乱扔会被罚很重的款。</p><h2><span id="伦敦看球">伦敦看球</span></h2><p>到了伦敦怎能不现场观看英超比赛？伦敦是著名的“足球之城”，当地就有6支英超联赛球队（切尔西、热刺、阿森纳、西汉姆、富勒姆、水晶宫），但是圣诞节期间主场作战的只有热刺一家，于是我在StubHub上买了两张热刺VS伯恩茅斯的门票。不过我真的不推荐各位去StubHub上买票，手续费高不说，而且出票速度奇慢，我是11月30日下单，12月21号才通知可以下载球票电子档，中途还不能退票。主要是StubHub毕竟是卖2手票的，只有有人卖才会出单通知你，所以还是在官网买票是最省心最效率的，但是要提前注册会员。<br><img src="/images/qiupiao.png" alt="akb48" title="原来英超的球票是长这个样子的"></p><p>到了温布利下车一出门就能看到温布利球场，路上都是卖热刺队围巾的小贩，5磅一条。到了球场，首先对背包大小有要求，包不能大于4A纸的面积，否则就是要花10磅寄存。进场的时候要求安检并且把饮料瓶盖扔掉，在机器上扫描电子票的二维码入场，不检查实名制。</p><p>进了球场就是要狂躁起来，那场比赛热刺队也很给力，5：0痛击伯恩茅斯，孙球王梅开二度，我身后手持太极旗的韩国妹子们兴奋不已。热刺的球迷很热情，每个球员有了上佳表现，球迷都会唱歌，从穆萨登贝莱唱到哈里凯恩。出场之后，意犹未尽的我还跟温布利球场的雕像们一一合影。如果将来有一次能去巴塞罗那，肯定也会去诺坎普朝圣一下。<br><img src="/images/bobby.jpg" alt="akb48" title="波比摩尔的雕像"></p><h2><span id="其他轶事">其他轶事</span></h2><p>倒时差的小秘诀：静下心来或者把自己弄疲惫，该睡觉的时候一定要正常睡觉，哪怕只有几个小时。</p><p>都说英国不准许肉类入境，但是我媳妇带的鸭脖子、鸡爪子在行李箱里就大摇大摆的登陆了。</p><p>伦敦地铁没有安检，Paddington火车车厢里也压根没有检票。</p><p>伦敦的热水非常方便，而且他们的自来水是可以直接饮用的，如果不能饮用的话会有提示。</p><p>伦敦普通居民区的门锁完全不是国内常见的“防盗门+防盗锁”，而是很老式的“木门+插钥匙锁”，所以那些特工电影里一脚破门的镜头果然不是在骗人…</p><p>伦敦市区电子屏幕上铺天盖地的是“抖音”海外版app的广告，而华为的广告只有商场里才有，但是我并没有发现卖华为手机的地方…</p><p>这八天里唯一看到的中国公众人物是杨幂，在杜莎夫人蜡像馆里(其实还有达赖喇嘛的蜡像，但是他毕竟自建流亡政府，就不能算中国人了)。她周围很冷清，跟布拉德皮特、约翰尼德普、乔治克鲁尼等人气大户完全没法比。</p><p>伦敦黑人很多，我看见不少的黑人喜欢把裤裆穿的很低，然后漏出来半截内裤甚至是屁股（囧），不知道这是不是他们的什么衣着文化…</p><h2><span id="其他小tips">其他小tips</span></h2><ol><li>大英博物馆的语音向导是有数的，请提早去拿；</li><li>杜莎夫人蜡像馆和伦敦眼可以买连票，价钱优惠而且都有快速通行权限；</li><li>圣诞期间碎片大厦晚上10点才关门，所以如果看不到日落那就干脆不用急了；</li><li>London Pass卡的游船晚上5点05就停业了；</li><li>London Pass卡支持两种大巴车，我个人推荐Golden Tours，虽然它的APP可能做得不太好，但是营业时间长，至少晚上9点我还看到车在马路上跑，而BIG BUS六点多就休息了；</li><li>准备的APP：航旅纵横+CityMapper+TripAdvisor；</li><li>一定要带伞！虽然伦敦各个小店都有卖伞，但是基本10磅一把，价格还是蛮贵的；</li><li>自带拖鞋、牙刷、毛巾等用品，还有插销转换头；</li><li>伦敦行李寄存地点不多，而且价格不菲，8磅一个箱子，当然啦，土豪可以无视此条；</li></ol>]]></content>
    
    <summary type="html">
    
      以一个超赞的伦敦游作为2018年的结尾！
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="旅游" scheme="http://yoursite.com/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="伦敦" scheme="http://yoursite.com/tags/%E4%BC%A6%E6%95%A6/"/>
    
  </entry>
  
  <entry>
    <title>Django实现文件上传功能</title>
    <link href="http://yoursite.com/2018/12/19/Django%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2018/12/19/Django实现图片上传/</id>
    <published>2018-12-19T06:42:26.000Z</published>
    <updated>2018-12-20T05:47:49.447Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="准备工作">准备工作</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>执行<code>pip install pillow</code>，安装python图片处理库pillow</p><h2><span id="图片单张上传">图片单张上传</span></h2><p>首先先修改一下<code>setting.py</code>，添加如下两行代码：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)    <span class="comment">#media即为图片上传的根路径</span></span><br></pre></td></tr></table></figure></p><p>保存之后，在项目根目录即<code>manage.py</code>同级目录里创建<code>media</code>这个文件夹。然后编辑<code>models.py</code>，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Img</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    img_url = models.ImageField(upload_to=<span class="string">'photos/'</span>,blank=<span class="keyword">True</span>,null=<span class="keyword">True</span>) <span class="comment">#指定图片上传路径，即media/photos/</span></span><br></pre></td></tr></table></figure></p><p>保存之后执行一下<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>，建立项目与数据库之间的关系。</p><p>增加<code>urls.py</code>的内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">r'uploadImg/'</span>,views.uploadImg,name=<span class="string">'uploadImg'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>增加<code>views.py</code>的内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">其他内容略</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Img</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片上传</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        img = Img(img_url=request.FILES.get(<span class="string">'img'</span>))</span><br><span class="line">        img.save()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'imgUpload.html'</span>)</span><br></pre></td></tr></table></figure></p><p>最后就是写一个前端页面<code>imgUpload.html</code>:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图片上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;img&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>启动django，打开<code>imgUpload.html</code>就可以看到界面，并且上传图片了，效果如图（我这个前端是加工过的，不是上面的代码）：<br><img src="/images/django34.gif" alt="akb48"></p><p>然后在<code>django项目目录里的media/photos</code>路径里找到我们刚刚上传的test333.png，而且在数据库里也能看到这条记录，如下：<br><img src="/images/django35.png" alt="akb48"></p><h2><span id="图片批量上传">图片批量上传</span></h2><p>不过在现实工作中，图片批量上传的应用场景更为普遍，如果是批量上传的话，我们尝试一个全新而且更简单粗暴的方法。</p><p>首先先修改前端页面<code>imgUpload.html</code>，把<code>&lt;input type=&quot;file&quot; name=&quot;img&quot;&gt;</code>改成<code>&lt;input type=&quot;file&quot; name=&quot;img&quot; multiple=&quot;&quot;&gt;</code>，就这一处而已，其他都不动。</p><p>然后就是修改<code>views.py</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片上传</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    files = request.FILES.getlist(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        destination = open(<span class="string">'/tmp/'</span> + f.name,<span class="string">'wb+'</span>)<span class="comment">#上传的文件都放到/tmp文件夹里</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> f.chunks(): </span><br><span class="line">            destination.write(chunk)</span><br><span class="line">            destination.close()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'imgUpload.html'</span>)</span><br></pre></td></tr></table></figure></p><p>可以看出，这次<code>views.py</code>在执行<code>uploadImg</code>已经完全脱离img数据库和media路径了，就是一个非常单纯的图片上传功能。效果如图：<br><img src="/images/django36.gif" alt="akb48"></p><p>此时去/tmp里检查文件是否成功传上来：<br><img src="/images/django37.png" alt="akb48"></p><p>可见已经成功的一次性传上来三个文件到目标文件夹了。</p><h2><span id="使用阿里云云存储的api上传文件">使用阿里云云存储的API上传文件</span></h2><p>阿里云云存储上传文件的脚本如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#需要先执行pip install oss2</span></span><br><span class="line"><span class="keyword">import</span> oss2,os</span><br><span class="line">path = <span class="string">"图片所在文件夹的绝对路径"</span></span><br><span class="line">files = os.listdir(path)     <span class="comment">#得到文件夹下的所有文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#鉴权</span></span><br><span class="line">auth = oss2.Auth(<span class="string">'这里是AK'</span>, <span class="string">'这里是SK'</span>)</span><br><span class="line">bucket = oss2.Bucket(auth, <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>, <span class="string">'目标BUCKET名称'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:  </span><br><span class="line">    bucket.put_object_from_file(<span class="string">'路径/'</span>+i, path+i)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"上传成功！"</span>+i+<span class="string">"的url地址是：https://lechangebbs.oss-cn-hangzhou.aliyuncs.com/jjfjj/"</span>+i)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"\n"</span> * <span class="number">2</span>)<span class="comment">#空两行</span></span><br></pre></td></tr></table></figure></p><p>执行效果如下：<br><img src="/images/django33.png" alt="akb48" title="图片是中文名称也不怕"></p><p>通过搭配这个脚本写到<code>views.py</code>里就可以把上传上来的图片转到阿里云云存储里去了！</p><p>PS，阿里云OSS有官方支持django的模块：<code>django-aliyun-oss2-storage</code>（果然够牛逼！），直接pip安装即可，如何使用待我研究一番先。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://jinfagang.gitlab.io/2017/11/27/Django%E5%90%8C%E6%97%B6%E4%B8%8A%E4%BC%A0%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E6%88%96%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">https://jinfagang.gitlab.io/2017/11/27/Django%E5%90%8C%E6%97%B6%E4%B8%8A%E4%BC%A0%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E6%88%96%E6%96%87%E4%BB%B6/</a><br><a href="https://blog.csdn.net/c_beautiful/article/details/79755368" target="_blank" rel="noopener">https://blog.csdn.net/c_beautiful/article/details/79755368</a><br><a href="https://www.jianshu.com/p/3c79b19849f5" target="_blank" rel="noopener">https://www.jianshu.com/p/3c79b19849f5</a><br><a href="https://blog.csdn.net/u014633966/article/details/78727034" target="_blank" rel="noopener">https://blog.csdn.net/u014633966/article/details/78727034</a><br><a href="https://abersheeran.com/articles/Django-MutliImageFormSet/" target="_blank" rel="noopener">https://abersheeran.com/articles/Django-MutliImageFormSet/</a></p>]]></content>
    
    <summary type="html">
    
      实现单图片上传和图片批量上传
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用ZABBIX自带模板去监控Mysql</title>
    <link href="http://yoursite.com/2018/12/18/%E4%BD%BF%E7%94%A8ZABBIX%E8%87%AA%E5%B8%A6%E6%A8%A1%E6%9D%BF%E5%8E%BB%E7%9B%91%E6%8E%A7Mysql/"/>
    <id>http://yoursite.com/2018/12/18/使用ZABBIX自带模板去监控Mysql/</id>
    <published>2018-12-18T06:17:45.000Z</published>
    <updated>2018-12-18T12:09:29.385Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="事前准备">事前准备</span></h2><p>Zabbix-agent:<code>3.0.8</code>，安装路径是<code>/etc/zabbix/</code><br>Mysql:<code>5.7.10</code>，安装路径是<code>/opt/mysql/</code><br>配置<code>/etc/sudoers</code>让zabbix用户可以使用sudo，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">zabbix  ALL=(ALL)       NOPASSWD:ALL</span><br><span class="line">Defaults:zabbix !requiretty</span><br></pre></td></tr></table></figure></p><h2><span id="配置mycnf">配置.my.cnf</span></h2><p>众所周知，Zabbix官方提供了自带监控Mysql的模板，但是这个模板并不能直接使用。所以我们需要有如下的改动：</p><p>首先，先在mysql目录下的etc文件夹里先创建一个<code>.my.cnf</code>文件，全路径是<code>/opt/mysql/etc/.my.cnf</code>，这个文件是zabbix要求的用于存放连接mysql数据库的账户信息的隐藏文件，这样可以避免在命令行里输入密码。整个<code>.my.cnf</code>文件内容如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysql]                     #mysql程序要使用的账户信息</span><br><span class="line">host=localhost</span><br><span class="line">user=用户名</span><br><span class="line">password=&quot;密码&quot;   #此处的密码强烈建议加上引号</span><br><span class="line">socket=/tmp/mysql.sock  #确认mysql的sock文件路径</span><br><span class="line"></span><br><span class="line">[mysqladmin]             #mysqladmin程序要使用的账户信息</span><br><span class="line">host=localhost</span><br><span class="line">user=用户名</span><br><span class="line">password=&quot;密码&quot;</span><br><span class="line">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure></p><p>这里建议在mysql里插入一个叫zabbix的用户，密码自己设定，然后在<code>.my.cnf</code>里就是用这个用户即可。此时，在命令行直接输入<code>HOME=/opt/mysql/etc/ mysql</code>和<code>HOME=/opt/mysql/etc/ mysqladmin ping</code>都应该是直接出结果，而不是用输入账号和密码，如图：<br><img src="/images/mysql-sock4.png" alt="akb48"></p><p><font color="red">注意!</font>这个<code>.my.cnf</code>的权限是644，用户和用户组是root，如果权限过大，那么启动mysql时就会报错：<code>Warning: World-writable config file &#39;/opt/mysql/etc/.my.cnf&#39; is ignored</code>。</p><h2><span id="修改userparameter_mysqlconf">修改userparameter_mysql.conf</span></h2><p>然后在<code>zabbix-agent</code>配置文件的文件夹<code>/etc/zabbix/zabbix_agentd.d/</code>里，会发现一个叫<code>userparameter_mysql.conf</code>的文件，把里面的内容改成如下样子:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># For all the following commands HOME should be set to the directory that has .my.cnf file with password information.</span><br><span class="line"></span><br><span class="line"># Flexible parameter to grab global variables. On the frontend side, use keys like mysql.status[Com_insert].</span><br><span class="line"># Key syntax is mysql.status[variable].</span><br><span class="line">UserParameter=mysql.status[*],echo <span class="string">"show global status where Variable_name='$1';"</span> | sudo HOME=<span class="regexp">/opt/my</span>sql/etc /opt/mysql/bin/mysql -N | awk <span class="string">'&#123;print $$2&#125;'</span></span><br><span class="line">UserParameter=mysql.ping,sudo HOME=<span class="regexp">/opt/my</span>sql/etc/ <span class="regexp">/opt/my</span>sql/bin/mysqladmin ping | grep -c alive</span><br><span class="line">UserParameter=mysql.version,/opt/mysql/bin/mysql -V</span><br></pre></td></tr></table></figure></p><p>这个文件第一行注释的内容就是说明HOME路径就是<code>.my.cnf</code>文件所在的路径，后面的<code>mysql</code>和<code>mysqladmin</code>都要用绝对路径，同时加上<code>sudo</code>，这样zabbix才能正确的调用它。</p><p>来到<code>zabbix-server</code>端使用<code>zabbix-get</code>去试试结果：<br><img src="/images/mysql-sock5.png" alt="akb48"></p><p>然后就是在zabbix网页端将目标机器添加<code>Template DB MySQL</code>，至此，使用zabbix自带的mysql监控模板监控mysql数据库就结束了，效果如下：<br><img src="/images/mysql-sock6.png" alt="akb48"></p><h2><span id="监控连接数">监控连接数</span></h2><p>上面那个模板是不带有监控连接数的，要是单纯的去使用netstat获取当前链接值可能会反应较慢，那么就是用mysql自带的查连接数的命令：<code>show status like &#39;%connect%&#39;;</code>，执行效果如下：<br><img src="/images/mysql-sock8.png" alt="akb48"></p><p>简单说下这几个值的含义：</p><ol><li>Connections：试图连接到（不管是否成功）MYSQL服务器的连接总数</li><li>Locked_connects：锁住的链接数</li><li>Max_used_connections：服务器启动后已经同时使用过的连接最大数量（并发）</li><li>Max_used_connections_time：出现Max_used_connections时的时间</li><li>Aborted_connects：尝试连接到MySQL服务器失败的次数</li><li>Threads_connected：当前的连接数 </li></ol><p>那么知道了含义，我们就可以对症下药了，这里我们监控两个数值<code>Locked_connects</code>和<code>Threads_connected</code>，那么就把下面的语句添加到<code>userparameter_mysql.conf</code>里：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=mysql.connections,echo <span class="string">"show status like '%Threads_connected%';"</span> | sudo HOME=<span class="regexp">/opt/my</span>sql/etc /opt/mysql/bin/mysql -N | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">UserParameter=mysql.lockconnections,echo <span class="string">"show status like '%Locked_connects%';"</span> | sudo HOME=<span class="regexp">/opt/my</span>sql/etc /opt/mysql/bin/mysql -N | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">UserParameter=mysql.rowofalarm,echo "select count(*) from alarm.adm_log_alarm;" | sudo HOME=/opt/mysql/etc /opt/mysql/bin/mysql -N | awk '&#123;print $1&#125;'#这个是检测alarm.adm_log_alarm的数据行数</span><br></pre></td></tr></table></figure></p><p>重启<code>zabbix-agent</code>，配置对应的items和trigger即可。</p><p>额外补充一下，查看mysql数据库对应每个IP的详细链接情况的语句是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substring_index(host,<span class="string">':'</span>,<span class="number">1</span>) <span class="keyword">as</span> ip , count(*) <span class="keyword">from</span> information_schema.processlist group by ip;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/mysql-sock7.png" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/erasin/notes/blob/master/linux/mysql/monitor.md" target="_blank" rel="noopener">https://github.com/erasin/notes/blob/master/linux/mysql/monitor.md</a> （其他mysql状态监控语句）<br><a href="http://www.cnblogs.com/kerrycode/p/9206787.html" target="_blank" rel="noopener">http://www.cnblogs.com/kerrycode/p/9206787.html</a></p>]]></content>
    
    <summary type="html">
    
      Zabbix的自带模板搭配连接数监控和数据行监控，争取在我出门这段时间落得一个安心
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Zabbix" scheme="http://yoursite.com/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>将list重新排列后获取原来的索引</title>
    <link href="http://yoursite.com/2018/12/14/%E5%B0%86list%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%90%8E%E8%8E%B7%E5%8F%96%E5%8E%9F%E6%9D%A5%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2018/12/14/将list重新排列后获取原来的索引/</id>
    <published>2018-12-14T06:02:42.000Z</published>
    <updated>2018-12-14T07:22:30.089Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="具体需求与解决方案">具体需求与解决方案</span></h2><p>假设我们有一个列表，现在要对列表里进行从大到小排序，然后再获取列表里原来各位元素的索引，怎么办？<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2.7</span></span><br><span class="line">new_list = sorted(enumerate(old_list),key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>],reverse=<span class="keyword">True</span>)     <span class="comment">#old_list就是原列表</span></span><br></pre></td></tr></table></figure></p><p>举一个详细一点的例子：<br><img src="/images/enumerate.png" alt="akb48"></p><p>可见原来aaa这个列表的元素虽然经过了大小排序，但是各元素的索引下标没有丢，而且通过<code>zip（）</code>方法能拆出来供我们继续使用。</p><h2><span id="enumerate-函数">enumerate() 函数</span></h2><p>这个<code>enumerate()</code>函数可以将一个可遍历的数据对象组合一个索引序列，同时列出数据和数据下标，默认情况下标是从0开始的，也可以手动更改，比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line">&gt;&gt;&gt; list(enumerate(seasons))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</span><br><span class="line">&gt;&gt;&gt; list(enumerate(seasons, start=1))       # 下标从 1 开始</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</span><br></pre></td></tr></table></figure></p><p>有了它，我们就可以轻松获取索引下标值了。</p><h2><span id="sortedkeylambda">sorted(key=lambda)</span></h2><p><code>sorted（）</code>是用来排列列表的函数，默认情况下是从小到大排列。如果列表里是每一个元素并不是单纯的一个数字，而是多字段，那么就要规定以哪一个字段作为标准来排列，这个这顶标准就是<code>key</code>。</p><p>举个例子：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>listA = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>]     <span class="comment">#这个列表就是单字段，排序就是单纯按照数字大小排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(listA))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listC=[(<span class="string">'e'</span>, <span class="number">4</span>), (<span class="string">'o'</span>, <span class="number">2</span>), (<span class="string">'!'</span>, <span class="number">5</span>), (<span class="string">'v'</span>, <span class="number">3</span>), (<span class="string">'l'</span>, <span class="number">1</span>)]      <span class="comment">#这个列表是多字段</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(listC, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))      <span class="comment">#指定按照多字段里第二个元素，即数字的大小进行排序</span></span><br><span class="line">[(<span class="string">'l'</span>, <span class="number">1</span>), (<span class="string">'o'</span>, <span class="number">2</span>), (<span class="string">'v'</span>, <span class="number">3</span>), (<span class="string">'e'</span>, <span class="number">4</span>), (<span class="string">'!'</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure></p><p><code>x:x[]</code>字母可以随意修改，排序方式按照中括号[]里面的维度进行排序，[0]按照第一维排序，[2]按照第三维排序</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/7851077/how-to-return-index-of-a-sorted-list" target="_blank" rel="noopener">https://stackoverflow.com/questions/7851077/how-to-return-index-of-a-sorted-list</a><br><a href="https://stackoverflow.com/questions/16310015/what-does-this-mean-key-lambda-x-x1" target="_blank" rel="noopener">https://stackoverflow.com/questions/16310015/what-does-this-mean-key-lambda-x-x1</a><br><a href="https://blog.csdn.net/u010758410/article/details/79737498" target="_blank" rel="noopener">https://blog.csdn.net/u010758410/article/details/79737498</a></p><p><img src="/images/conan.gif" alt="akb48" title="灰原哀模仿柯南"></p>]]></content>
    
    <summary type="html">
    
      这样就可以更加轻松的排列列表元素了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="enumerate" scheme="http://yoursite.com/tags/enumerate/"/>
    
      <category term="列表加工" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8%E5%8A%A0%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之八</title>
    <link href="http://yoursite.com/2018/12/10/%E4%BB%8Echeckbox%E9%87%8C%E5%BE%97%E5%88%B0%E4%BC%A0%E5%85%A5%E5%80%BC/"/>
    <id>http://yoursite.com/2018/12/10/从checkbox里得到传入值/</id>
    <published>2018-12-10T12:25:59.000Z</published>
    <updated>2018-12-13T01:48:14.139Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</a></p><h2><span id="需求说明以及实现思路">需求说明以及实现思路</span></h2><p>之前在Django实现了输入文本然后通过ajax传递参数到后端执行脚本并且返回结果的效果。这一次要实现的是“多选框选中对应的选项然后提示确认，最后给后台执行命令”。</p><p>多选框在实际的页面里很常见，这一次要实现的效果如图：<br><img src="/images/django31.gif" alt="akb48"></p><p>要想在django的<code>views.py</code>里获取到<code>checkbox</code>的选择项，如果用表单方法很简单，只要<code>request.POST.getlist</code>就好，我尝试去用ajax去获取，但是得到的data是空值。可能是我道行不够，不过从代码简洁的角度来说还是更推荐用django的方法。</p><p>为了用户体验友好，我们一般都会在页面提交的时候加上提示的对话框，让用户再三确认。这样就要把form表单和<code>confirm()</code>对话框一起用，<font color="red">但是有一个现象要注意</font>：如果把<code>&lt;form&gt;</code>标签写到<code>&lt;button type=&quot;submit&quot;&gt;</code>下面的话，<code>comfirm()</code>时点击了“取消”，<code>return false</code>是会生效的，即停留在本页，但是form表单是无法正常传递到目的地；如果把<code>&lt;form&gt;</code>标签写到<code>&lt;button type=&quot;submit&quot;&gt;</code>上面，现在表单可以正常传递了，但是“取消”功能又不生效了—即使点击取消依旧会跳转到表单的目标地。</p><p>这种现象产生的原因是：如果函数是包含在form的submit中的话，当点击按钮的时候，在弹出<code>confirm()</code>对话框之前，有很多的js需要执行的，而大家都知道在点击按钮的时候，表单会自动提交的；所以就没有等到用户点击“取消”按钮，form表单已经提交了，自然就不会管你有没有点击”取消”了。</p><p>解决方法：只要在按钮的<code>onclick()</code>事件的方法前面加一个<code>return</code>就ok了，这样肯定会先等返回结果在提交表单了，例如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"请点击我！"</span> onclick=<span class="string">"return method()"</span>&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="具体代码">具体代码</span></h2><p><code>ecs_list.html</code>的body部分:<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span>数据库里的ECS数据展示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">ecs_deploy</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> name=prompt(<span class="string">"请输入要执行的命令：1&gt;测试连通；2&gt;部署模块并启动；"</span>,<span class="string">"1"</span>);<span class="comment">//添加一个输入框</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> userids = [];<span class="comment">//配置一个空集</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"input:checkbox[name = ecs]:checked"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;    <span class="comment">//使用循环遍历迭代的方式得到所有被选中的checkbox复选框</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">console</span>.log($(<span class="keyword">this</span>).val());</span></span><br><span class="line"><span class="javascript">                                userids.push( $(<span class="keyword">this</span>).val() ); <span class="comment">//当前被选中checkbox背后对应的值</span></span></span><br><span class="line"><span class="undefined">                                        &#125;)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(confirm(<span class="string">"你确定要对"</span>+userids+<span class="string">"进行"</span>+name+<span class="string">"操作？"</span>))<span class="comment">//让用户再次确认</span></span></span><br><span class="line"><span class="undefined">                                &#123;</span></span><br><span class="line"><span class="javascript">                                location.href=<span class="string">"&#123;% url "</span>run_command<span class="string">" %&#125;"</span>;</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">else</span></span></span><br><span class="line"><span class="undefined">                                &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//停留在本页，没有操作</span></span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"float:left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">create_ecs</span>" %&#125;"&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>返回录入界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/k8s/run_command/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"float:left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">onclick</span>=<span class="string">"return ecs_deploy()"</span> /&gt;</span>选择服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span>//这里添加了return</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>云服务器名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>云服务器ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>内网地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>外网地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>操作系统<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>网络类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>CPU<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>内存<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>外网带宽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        &#123;% for ecs in ecss %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">&#123;&#123;ecs.name&#125;&#125;</span> <span class="attr">name</span>=<span class="string">"ecs"</span>/&gt;</span>&#123;&#123; ecs.id &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.name &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.ecsid &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.inIP &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.outIP &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.osname &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.networktype &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.CPU &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.memory &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.netwidth &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.remark &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>views.py</code>相关部分如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@csrf_exempt</span><br><span class="line">def run_command(request):</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">       id = request.POST.getlist(<span class="string">"ecs"</span>)</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(id)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       pass</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>相关部分如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'run_command/'</span>,views.run_command),</span><br></pre></td></tr></table></figure></p><p>启动django后，在<code>ecs_list.html</code>页面如动图点击要操作的选项提交即可看到效果，再配上后台数据库查询+ansible的辅助，我们就可以完成一个运维平台的部署功能啦！</p><h2><span id="点击页面直接选取">点击页面直接选取</span></h2><p>上面说的是复选框选取，如果需要直接点击就能得到值的话，那么就要用<code>click</code>函数搭配<code>this</code>来实现该效果，举个例子：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                          $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//触发一个点击的函数，点击标签范围是p</span></span></span><br><span class="line"><span class="javascript">                                     alert($(<span class="keyword">this</span>).html());<span class="comment">//this的用途就是获取当前的元素</span></span></span><br><span class="line"><span class="undefined">                                    &#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第三个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>页面效果如图：<br><img src="/images/django32.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/4359238/how-do-i-get-multiple-values-from-checkboxes-in-django" target="_blank" rel="noopener">https://stackoverflow.com/questions/4359238/how-do-i-get-multiple-values-from-checkboxes-in-django</a><br><a href="https://stackoverflow.com/questions/14460421/get-the-contents-of-a-table-row-with-a-button-click" target="_blank" rel="noopener">https://stackoverflow.com/questions/14460421/get-the-contents-of-a-table-row-with-a-button-click</a><br><a href="https://blog.csdn.net/stpeace/article/details/50816128" target="_blank" rel="noopener">https://blog.csdn.net/stpeace/article/details/50816128</a><br><a href="http://www.runoob.com/js/js-popup.html" target="_blank" rel="noopener">http://www.runoob.com/js/js-popup.html</a><br><a href="https://blog.csdn.net/qq_36769100/article/details/79173476" target="_blank" rel="noopener">https://blog.csdn.net/qq_36769100/article/details/79173476</a><br><a href="https://blog.csdn.net/qq_24018243/article/details/52316949" target="_blank" rel="noopener">https://blog.csdn.net/qq_24018243/article/details/52316949</a><br><a href="https://bbs.csdn.net/topics/320062312" target="_blank" rel="noopener">https://bbs.csdn.net/topics/320062312</a></p>]]></content>
    
    <summary type="html">
    
      后台得到从checkbox传入的值并加以提示框
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="checkbox" scheme="http://yoursite.com/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>Github如何删除掉一个commit</title>
    <link href="http://yoursite.com/2018/12/06/Github%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%8E%89%E4%B8%80%E4%B8%AAcommit/"/>
    <id>http://yoursite.com/2018/12/06/Github如何删除掉一个commit/</id>
    <published>2018-12-06T06:58:33.000Z</published>
    <updated>2018-12-06T14:34:26.014Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>写完了一个脚本，里面使用了阿里云的api，那自然也有公司的阿里云ak\sk，在调试的时候发现没问题，于是就上传到github上。传完之后一看，发现脚本里忘了删除敏感字段，连通公司的ak\sk一起被提交上去了…<br><img src="/images/github10.png" alt="akb48"></p><p>卧槽，这还得了？要是这个commit被人发现并且拷贝走了，岂不是得到了公司的ak\sk，后果不堪设想啊。但是如何在github远端删除掉一个commit呢？</p><p>先记录下这次commit之前一次正常的版本号，查询版本号也可以通过命令<code>git log -5</code>（查询最近5次提交历史）：<br><img src="/images/github11.png" alt="akb48"></p><p>得到上一次的版本号是<code>051ebceaedd6b64801aada354f921d6ea7ef0622</code>，然后<code>git reset --hard  051ebceaedd6b64801aada354f921d6ea7ef0622</code>。</p><p>然后再<code>git push origin HEAD --force</code>即可。整个过程如下：<br><img src="/images/github12.png" alt="akb48"></p><p>此时再去github上刷新commit的历史页面，发现记录已经回滚到051ebce（版本号前面7位）了，如图：<br><img src="/images/github13.png" alt="akb48"></p><p><font color="red">但是要注意！</font>如果你的代码是两个地方在上传github，比如含敏感词汇的文件是通过windows客户端上传的，但是你在某个linux服务器上进行了删除commit的操作，那么如果windows继续commit的话，是会再次提交所有的commit的(含带有机密字段的commit)，所以要把源头也就是windows里的commit也要用这个方法干掉，这样才算彻底删除。</p><p><img src="/images/unnatural.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      当你把一些不应该出现在公众的东西传到了github上...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之七</title>
    <link href="http://yoursite.com/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/04/Django制作一个密码生成器/</id>
    <published>2018-12-04T06:23:03.000Z</published>
    <updated>2018-12-05T02:53:51.985Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/</a></p><h2><span id="secrets模块">secrets模块</span></h2><p>这个<code>secrets</code>模块是<code>Python 3.6</code>才有的模块，在说它之前，先看一下<code>string.ascii_letters</code>和<code>string.digits</code>，其中<code>ascii_letters</code>是生成所有字母，即a-z和A-Z,而<code>digits</code>是生成所有数字，即0-9,如下：<br><img src="/images/django28.png" alt="akb48"></p><p>那么他俩搭配<code>secrets</code>模块就可以生成密码，代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> secrets,string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>characters = string.ascii_letters + string.digits + <span class="string">"!@#$%^&amp;*()&#123;&#125;[]~"</span>     <span class="comment">#加入特殊符号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>))    <span class="comment">#生成一个20位的随机字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password</span><br><span class="line"><span class="string">'a%45BW5bxFlN3ylr!!IE'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))     <span class="comment">#生成一个10位的随机字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password</span><br><span class="line"><span class="string">')vqRWYxgxs'</span></span><br></pre></td></tr></table></figure></p><p>看上去<code>secrets.choice</code>和<code>random.choice</code>的效果差不多，但是还是有差别的。因为<code>random</code>模块的官方文档清楚的写着<code>该模块完全不适合用作数据加密</code>，而<code>secrets</code>模块不但可以生成安全随机数还可以生成一个笃定长度的随机字符串—-可用作令牌和安全URL。</p><p>所以与<code>random</code>模块中的默认伪随机数生成器相比，我们应该优先使用<code>secrets</code>模块！</p><h2><span id="后台检验输入值合法">后台检验输入值合法</span></h2><p>之前的文章，曾经写过在django的<code>views.py</code>里判断输入值是否为空的方法，地址是<a href="https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/</a> ，但是那套方法毕竟还太粗糙。这一次我们可以通过<code>jQuery+Ajax</code>获取到值，然后进行一个具体的判断，看一下这个值是否是数字，如果不是数字就直接在页面提示“输入非法”，如果是数字，就不会提示。</p><p>思路就是先获取到前端传来的值，然后在<code>views.py</code>里增加一个定义，如果值满足定义，就不会有动静，如果值不满足，那么就局部刷新一个页面。</p><h2><span id="具体代码">具体代码</span></h2><p>路由文件<code>urls.py</code>部分如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开头略</span><br><span class="line">   path(r<span class="string">'mkpasswd/'</span>,views.make_passwd,name=<span class="string">'mkpasswd'</span>),</span><br><span class="line">   path(r<span class="string">'get_mkpasswd/'</span>,views.get_passwd,name=<span class="string">'get_passwd'</span>),</span><br></pre></td></tr></table></figure></p><p>配置文件<code>views.py</code>相关部分如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">开头略</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">import</span> secrets,string</span><br><span class="line"></span><br><span class="line">def make_passwd(request):</span><br><span class="line">   <span class="keyword">return</span> render(request,<span class="string">'mkpasswd.html'</span>)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def get_passwd(request):</span><br><span class="line">characters = string.ascii_letters + string.digits + <span class="string">"!@#$%^&amp;*()~[]&#123;&#125;=+"</span></span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">       num = request.POST.get('number',20)#这里得到的是str格式</span><br><span class="line">       if str.isdigit(num) is False:#判断是否是数字</span><br><span class="line">           <span class="keyword">return</span>  HttpResponse(<span class="string">"输入值不合法！必须是数字！"</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           result = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(int(num)))</span><br><span class="line">           <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       pass</span><br></pre></td></tr></table></figure></p><p>前端页面<code>mkpasswd.html</code>如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">'base.html'</span> %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        创建密码</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &lt;h2&gt;创建密码&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h3&gt;默认密码是20位，并且带有特殊符号&lt;/</span>h3&gt;</span><br><span class="line">                密码长度：&lt;input type=<span class="string">"text"</span> id=<span class="string">"number"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>生成密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;script&gt;</span><br><span class="line">                        $(document).ready(function()&#123;</span><br><span class="line">                                $("button").click(function()&#123;  </span><br><span class="line">                                var word=document.getElementById('number').value //获取输入框的值</span><br><span class="line">                                        $.ajax(&#123;</span><br><span class="line">                                        type:"POST",</span><br><span class="line">                                        url:"&#123;% url "get_passwd" %&#125;",              </span><br><span class="line">                                        data:&#123;number:word&#125;,         //传递参数</span><br><span class="line">                                        success:function(result)&#123;$("#ask").html(result);&#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure></p><p>最后整个的过程执行效果如下：<br><img src="/images/django29.gif" alt="akb48"></p><h2><span id="前端检验输入值合法">前端检验输入值合法</span></h2><p>俗话说得好，人生不折腾不舒服斯基。为了更好的体验，现在改一下方略：在用户输入的时候，页面要随时的判断输入值，有错误就直接提醒，这样就不用在提交的时候才告诉用户“输入值非法”了，但是这样的需求就需要更改判断逻辑—-把判断的任务交给<code>jQuery</code>而不是后台，<code>jQuery</code>判断成功了，再把值提交到后台。</p><p>要在输入的时候随时判断，那么就要使用<code>jQuery</code>的<code>keydown</code>功能，然后再配上<code>each</code>功能进行遍历。<code>each</code>的用法是<code>$(selector).each(function(index,element))</code>，这里<code>index</code>是选择器的<code>index</code>位置,而<code>element</code>是当前的元素，这两个元素都是必须的！</p><p>那么只需要更改的是<code>mkpasswd.html</code>，内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &lt;h2 style=<span class="string">"text-align:center;"</span>&gt;创建密码&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock %&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#123;% block content %&#125;</span></span><br><span class="line"><span class="regexp">                &#123;% csrf_token %&#125;</span></span><br><span class="line"><span class="regexp">&lt;div style="text-align:center;"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h2&gt;创建密码&lt;/</span>h2&gt;<span class="comment">//增加了居中效果</span></span><br><span class="line">                &lt;h3&gt;默认密码是<span class="number">20</span>位，并且带有特殊符号&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;密码长度：&lt;input style="margin: 5px; padding: 10px;" type="text" id="number" /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>//调整输入框的长宽</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">id</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>//这里是警告出现的位置</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> &gt;</span>生成密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//这里是结果出现的位置</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;script&gt;</span><br><span class="line">                        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                $(<span class="string">"#number"</span>).bind(<span class="string">'keydown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//输入就开始检查</span></span><br><span class="line">                                $(<span class="string">'input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,n</span>)</span>&#123;<span class="comment">//进行遍历</span></span><br><span class="line">                                        <span class="keyword">var</span> isnum = n.value.match(<span class="regexp">/^\d+$/g</span>);<span class="comment">//匹配正则表达式，是否是数字</span></span><br><span class="line">                                        <span class="keyword">if</span>(<span class="literal">null</span> != isnum)&#123;                                                </span><br><span class="line">$(n).css(<span class="string">'border'</span>,<span class="string">'2px solid green'</span>);   <span class="comment">//是数字，边框变为绿色</span></span><br><span class="line">                                                <span class="built_in">document</span>.getElementById(<span class="string">"error"</span>).innerText=<span class="string">""</span>;</span><br><span class="line">                                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                                $(n).css(<span class="string">'border'</span>,<span class="string">'2px solid red'</span>);     <span class="comment">//不是数字，边框变为红色作为警告                                           </span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"error"</span>).innerText=<span class="string">"输入值必须是数字！"</span>;</span><br><span class="line">                                                &#125; </span><br><span class="line">                                                &#125;);</span><br><span class="line">                                               &#125;);</span><br><span class="line">                                $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//配置点击动作</span></span><br><span class="line">                                <span class="keyword">var</span> word=<span class="built_in">document</span>.getElementById(<span class="string">'number'</span>).value <span class="comment">//获取输入框的值</span></span><br><span class="line">                                        $.ajax(&#123;</span><br><span class="line">                                        type:<span class="string">"POST"</span>,</span><br><span class="line">                                        url:<span class="string">"&#123;% url "</span>get_passwd<span class="string">" %&#125;"</span>,              </span><br><span class="line">                                        data:&#123;<span class="attr">number</span>:word&#125;,         <span class="comment">//传递参数！！！！ </span></span><br><span class="line">                                        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;$(<span class="string">"#ask"</span>).html(result);&#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure></p><p>整改之后的效果如下：<br><img src="/images/django30.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/" target="_blank" rel="noopener">http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/</a><br><a href="https://www.cnblogs.com/yyds/p/7072492.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyds/p/7072492.html</a><br><a href="http://qindongliang.iteye.com/blog/2147336" target="_blank" rel="noopener">http://qindongliang.iteye.com/blog/2147336</a><br><a href="https://segmentfault.com/q/1010000002760528" target="_blank" rel="noopener">https://segmentfault.com/q/1010000002760528</a></p>]]></content>
    
    <summary type="html">
    
      开启随时检查，制作一个更加友好的密码生成器页面
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之六</title>
    <link href="http://yoursite.com/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/"/>
    <id>http://yoursite.com/2018/12/03/页面局部刷新得到AES加密值/</id>
    <published>2018-12-03T02:08:14.000Z</published>
    <updated>2018-12-04T06:21:17.937Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/11/29/Django%E4%B8%8EJquery%E3%80%81Ajax%E7%9A%84%E8%81%94%E5%90%88%E8%BF%90%E7%94%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/11/29/Django%E4%B8%8EJquery%E3%80%81Ajax%E7%9A%84%E8%81%94%E5%90%88%E8%BF%90%E7%94%A8/</a></p><h2><span id="需求说明以及实现思路">需求说明以及实现思路</span></h2><p>原来通过前端输入值到后台脚本执行结果再反回页面是这样的：<br><img src="/images/django24.gif" alt="akb48"></p><p>现在接触了<code>jQuery+ajax</code>，那么就可以使用<code>局部刷新</code>来让界面变的更加友好。</p><p>我们在页面里配置了<code>ajax</code>，也要在<code>views.py</code>里配置<code>request.POST.get</code>，但是要注意，执行顺序是先执行<code>ajax</code>后执行<code>request.POST.get</code>，也就是说<code>request.POST.get</code>得到的是<code>ajax</code>加工过的值。如果是json字符串，就加一个<code>dataType:&#39;json&#39;</code>说明一下。</p><p>如果是一般的form表单形式，那么ajax的data部分可以这么写：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: &#123;</span><br><span class="line">        limit: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    type: 'post',</span><br><span class="line">    dataType: 'json'</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>如果是直接发送一个json字符串到服务器，那么就要这么写：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: JSON.stringify(&#123;</span><br><span class="line">        limit: 10</span><br><span class="line">    &#125;),</span><br><span class="line">    type: 'post',</span><br><span class="line">    dataType: 'json',</span><br><span class="line">    contentType: 'text/plain'</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>更多的使用方法可以去<a href="https://www.haorooms.com/post/jquery_ajax_wg" target="_blank" rel="noopener">https://www.haorooms.com/post/jquery_ajax_wg</a> 观摩一番。</p><h2><span id="具体代码">具体代码</span></h2><p>前端文件<code>encrypt.html</code>内容如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        AES加密</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>AES加密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>//将原来的form都取消了</span><br><span class="line">                要加密的字段：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'word'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>查询加密结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这里是结果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//设定id=ask，那么下面也要说明ask的div是要被局部刷新的</span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> keyword=<span class="built_in">document</span>.getElementById(<span class="string">'word'</span>).value <span class="comment">//获取输入框的值，即name</span></span></span><br><span class="line"><span class="javascript">                                        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                                        type:<span class="string">"POST"</span>,<span class="comment">//指定方法是POST，如果不说明就是GET</span></span></span><br><span class="line"><span class="javascript">                                        url:<span class="string">"&#123;% url "</span>get_encrypt<span class="string">" %&#125;"</span>,   <span class="comment">//目标url就是get_encrypt函数结果          </span></span></span><br><span class="line"><span class="javascript">                                        data:&#123;<span class="attr">word</span>:keyword&#125;,         <span class="comment">//规定name等于上面那个id，然后传递参数给django的views.py </span></span></span><br><span class="line"><span class="javascript">                                        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;$(<span class="string">"#ask"</span>).html(result);&#125;<span class="comment">//返回get_encrypt函数结果</span></span></span><br><span class="line"><span class="undefined">                                        &#125;);</span></span><br><span class="line"><span class="undefined">                                &#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>对应的部分如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(r<span class="string">'encrypt/'</span>,views.encrypt,name=<span class="string">'encrypt'</span>),</span><br><span class="line">path(r'get_encrypt/',views.get_encrypt,name='get_encrypt'),#这个是展示结果对应的函数</span><br></pre></td></tr></table></figure></p><p><code>views.py</code>对应的部分如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">默认部分略</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">'encrypt.html'</span>)<span class="comment">#请求encrypt就是展示encrypt.html页面</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt#POST不检查csrf，正式环境不要这么用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_encrypt</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        word = request.POST.get(<span class="string">'word'</span>)<span class="comment">#获取到name值，这个name是ajax加工过的</span></span><br><span class="line">        result = (<span class="string">"加密的结果是："</span>+list(subprocess.getstatusoutput(<span class="string">"java -jar /yunwei/AES/aesEncrpt.jar "</span>+ word))[<span class="number">1</span>].split(<span class="string">"="</span>)[<span class="number">1</span>])<span class="comment">#这里执行java的命令得到结果</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>启动django之后，打开对应的页面，效果如下：<br><img src="/images/django26.gif" alt="akb48"></p><p>而<code>Request Headers</code>部分如下：<br><img src="/images/django27.png" alt="akb48"></p><h2><span id="input标签id与name的区别">input标签id与name的区别</span></h2><p>最简单的说明：id就像是一个人的身份证号码，而name就像是他的名字，id显然是唯一的，而name是可以重复的，checkbox和radio都可以用name。id要符合标识的要求，比如大小写敏感，最好不要包含下划线（因为不兼容CSS）。而name基本上没有什么要求，甚至可以用数字。</p><p>如果在<code>reset</code>便签里这么写的话，重置功能将不会生效，因为<code>id=&quot;reset&quot; name=&quot;reset&quot;</code>，所以请极力避免用reset作为关键词。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"reset"</span> id=<span class="string">"reset"</span> name=<span class="string">"reset"</span> value=<span class="string">"Reset"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>更多的区别可以看<a href="https://stackoverflow.com/questions/7470268/html-input-name-vs-id" target="_blank" rel="noopener">https://stackoverflow.com/questions/7470268/html-input-name-vs-id</a> 。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/mingliangniwo/article/details/45533201" target="_blank" rel="noopener">https://blog.csdn.net/mingliangniwo/article/details/45533201</a><br><a href="https://thief.one/2017/09/14/3/" target="_blank" rel="noopener">https://thief.one/2017/09/14/3/</a><br><a href="https://www.haorooms.com/post/jquery_ajax_wg" target="_blank" rel="noopener">https://www.haorooms.com/post/jquery_ajax_wg</a><br><a href="http://www.cnblogs.com/birdshome/archive/2005/01/31/99562.html" target="_blank" rel="noopener">http://www.cnblogs.com/birdshome/archive/2005/01/31/99562.html</a></p>]]></content>
    
    <summary type="html">
    
      实现页面的局部刷新
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
</feed>
