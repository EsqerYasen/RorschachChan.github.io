<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-23T03:28:43.461Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql清除磁盘碎片</title>
    <link href="http://yoursite.com/2018/01/23/mysql%E6%B8%85%E9%99%A4%E7%A3%81%E7%9B%98%E7%A2%8E%E7%89%87/"/>
    <id>http://yoursite.com/2018/01/23/mysql清除磁盘碎片/</id>
    <published>2018-01-23T02:44:23.000Z</published>
    <updated>2018-01-23T03:28:43.461Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="任务背景">任务背景</span></h2><p>接到金山云报警短信，说某数据库的容量已经达到了90%的水位线，于是登陆控制台查看详细情况。</p><p>在控制台首先发现，每一天的磁盘容量的确有所波动，那么就证明开发人员写的“资源回收”模块是在正常运行的，如图：<br><img src="/images/suipian3.png" alt="paradin"></p><p>那么就说明没有什么数据是可以删的，既然删不掉多余的数据又不想多掏钱扩磁盘容量，只能从“磁盘碎片”下手了。而<code>InnoDB</code>引擎清理磁盘碎片的命令就是<code>OPTIMIZE</code>。</p><h2><span id="具体操作">具体操作</span></h2><p>首先我先查询一下所有的“磁盘碎片情况”，使用语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CONCAT(TABLE_SCHEMA,<span class="string">'.'</span>,TABLE_NAME) <span class="keyword">as</span> 数据表名,concat(truncate(sum(DATA_LENGTH+DATA_FREE+INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> total_size, concat(truncate(sum(DATA_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> data_size,concat(truncate(sum(DATA_FREE)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">as</span> data_free, concat(truncate(sum(INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span>,<span class="number">2</span>),<span class="string">'MB'</span>) <span class="keyword">as</span> index_size <span class="keyword">from</span> information_schema.tables group by TABLE_NAME order by data_length desc;</span><br></pre></td></tr></table></figure></p><p>或者使用<code>select table_schema, table_name, data_free, engine from information_schema.tables where table_schema not in (&#39;information_schema&#39;, &#39;mysql&#39;) and data_free &gt; 0;</code>也可以，这个是查询<code>data_free</code>大于0的所有表。</p><p>然后看到我这个叫<code>history_device_flow_month</code>的表里情况如下：<br><img src="/images/suipian1.png" alt="paradin"></p><p>表里的<code>data_free</code>就是磁盘碎片的量，比如我现在要干掉<code>history_device_flow_day</code>里所有的磁盘碎片，是952MB，于是先查询一下这个<code>history_device_flow_day</code>的存储引擎，使用语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status <span class="keyword">from</span> jsonlinefssrds where name=<span class="string">'history_device_flow_day'</span>;</span><br></pre></td></tr></table></figure></p><p>上面语句里的<code>jsonlinefssrds</code>是对应的数据库，看到的效果如下：<br><img src="/images/suipian4.png" alt="paradin"></p><p>存储引擎是<code>InnoDB</code>，那么就可以启动清除碎片的语句了：<code>OPTIMIZE TABLE 数据表表名;</code>，因为<code>OPTIMIZE TABLE</code>只对<code>MyISAM</code>、<code>BDB</code>和<code>InnoDB</code>表起作用。</p><p>再执行了<code>OPTIMIZE TABLE history_device_flow_day;</code>之后，大约9分钟，就会看到“OK”的字样：<br><img src="/images/suipian5.png" alt="paradin"></p><p>估计有的朋友会问，那上面不是明明写了“Table does not support optimize, doing recreate + analyze instead”吗？这个其实无妨，实际上磁盘碎片已经被清除掉了。我们可以再用一次查询磁盘碎片的命令看一下，如图：<br><img src="/images/suipian2.png" alt="paradin"></p><p>的确释放了900M。</p><p>或者使用<code>ALTER TABLE 表名 ENGINE = Innodb;</code>（只是<code>InnoDB</code>的表可以这么做）来达到清理磁盘碎片的目的，这个命令表面上看什么也不做,实际上是重新整理碎片了。当执行优化操作时,实际执行的是一个空的<code>ALTER</code>命令,但是这个命令也会起到优化的作用,它会重建整个表,删掉未使用的空白空间。</p><h2><span id="补充">补充</span></h2><p>为什么会产生磁盘碎片？那是因为某一个表如果经常插入数据和删除数据，必然会产生很多未使用的空白空间，这些空白空间就是不连续的碎片，这样久而久之，这个表就会占用很大空间，但实际上表里面的记录数却很少，这样不但会浪费空间，并且查询速度也更慢。</p><p><font color="red">注意！<code>OPTIMIZE</code>操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作。</font>所以把<code>OPTIMIZE</code>命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响。比较好的方式就是做个shell,定期检查mysql中 <code>information_schema</code>.<code>TABLES</code>字段,查看<code>DATA_FREE</code>字段,大于0的话,就表示有碎片，然后启动脚本。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://pengbotao.cn/mysql-suipian-youhua.html" target="_blank" rel="noopener">http://pengbotao.cn/mysql-suipian-youhua.html</a><br><a href="http://irfen.me/mysql-data-fragmentation-appear-and-optimization/" target="_blank" rel="noopener">http://irfen.me/mysql-data-fragmentation-appear-and-optimization/</a></p>]]></content>
    
    <summary type="html">
    
      InnoDB使用的Clustered Index,索引和数据绑定在一起,重排序是不现实的。所以不支持MyISAM式的OPTIMIZE,而是绑定到了ALTER TABLE命令上面。可以通过执行以下语句来整理碎片,提高索引速度
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>一道传说中是百度面试的shell试题</title>
    <link href="http://yoursite.com/2018/01/23/%E4%B8%80%E9%81%93%E4%BC%A0%E8%AF%B4%E4%B8%AD%E6%98%AF%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E7%9A%84shell%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/23/一道传说中是百度面试的shell试题/</id>
    <published>2018-01-23T01:37:31.000Z</published>
    <updated>2018-01-23T01:45:15.170Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>【问题】<font color="blue">写脚本实现，可以用shell、perl等。把文件b中有的，但是文件a中没有的所有行，保存为文件c，并统计c的行数。</font><br>翻译成人话就是，假设有一个文件a是:<br>a<br>b<br>c<br>d</p><p>文件b是:<br>1<br>2<br>3<br>4<br>a<br>b</p><p>现在要求输出“b有a没有”的行，即1 2 3 4，然后<code>wc -l</code>一下。</p><p>【思路】两个文件比较，第一想法就是<code>diff</code>，但是<code>diff</code>无论是<code>-c</code>还是<code>-y</code>会牵扯进大量的<code>&gt; &lt; + -</code>不说，而且diff命令是直白对比，即使字母相同但所在行不同，也会被<code>diff</code>记录。如果再用<code>for in</code>语句然后一项一项对比也不会很清晰的解决这个问题，所以要换个方法。</p><p>第二个方法就是<code>comm</code>命令，但是这个命令有一个前提，就是要<code>sort</code>排序，<code>comm</code>比<code>diff</code>高明之处在于它只比较内容而不在意是否同一行，但是要注意对比文件的先后。<code>comm -12 a b</code>是找”a和b都有”的项，<code>comm -23 a b</code>就是找”a有而b没有”。</p><p>【解答】perl我不会，我就用shell写：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#written by ChrisChan @ 2016-4-21</span><br><span class="line">sort a.txt&gt;a1.txt        #排序，不然会有提示</span><br><span class="line">sort b.txt&gt;b1.txt</span><br><span class="line">comm -23 b1.txt a1.txt &gt;c.txt    #由于是要找b有a没有的,就要b写在前，a写在后</span><br><span class="line">echo $(cat c.txt|wc -l)</span><br></pre></td></tr></table></figure></p><p>其实还有一个更简单的，只用一句话:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v -x b.txt -f a.txt|wc -l</span><br></pre></td></tr></table></figure></p><p>很多书上不写<code>grep -x -f</code>的意思，这里补一下：<br><code>-f</code>:指定范本文件，其内容含有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每列一个范本样式。<br><code>-x</code>:只显示全列符合的列。</p><p>从一个题就能轻松看出shell的能力级别，用diff死纠缠就是初级，用comm就是中级，而grep就是高级。的确是一个好题。</p><p>【补充】如果考python，求这种类似“你有我没有”的东西，用set里面的差集算法。<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;A=&#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>&#125;</span><br><span class="line">&gt;&gt;&gt;B=&#123;<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>&#125;</span><br><span class="line">&gt;&gt;&gt;print(A-B)</span><br><span class="line">set([1,2])    #A有B没有</span><br><span class="line">&gt;&gt;&gt;print(A ^ B)</span><br><span class="line">set([1,2,5,6])  #差集的补集</span><br><span class="line">&gt;&gt;&gt; A&amp;B</span><br><span class="line">&#123;3, 4&#125;    #交集</span><br><span class="line">&gt;&gt;&gt; A|B</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;    #全集</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      comm命令、diff命令和grep命令
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="面试经验" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>解决Zabbix在web界面中文显示的问题</title>
    <link href="http://yoursite.com/2018/01/22/%E8%A7%A3%E5%86%B3Zabbix%E5%9C%A8web%E7%95%8C%E9%9D%A2%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/22/解决Zabbix在web界面中文显示的问题/</id>
    <published>2018-01-22T03:31:40.000Z</published>
    <updated>2018-01-22T04:42:32.036Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><font color="red">注意！这个是解决web界面中文显示乱码的问题，不是zabbix web界面全中文汉化的问题。</font><h2><span id="22版本的处理方法">2.2版本的处理方法</span></h2><p>zabbix里给host或者item等项目起中文名字的时候，可能在graph上无法正确显示中文字符，如图：<br><img src="/images/zabbixchinese1.jpg" alt="paradin"></p><p>那么遇到这样的情况其实很简单，就是zabbix的web界面没有安装中文字库的问题，那就对症下药，下载中文字库。</p><p>中文字库的下载地址在这里：<code>http://linux.linuxidc.com/2012%E5%B9%B4%E8%B5%84%E6%96%99/11%E6%9C%88/22%E6%97%A5/Zabbix%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</code> ，下载“LinuxIDC.com下载-kaiti.tar.gz”。</p><p>后把这个文件改一下名，可能很多linux不识别那个中文字“下载”,<code>mv LinuxIDC.com下载-kaiti.tar.gz kaiti.tar.gz</code>，<code>tar -zxvf kaiti.tar.gz</code></p><p>然后就会发现当前路径里生成了一个叫<code>kaiti.ttf</code>，这个就是我们所需要的中文“楷体”字体文件。</p><p>来到zabbix的web字体路径，在我的机器里，这个负责字体的文件夹叫<code>/usr/local/nginx/html/zabbix/fonts/</code>。虽然各位安装zabbix的路径各有差别，但是这个文件夹一般都是在<code>nginx or apache</code>的html下，所以很好找的。</p><p>在这个fonts文件夹里默认已经有一个叫<code>DejaVuSans.ttf</code>的文件了，于是就把这个<code>kaiti.tff</code>也放到这个文件夹下。</p><p>光有字体文件没有用，还需要在配置文件里使用这个字体文件，于是就vim一下同样在<code>nginx or apache/html/zabbix/include</code>的<code>defines.inc.php</code>。把里面所有的<code>DejaVuSans</code>替换成<code>kaiti</code>，.<code>tff</code>这个后缀是不用加的。然后保存退出，重新刷一下界面就看到效果了。</p><p>vim的替换语句 :<code>%s/DejaVuSans/kaiti/g</code><br><img src="/images/zabbixchinese2.png" alt="paradin"></p><p><img src="/images/zabbixchinese3.png" alt="paradin"></p><h2><span id="3x版本的处理方法">3.x版本的处理方法</span></h2><p>现在zabbix已经升级到3.x了，上述的方法已经失效了，这里记录一下新的中文配置方法。</p><p>首先从windows里，拷贝一个中文字体的文件到zabbix的服务器的<code>/usr/share/zabbix/fonts</code>文件夹里，比如我先择了“楷体”，这个文件叫<code>simkai.ttf</code>，<code>chmod +x simkai.ttf</code> 给予可执行权限。<br><img src="/images/zabbixchinese4.png" alt="paradin"></p><p>然后<code>vim /usr/share/zabbix/include/defines.inc.php</code>，修改两处地方，分别是第四十五行，把原来的改成<code>simkai</code>，如图：<br><img src="/images/zabbixchinese5.png" alt="paradin"></p><p>还有一处就是第九十三行，也是改成<code>SIMKAI</code>：<br><img src="/images/zabbixchinese6.png" alt="paradin"></p><p>保存文件之后，刷新一下zabbix界面即可。</p>]]></content>
    
    <summary type="html">
    
      我知道你懂英语，但是你的领导们未必懂啊....
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="运维与监控" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E4%B8%8E%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>防盗链的等等相关</title>
    <link href="http://yoursite.com/2018/01/22/%E9%98%B2%E7%9B%97%E9%93%BE%E7%9A%84%E7%AD%89%E7%AD%89%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/01/22/防盗链的等等相关/</id>
    <published>2018-01-22T01:48:38.000Z</published>
    <updated>2018-01-22T02:27:02.701Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="为什么网站们都要限制流量">为什么网站们都要限制流量？</span></h2><p>无论是网站服务器亦或是游戏服务器还是邮件服务器，说穿了也是一台电脑，也有CPU和内存。只不过服务器的CPU功能比个人电脑的CPU功能强大，比如个人电脑的CPU一秒钟能算1亿个数，那么服务器的CPU一秒钟就能算十亿个数。毕竟个人电脑只针对个人，但是服务器是要“接客”的，有了强大的硬件做后盾，网页/游戏/邮箱才不会那么轻易的Down掉。</p><p>但是CPU不是人类大脑，人脑是越用越聪明，CPU是越用越磨损，毕竟始终在连电的环境下。于是乎，没有必要的运算能省就省，一个人省一次，十万个人就省十万次，一千万个人就省一千万次，这样达到积少成多的目的。</p><p>CPU计算的是各种数据，而这些数据也叫作流量。有用的流量、有价值的流量通过CPU计算无可厚非，但是出现了没有用的流量或者是别人盗用我们的资源，那么这种情况能避免都要避免。什么叫盗用我们的资源，比如自己网站（网站A）上的图片或者视频，被其他人直接复制网站然后粘贴到他们的主页（网站B）上，其他用户登录了B网站，然后点击了那个图片和视频，由于是网址重链接，里外里提供数据的还是我们的服务器。也就是说B网站就是一个中介，而真正提供服务的是网站A，但是广告费和点击率都要网站B赚走了，这事儿实在是叔可忍婶不可忍。</p><h2><span id="什么是盗链如何发现被盗链">什么是盗链？如何发现被盗链？</span></h2><p>什么叫盗链，上面已经说的差不多了，如果上面的文字没有看懂的话，举个例子，如果您看到了这两个图片，证明这个网站就是在盗链。<br><img src="/images/daolian1.jpg" alt="paradin"></p><p><img src="/images/daolian2.jpg" alt="paradin"><br>这两个就是一个盗取的是QQ空间的图片，另一个就是百度的图片。用其他网站的图片这事儿本身是无所谓的，只要不涉及版权问题，都希望自己的作品能广泛传播，但是请不要直接通过网址重定向，厚道一点的行为应该是：“图片另存为”，然后到目标网站上去重新上传一下。</p><p>这里再多说一点网站的基础知识。</p><p>PV值：<code>PV=page view</code>，网站是有少则一个网页多则N多网页组成的一个整体，PV值就是统计用户访问网站的总页数。比如www.JQK.com这个网站，今天有100个用户登录，平均每个用户翻阅了里面5个网页。那么这个网站的PV值就是500。若一个IP地址，对一个页面刷新10000次，PV值也是1.要查询网站的PV值登陆<code>http://www.alexa.cn</code>就行。</p><p>Hit值：这个就是对网页里每个元素的点击量，一个网页里的图片就是一个元素，一个flv文件也是一个元素，一首歌曲也是一个元素。这些的总量就是hit值，hit值越高就证明这个网站被人查看的情况越高，那么也证明网站的高人气，那么自然广告也会卖出去很多钱。</p><p>因为建网站这事儿关心到了金钱利益，网站越被人关注，自然价值也越大。于是会有一个公式来评判网站的“每日贡献”：<code>总流量=访问流量+下载流量= Page view值 x 页面大小+下载文件大小 x 下载次数</code></p><p>作为管理者，每天观察一下自己一亩三分地儿的网站数据情况是本职工作。但是有时候也会遇到网站流量很惊人的情况，一般来说，网站流量过大（CPU运转很多）的原因如下：</p><p>1）网站是一个很大的网站：比如说淘宝，京东，网易，youtube,facebook那种大网站，里面成万上亿的网页，而且每天又有那么多人登陆，自然浏览量很大。虽然这些大集团的服务器也是少则几千，多则上万，甚至在不同地区也会有不少的服务器集群，但是这几万台服务器需要提供的数据会很多也是不争的事实。这种现象是正常的。</p><p>2）网页内容太大：可能本身网站是一个小网站，加起来也就十页二十页的内容，但是每一天的流量依旧很惊人，那么很有可能是单页或者某几页的字节太大。比如网页里有太多的图片，太多的视频，太多的其他链接，也有可能是前端码农们给这个网页的规划不合理。导致这个网页每一次被点击都要大费周折（hit值和PV值不高，但是日流量很高），长此以往不仅会耽误用户的整体体验，对服务器也是一个重大伤害。</p><p>3）搜索引擎产生了大量的数据流量：网站需要推广，于是就在各种搜索引擎上打广告，也有自己网站的很多图片用于外部调用。这样的结果就是本身来观摩网站的人很少，但是“借着引擎经过”的人很多，所以就会有PV值不高，但是Hit值和日流量很高的现象出现。</p><p>4）图片或者其他元素被盗链：第一部分就说过了，别人拿我们的图片去吸引别人关注，然后别人想要深入了解，还要来使用我们的服务器去提供详细数据。这种“用我们的牌子住我们的房，吃我们的饭却不给我们钱”的现象实在应该被弄死。这种现象的特征也是PV值不高（没人真正点击网站），但是Hit值和日流量很大（自己服务器的数据都给别的网站提供了）。</p><p>5）网站被DDos攻击了：被一些恶意的IP地址频繁登陆，来回的刷流量。这样迫使CPU做出运算的行为其实就是在远程的破坏服务器的硬件CPU，遇到这种现象，之前Nginx文章里有写，要么通过access.log找到这些IP封掉，要么就在配置文件里加上限制<code>limit-rate</code>。</p><h2><span id="服务器是如何知道图片是从站外而来的呢">服务器是如何知道图片是从站外而来的呢？</span></h2><p>在http协议里有一个重要的选项叫refer，这个选项的内容就是该元素的来源地址。如果这个元素是服务器自己提供的，那么头文件里是没有refer这个选项的。通过refer这个信息，我们也可以知道登陆网站的客户是从哪个网站点击链接而来的。这样方便进行一个统计和规划。</p><p>假如，我在QQ空间里面发现一个图，然后右键图片，选择”在新标签栏里打开图片”，这时候通过浏览器“审查元素”的功能，能查查看请求头信息和响应头信息，发现响应头信息里多了一个refer，里面的内容就是图片的源地址：<br><img src="/images/daolian3.jpg" alt="paradin"></p><p>我在QQ空间里看腾讯的照片自然是可以的，但是如果我在别的网站里看腾讯的照片，加重了腾讯服务器的负担，自然腾讯公司会不满意。于是腾讯服务器发现当前要引用这个图片的地址与refer头信息不是一个来源之后，就不会把这个图片的数据传送过来，于是就看到那个“此图片来自QQ空间，未经准许不可饮用”的警告图片。</p><p>既然知道了服务器是如何判断文件是否盗链，那么只要伪装一个refer就可以欺骗服务器达到“反防盗链”的目的了。至于这部分，可以自己单独研究。<br>如何使用Nginx反盗链？</p><p>同样的使用<code>Nginx.conf</code>，在http的大括号下面，新建一个location，加入如下信息：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location</span><br><span class="line">~ .*\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv)$ &#123;</span><br><span class="line">#指定对以上几种类型的文件建立防盗链</span><br><span class="line">    valid_referers</span><br><span class="line">none blocked *.alala.com alala.com;</span><br><span class="line">#盗链的范围不包括alala.com和alala.com下的二级网站，</span><br><span class="line">     <span class="keyword">if</span></span><br><span class="line">($invalid_referer)</span><br><span class="line"> &#123;</span><br><span class="line">     #rewrite</span><br><span class="line"> ^<span class="regexp">/ http:/</span><span class="regexp">/www.alala.com/</span>error.html;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line"><span class="number">403</span>;</span><br><span class="line">#如果发现有引用以上文件的地址与refer头信息不符的情况，直接重定向成error.html这个网页，服务器返回403，forbidden。</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="使用第三方模块ngx_http_accesskey_module实现nginx防盗链">使用第三方模块ngx_http_accesskey_module实现Nginx防盗链</span></h2><p>实现方法如下：</p><ol><li>下载NginxHttpAccessKeyModule模块文件：<code>http://wiki.nginx.org/File:Nginx-accesskey-2.0.3.tar.gz</code>；</li><li>解压此文件后，找到nginx-accesskey-2.0.3下的config文件。编辑此文件：替换其中的<code>$HTTP_ACCESSKEY_MODULE</code>为<code>ngx_http_accesskey_module</code>；</li><li><p>用一下参数重新编译nginx：<br> ./configure –add-module=Nginx目录/to/nginx-accesskey<br>然后执行: <code>make &amp;&amp; make install</code></p></li><li><p>修改nginx的conf文件，添加以下几行：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">  accesskey on;</span><br><span class="line">  accesskey_hashmethod md5;</span><br><span class="line">  accesskey_arg <span class="string">"key"</span>;</span><br><span class="line">  accesskey_signature <span class="string">"mypass$remote_addr"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中：<br>1.accesskey为模块开关；<br>2.accesskey_hashmethod为加密方式MD5或者SHA-1；<br>3.accesskey_arg为url中的关键字参数；<br>4.accesskey_signature为加密值，此处为mypass和访问IP构成的字符串。</p>]]></content>
    
    <summary type="html">
    
      捍卫自己的图片合法权利！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="网络相关" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录一次配置http跳转https的过程</title>
    <link href="http://yoursite.com/2018/01/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%85%8D%E7%BD%AEhttp%E8%B7%B3%E8%BD%AChttps%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/18/记录一次配置http跳转https的过程/</id>
    <published>2018-01-18T09:33:31.000Z</published>
    <updated>2018-01-22T02:35:54.038Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>公司最近搞了一个数据运营平台，这个平台会以web界面的形式把各个数据展示出来，这个项目是我们一个经理的重点关照项目。把平台模块部署完毕并且启动之后，又把这个平台服务器的外网IP绑定到<code>alkaid.lechange.com</code>这个域名上，在浏览器里输入<code>https://alkaid.lechange.com</code>,就看到了前端同行们写的网页。</p><p>但是我们的霸气经理说这样不行，说要更多要求更高标准更好体验，于是乎提出一个需求就是：<font color="blue">在输入<code>alkaid.lechange.com</code>的时候会自动跳转到<code>https://alkaid.lechange.com</code>。</font></p><p>既然如此，我们就在nginx上原有的<code>nginx.conf</code>里补充几个配置文件：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include upstream</span><br><span class="line">include upstream.conf;</span><br><span class="line"># include servers</span><br><span class="line">include alkaid.conf;</span><br><span class="line">include alkaid-https.conf;</span><br></pre></td></tr></table></figure></p><p>这样在执行<code>nginx.conf</code>的时候，就会调用<code>upstream.conf</code>、<code>alkaid.conf</code>和<code>alkaid-https.conf</code>，我们主要看一下这三个文件。</p><p>alkaid.conf文件如下：<br>    ```js<br>    server {<br>        listen 80;<br>        server_name *.lechange.com;<br>        proxy_buffering off;<br>        location / {<br>                rewrite ^/ <a href="https://alkaid.lechange.com" target="_blank" rel="noopener">https://alkaid.lechange.com</a> permanent;<br>                client_max_body_size 100m;<br>            }<br>    }</p><p>这里我们监听了80端口，下面那个<code>client_max_body_size 100m</code>是用来设定<code>nginx+php</code>上传文件的大小，这里规定是100m，这个可以写进<code>nginx.conf</code>里，如果有对上传文件方面感兴趣，可以看<a href="http://www.cnblogs.com/zhwl/archive/2012/09/18/2690714.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhwl/archive/2012/09/18/2690714.html</a> 。</p><p>再来看看<code>alkaid-https.conf</code>，如下：<br>    <code>``js    server {        listen 10000;        server_name *.lechange.com;        proxy_buffering off;        location / {                proxy_pass http://alkaid_backend;                proxy_set_header   X-Real-IP        $remote_addr;                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;                proxy_redirect     off;            }    }这里监听了10000端口，location写的是</code><a href="http://alkaid_backend`,这个`alkaid_backend`是啥东西?" target="_blank" rel="noopener">http://alkaid_backend`,这个`alkaid_backend`是啥东西?</a></p><p>这个时候我们就需要看一下<code>upstream.conf</code>，里面内容是:<br>    ```js<br>    upstream alkaid_backend {<br>        server   X.X.X.X:JQK;<br>        check interval=5000 rise=2 fall=5 timeout=1000 type=tcp default_down=false;<br>    }</p><p>X.X.X.X是模块服务器的内网IP地址，而JQK是模块服务器的模块端口，这里要根据实际的情况来写。可见<code>alkaid_backend</code>对应的就是模块服务器和它的端口，下面是检查间隔等等数值。</p><p>现在我们启动<code>nginx</code>，然后把nginx的外网地址绑定去<code>alkaid.lechange.com</code>这个域名，在浏览器里输入<code>alkaid.lechange.com</code>，就会达到自动跳转的目的了！</p><p>这里要额外多说一下，我们这里设定了80的配置文件也设置了443的文件，但是这俩文件的转发过程却不同：<code>alkaid-https.conf</code>文件把443的请求转向了平台模块服务器的服务，而<code>alkaid.conf</code>文件把凡是从80端口进来的请求直接全部永久重定向到<code>https://alkaid.lechange.com</code> ，但是这个<code>alkaid.lechange.com</code>还是会去访问平台模块服务器的服务，也就是说<code>alkaid.conf</code>文件多了一步重定向。</p>]]></content>
    
    <summary type="html">
    
      有了https，不用白不用
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>将电商平台测试环境添加了域名和https</title>
    <link href="http://yoursite.com/2018/01/18/%E5%B0%86%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%B7%BB%E5%8A%A0%E4%BA%86%E5%9F%9F%E5%90%8D%E5%92%8Chttps/"/>
    <id>http://yoursite.com/2018/01/18/将电商平台测试环境添加了域名和https/</id>
    <published>2018-01-18T06:42:12.000Z</published>
    <updated>2018-01-22T02:35:56.432Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="情况描述">情况描述</span></h2><p>今天电商平台来了新的产品经理。摸了一遍情况之后，提出了两个需求，<font color="blue">第一个是要把测试环境也要上https，达到与线上一致；第二个就是测试环境要配上域名，不要再用IP地址登陆。</font></p><p>配置域名是很简单的，在阿里云的云解析上直接给测试环境新加一个域名，然后对应添加阿里云外网SLB的IP地址即可。进入页面也发现首页地址显示正常，但是再点点就发现了里面有点不对。</p><p>没错，现象就是“只有首页是域名，其他网站都是IP”，<br><img src="/images/ecstore1.jpg" alt="paradin"></p><p>遇到这个情况，我就跑去<code>nginx.conf</code>里，看一下<code>server_name</code>的配置，看到的确写得是func.lechange.com，如图：<br><img src="/images/ecstore2.png" alt="paradin"></p><p>于是就在页面上使用<code>ctrl+shift+c</code>查看具体情况，发现里面的代码是这个样的：<br><img src="/images/ecstore3.jpg" alt="paradin"></p><p>这就人赃俱获了，<strong>开发已经在html里把地址写死了，使用了绝对路径而不是相对路径</strong>，于是就打回让开发自己慢慢改。</p><p>然后又回到SLB界面，新增新的https监听，前端端口443，后端是80，搭配正确的证书，SLB保存之后，在浏览器输入测试环境的<code>https://网址</code>之后，发现整个界面全乱了，如图：<br><img src="/images/ecstore4.png" alt="paradin"></p><p>但是使用<code>http://网址</code>去访问还是正常的，如图：<br><img src="/images/ecstore5.png" alt="paradin"></p><p>很明显，这是因为https下跨协议调用http的是不行的，所以那些css、js如果不支持https的话就无法正常显示。使用<code>ctrl+shift+c</code>看错误更加明显。<br><img src="/images/ecstore6.png" alt="paradin"></p><p>遇到这个问题，就有如下几种方法：</p><p>第一种：将所有的访问路径都写死<code>https</code>，不过这个我们公司代码规范不准许;<br>第二种：去掉URL中的<code>http://</code>或<code>https://</code>，将其替换为<code>//</code>，这样，浏览器就可以根据当前页面的请求方式来动态切换了；<br>第三种：可以在<code>&lt;head&gt;</code>中添加<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code>,浏览器会在加载HTTP资源时自动替换成HTTPS请求；<br>第四种：在nginx里写一个proxy_redirect跳转，这个就比较有技术含量了；</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://thehackernews.com/2015/04/disable-mixed-content-warning.html" target="_blank" rel="noopener">https://thehackernews.com/2015/04/disable-mixed-content-warning.html</a><br><a href="https://www.tuicool.com/articles/ARVVFjI" target="_blank" rel="noopener">https://www.tuicool.com/articles/ARVVFjI</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content</a></p>]]></content>
    
    <summary type="html">
    
      一次通宵，腰疼三天...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="网络基础" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师笔试题第十四套</title>
    <link href="http://yoursite.com/2018/01/17/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A5%97/"/>
    <id>http://yoursite.com/2018/01/17/Linux运维工程师笔试题第十四套/</id>
    <published>2018-01-17T14:18:33.000Z</published>
    <updated>2018-01-22T02:28:32.792Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>这几天一边看着《nginx高性能WEB服务器详解》，一边看着基础知识。那么最容易入眼的基础知识是什么呢？当然是面试题了，于是乎就找出来一些阿里（含滴滴和蚂蚁金服）的运维面试题，以题带看。</p><p>看完之后觉得阿里真的不是盖的，面试题的质量比那些晚上乱七八糟的题质量好多了，细节抠的真是非常细。我记得曾经有一个前辈曾经说过，工作中我们经常注意一些奇淫技巧，但是忽视了基础知识的重要性，现在好多程序员不会认认真真地读本书，喜欢快餐文化，受了市面上很多培训机构的影响，这是要不得的。</p><p>最后再说一句，以下所有的题都属于“开放性”试题，可以根据基本点去发散，说出你的理解和认识。但是注意，不要避重就轻耍滑头，问A，可以发散到A1、A2…但是不要发散到X、Y、Z，然后大谈特谈XYZ，这种“小聪明”就是找死的行为。</p><h2><span id="废话到此为止上题">废话到此为止，上题</span></h2><p>1）<font color="blue">http一般是无状态的，怎么让它变成有状态的？</font><br>[我的答案]http跟IP、UDP一样都是无状态的，http的无状态意思是“每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况”。<font color="green">补充一下，TCP是有状态的，它的请求并不独立，它通过包头的一些控制字段来分别包的关系，这里可以自行脑补一下“三次握手”的图。</font></p><p>那么http是无状态的这一点是无法改变的，那么要变得“有状态”，就需要引入cookie和session，通过这两个机制去实现一个有状态的WEB应用。用一个表达式可以这么理解：<code>Web应用=http协议+session、cookies等状态机制+其他辅助的机制</code>。</p><p>2）<font color="blue">解释一下cookie和session的区别</font><br>[我的答案]Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中，session是一个抽象概念，开发者为了实现中断和继续等操作，抽象出来的一个“会话”，接上面那道题，session这个东西能不用就不要用，因为它是有状态的，服务器要维护一个有状态的东西是很消耗资源的（比如内存和空间），我估计，天猫京东那规模的电商，肯定有一个专门的session集群。</p><p>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式，cookie是一个实际存在的东西，它是在http协议中定义在header中的字段。</p><p>session的常见实现要借助cookie来发送sessionID给客户端，如果浏览器禁用cookie，那么就要通过重写url来获取sessionid，各位可以联想一下电商的购物车，购物车可以实现在一个网站的不同页面把东西都放进一个购物车，这就是session的重点应用。现在也很流行一个token，其实token和sessionid是一个意思。</p><p>3）<font color="blue">多进程和多线程的区别，自己喜欢用哪个？为什么？</font></p><p>4) <font color="blue">lvs脑裂如何解决，为什么会产生双master？双master时VIP通不通?</font></p><p>5) <font color="blue">为什么TCP比UDP的信息更加可靠？</font><br>tcp滑动窗口，详细说说原理，窗口的大小如何确定。</p><p>6) <font color="blue">cdn的工作原理。如何评估一个cdn sp做的好不好。</font><br>[我的答案]cdn的工作原理：通过权威dns服务器来实现优质节点的选择，通过缓存来减少源站的压力。</p><p>IT界有个很有名的比喻，正向代理是“找马云借钱”，反向代理是“给10086打电话”，而反向代理就是CDN的实现原理雏形的一部分。</p><p>7）<font color="blue">dns查询的过程说一下，为什么要有cname而不是直接返回一个cdn边缘节点的ip。</font></p><p>8）<font color="blue">举例说下正则表达式和扩展正则表达式例如：url、ip、邮箱的正则表达式？</font></p><p>9）<font color="blue">解释raid0、raid1、raid01、raid10、raid5、raid6，并分析各自读写性能？</font></p><p>10）<font color="blue">radi为什么不搞个raid50、raid15，不能搞是因为有什么冲突还是什么等等?</font></p><h2><span id="拓展阅读">拓展阅读</span></h2><p><a href="https://segmentfault.com/a/1190000007243675" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007243675</a><br><a href="http://mertensming.github.io/2016/10/19/cookie-session/" target="_blank" rel="noopener">http://mertensming.github.io/2016/10/19/cookie-session/</a><br><a href="https://wizardforcel.gitbooks.io/network-basic/content/index.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/network-basic/content/index.html</a><br><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11564.html</a><br><a href="https://coolshell.cn/articles/11609.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11609.html</a><br><a href="http://blog.sina.com.cn/s/blog_93b45b0f0101a4ix.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_93b45b0f0101a4ix.html</a></p>]]></content>
    
    <summary type="html">
    
      大牛之路，如此辛苦
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>实战Kibana的日志关键词搜索和日志可视化</title>
    <link href="http://yoursite.com/2018/01/17/%E5%AE%9E%E6%88%98Kibana%E7%9A%84%E6%97%A5%E5%BF%97%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%E5%92%8C%E6%97%A5%E5%BF%97%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2018/01/17/实战Kibana的日志关键词搜索和日志可视化/</id>
    <published>2018-01-17T07:44:01.000Z</published>
    <updated>2018-01-22T02:32:43.719Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="准备工作">准备工作</span></h2><p>首先，先下载一个elastic网站上下载一个它提供的demo—莎翁的《亨利四世》，下载地址是<a href="https://download.elastic.co/demos/kibana/gettingstarted/shakespeare.json" target="_blank" rel="noopener">https://download.elastic.co/demos/kibana/gettingstarted/shakespeare.json</a> 。</p><p>打开这个json字符串，里面就是《亨利四世》的话剧剧本，长得是这个样子：<br><img src="/images/kibana1.png" alt="akb48"></p><p>可以看到里面有<code>play_name</code>、<code>speaker</code>、<code>speech_number</code>、<code>line_id</code>等等名称，每个名称后面都有一个对应的值。</p><p>然后启动elasticsearch，按照上面的文件格式生成索引。语句如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http:<span class="comment">//localhost:9200/shakespeare -d '</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"mappings"</span> : &#123;</span><br><span class="line">  <span class="string">"_default_"</span> : &#123;</span><br><span class="line">   <span class="string">"properties"</span> : &#123;</span><br><span class="line">    "speaker" : &#123;"type": "string", "index" : "not_analyzed" &#125;,    #确定type是字符</span><br><span class="line">    <span class="string">"play_name"</span> : &#123;<span class="string">"type"</span>: <span class="string">"string"</span>, <span class="string">"index"</span> : <span class="string">"not_analyzed"</span> &#125;,</span><br><span class="line">    "line_id" : &#123; "type" : "integer" &#125;,    #确定type是数字</span><br><span class="line">    <span class="string">"speech_number"</span> : &#123; <span class="string">"type"</span> : <span class="string">"integer"</span> &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">';</span></span><br></pre></td></tr></table></figure></p><p>导入刚刚下载的那个json：<code>curl -XPOST &#39;localhost:9200/shakespeare/_bulk?pretty&#39; --data-binary @shakespeare.json</code></p><p>具体elasticsearch的增删改查语法可以参看阮大师的<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a> ，个人建议将elasticsearch和mysql对比一下，这样更方便理解。</p><p>然后后台启动kibana，确认5601端口已经stand by，如图：<br><img src="/images/kibana2.png" alt="akb48"></p><p>然后在浏览器地址栏输入<code>服务器外网ip：5601</code>打开kibana。</p><p>导入数据结束之后，使用<code>curl &#39;localhost:9200/_cat/indices?v&#39;</code>，去查看一下效果，如果看到index里有shakespeare那一栏就是导入成功了，如图：<br><img src="/images/kibana3.png" alt="akb48"></p><p>在启动Kibana后，Kibana会自动在配置的es中创建一个名为<code>.kibana</code>的索引（上图第二个），这个索引用来存储数据，注意！不要删除了它。</p><h2><span id="kibana的界面搜索">Kibana的界面搜索</span></h2><p>如果此时的kibana里是第一次配置的话，那么第一步就是配置新索引，我们之前在生成索引的时候写的是<code>shakespeare</code>，那么现在也写<code>shakespeare</code>，然后点击<code>create</code>，如图：<br><img src="/images/kibana4.png" alt="akb48"></p><p>然后在菜单栏左侧的<code>discover</code>里选择刚刚建立的<code>shakespeare</code>，就会看到这样的东西：<br><img src="/images/kibana5.png" alt="akb48"></p><p>在Search上就可以进行搜寻，比如说我搜寻<code>freedom</code>，如图：<br><img src="/images/kibana6.png" alt="akb48"></p><p>如果我搜寻<code>KING HENRY IV</code>，他不分大小写的把所有king、henry、iv都搜索出来。</p><p>如果我想搜寻line_id的第一行到第三行，那么语句就是<code>line_id:[1 TO 3]</code>，如图：<br><img src="/images/kibana17.png" alt="akb48"></p><p>如果想在上面的基础上进一步细化，比如说要在line_id是从第一行到第三行，同时_type是scene的语句：<code>line_id:[1 TO 3] AND _type:scene</code>：<br><img src="/images/kibana18.png" alt="akb48"></p><p>假如不想要scene，那么就把<code>AND</code>改成<code>NOT</code>。</p><p>如果这个时候只想关注一些指定的字段，那么可以将鼠标移动到索引下面的字段上，然后选在add即可，同样的移动上面已经选择的字段选择remove进行移除，比如我们试一下这个<code>speaker</code>：<br><img src="/images/kibana19.png" alt="akb48"></p><p>add之后在点击右侧的具体的speaker，就会看到里面的细节，比如这位westmoreland（威斯摩兰伯爵）：<br><img src="/images/kibana7.png" alt="akb48"></p><p>这个时候就能看见这位伯爵大哥的台词细节，在第几场的第几节，说的是什么台词。再返回菜单左侧点击这个speaker，我们还会看到一个比重：<br><img src="/images/kibana8.png" alt="akb48"></p><p>从这里就很清晰的看到，FALSTAFF（法斯塔夫）这个哥们的台词最多，也符合书里塑造的那个嗜酒话痨的艺术形象。而我们的KING HENRY IV(亨利四世)的台词只是第四位，占比重11%而已…</p><p>这样具体的搭配搜索之后，可以点击界面右上侧的save进行保存搜寻结果，再搭配share分享搜索结果的url网址，如图：<br><img src="/images/kibana9.png" alt="akb48"></p><h2><span id="kibana的图像化展示">Kibana的图像化展示</span></h2><p>Kibana也能做到类似grafana那样的炫酷图象化展示，更加立体的表现日志情况，首先选择左侧菜单栏里的<code>Visualize</code>（可视化）：<br><img src="/images/kibana10.png" alt="akb48"></p><p>然后点击<code>Create a Visualization</code>,里面既有很多种图形供你选择，有饼型，有箭头的，有文字的，有仪表盘的，如图：<br><img src="/images/kibana11.png" alt="akb48"></p><p>我们这里先建立一个饼型的，还是上面那个台词多少的例子，首先选择<code>shakespeare</code>作为数据源，然后点击<code>split slices</code>，如图：<br><img src="/images/kibana12.png" alt="akb48"></p><p>然后在<code>Aggergation</code>里选择<code>Terms</code>，然后在<code>Field</code>里选择<code>Speaker</code>,size那里写8,最后点击上面的那个三角播放键，看看结果：<br><img src="/images/kibana13.png" alt="akb48"></p><p>这就很清晰的看出，亨利四世一共说了1086句话，占比11.11%。</p><p>如果我们再加一个<code>Split Slices</code>，这一次在原有的specker的基础上选择<code>play_name</code>，图象变成了一个同心圆，最外面的一层就是新增的“play_name”的情况，如图显示FALSTAFF的所有台词会在两个play_name里出现：<br><img src="/images/kibana14.png" alt="akb48"></p><p>如果这个盘子里不想统计FALSTAFF这个话包，就添加一个过滤器，选择<code>speaker is not</code>，后面写上FALSTAFF即可，如图：<br><img src="/images/kibana15.png" alt="akb48"></p><p>效仿刚才的方法也可以做一个仪表盘，如图：<br><img src="/images/kibana16.png" alt="akb48"></p><p>可视化的数据也可以save和share，同样在web界面的右上角。保存的数据是可以在左侧菜单栏里的Dashboard里展示，做成一个类似zabbix那样的展示！</p>]]></content>
    
    <summary type="html">
    
      Kibana那个界面做的还是挺好看的
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>工作所用的模块回滚脚本</title>
    <link href="http://yoursite.com/2018/01/17/%E5%B7%A5%E4%BD%9C%E6%89%80%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97%E5%9B%9E%E6%BB%9A%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/01/17/工作所用的模块回滚脚本/</id>
    <published>2018-01-17T04:25:25.000Z</published>
    <updated>2018-01-22T02:31:05.833Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言与脚本内容">前言与脚本内容</span></h2><p>部署中常备一个回滚脚本也是很有必要的，我所在公司的服务器模块名都是在初始化的时候写进<code>/etc/role_install</code>这个文件里，如下图的这个服务器就是fss服务器：<br><img src="/images/rollback1.png" alt="akb48"></p><p>再比如下面这个服务器，虽然包含nginx的组件但是httpproxy的服务器：<br><img src="/images/rollback2.png" alt="akb48"></p><p>那么有了这样的前提，整个回滚的脚本内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#Written by ChrisChan @July-4th-2017</span><br><span class="line">#Desription:这是一个回滚的脚本。</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>=$(cat /etc/role_install |grep -v zkclient|grep -v nginx)</span><br><span class="line">echo -e <span class="string">'\033[31m现在将执行回滚操作，本次回滚只回滚普通模块，不包含nginx和zkclient!\033[0m'</span> </span><br><span class="line">echo <span class="string">"回滚的模块名称："</span>$<span class="built_in">module</span></span><br><span class="line">echo -e <span class="string">'\033[33m如果想取消回滚操作，请ctrl+c立即停止本脚本...\033[0m'</span></span><br><span class="line">sleep <span class="number">5</span></span><br><span class="line"></span><br><span class="line">cd /dxpbackup/hswx/$module &amp;&amp; zip $module.zip -x "*og*" -r .    #到备份的文件夹里去压缩</span><br><span class="line">mv /dxpbackup/hswx/$<span class="built_in">module</span>/$<span class="built_in">module</span>.zip /mnt/hswx    </span><br><span class="line">echo $<span class="built_in">module</span><span class="string">".zip文件已经生成！"</span></span><br><span class="line"> </span><br><span class="line">until [ <span class="string">"$decision"</span> == <span class="string">"Y"</span> -o <span class="string">"$decision"</span> == <span class="string">"y"</span> -o <span class="string">"$decision"</span> == <span class="string">"N"</span> -o <span class="string">"$decision"</span> == <span class="string">"n"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        read -p <span class="string">"请问是否用回滚的压缩包覆盖到/mnt/hswx下？(y/n)"</span> decision</span><br><span class="line">        echo <span class="string">"您的选择是："</span>$decision</span><br><span class="line">        <span class="keyword">if</span> [ $decision == Y -o $decision == y ]</span><br><span class="line">               then</span><br><span class="line">                       echo <span class="string">"现在已经开始覆盖..."</span></span><br><span class="line">                       rm -rf /mnt/hswx/$module    #先把原来的内容删除</span><br><span class="line">                       unzip /mnt/hswx/$module.zip -d /mnt/hswx/$module    #重新解压缩进去</span><br><span class="line">                       echo -e <span class="string">'\033[32m覆盖已经完成，可以直接执行/startall脚本!\033[0m'</span></span><br><span class="line">       elif [ $decision == N -o $decision == n ]</span><br><span class="line">               then</span><br><span class="line">                       echo -e <span class="string">'\033[32m生成的'</span>$<span class="built_in">module</span><span class="string">'.zip文件保存在/root文件夹里\033[0m'</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">               echo -e <span class="string">'\033[31m输入字符不符合!请重新输入!\033[0m'</span></span><br><span class="line">       fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2><span id="新的知识点">新的知识点！</span></h2><p>1）zip在压缩文件夹的时候要过滤掉某些文件使用“-x”参数，比如说要在AAA文件夹里面过滤掉abc和jqk这两个文件，那么语句就是<code>zip AAA.zip -x &quot;abc&quot; -x &quot;jqk&quot; -r .</code>或者是<code>zip -r -x=abc -x=jqk AAA.zip .</code> 这样两个语句。</p><p>如果你要过滤掉的是一个文件夹，比如那么就要在文件夹后面名字加上一个<em>，下图就是要压缩整个auc文件夹为456.zip但是又不想要lib这个文件夹，就使用了`zip 456.zip -x “lib</em>“ -r .`：<br><img src="/images/rollback3.png" alt="akb48"></p><p>不过如果文件夹里还有其他lib开头的文件夹也会被过滤掉，这一点要注意。</p><p>2）本shell里面涉及了逻辑判断，而<code>[[</code>和<code>[</code>的区别如下图：<br><img src="/images/rollback4.gif" alt="akb48"></p><p>3）如果if语句中出现报错“[: too many arguments”，很有可能就是字符串变量中可能存在空格，shell解析时将其认为是多个参数，再进行判断时，无法知道该获取哪个值，所以最好都用双引号括起来； </p><p>4）如果是“变量a等于aa且变量b等于bb  或者 变量c等于cc且变量d等于dd ” 这样的判断句怎么写？答曰：<br>    [ $a = “aa” -a $b = “bb” ] || [$c = “cc” -a $d = “dd” ]</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://zhangge.net/4776.html" target="_blank" rel="noopener">https://zhangge.net/4776.html</a></p>]]></content>
    
    <summary type="html">
    
      俗话说的好：“真男人从来不回滚”!
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ansible的几个基本语句</title>
    <link href="http://yoursite.com/2018/01/17/Ansible%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/01/17/Ansible的几个基本语句/</id>
    <published>2018-01-17T03:43:52.000Z</published>
    <updated>2018-01-22T02:27:27.780Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="开篇的废话">开篇的废话</span></h2><p>批处理工具我最早接触的是pssh，因为它实在很简单粗暴，但是它由于太简单粗暴了，应付十台二十台机器还OK，应付五十台一百台服务器就心有余力不足了（而且xshell右键有一个“发送键入到所有会话”的功能，与pssh效果几乎一样），而且我还不太喜欢puppet，总觉得那玩意跟我八字不合，于是乎，在新头头的推荐下，我把目光放在了Ansible。</p><p>Ansible的安装很简单，在Redhat环境下直接<code>yum install -y ansible</code>就行。Redhat已经将Ansible公司收购了，所以在安装上提供了不小的便利。</p><p>Ansible在安装完毕之后，会在<code>/etc/ansible/</code>目录下看见一个叫hosts的文件，这里是所有你要控制的服务器的ip们，可以排列写，比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.122</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.133</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.144</span></span><br></pre></td></tr></table></figure></p><p>也可以分组写，比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[aliyun]</span><br><span class="line"><span class="number">10.22</span><span class="number">.33</span><span class="number">.44</span></span><br><span class="line"><span class="number">10.22</span><span class="number">.33</span><span class="number">.45</span></span><br><span class="line">[jinshanyun]</span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.66</span></span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.67</span></span><br><span class="line"><span class="number">121.23</span><span class="number">.45</span><span class="number">.68</span>:<span class="number">2222</span>  （这个不是使用ssh默认的<span class="number">22</span>端口，就需要特别指出）</span><br></pre></td></tr></table></figure></p><p>默认情况下，Ansible会把命令全用于这个hosts文件，比如<br>    ansible all -m ping  -u ashin<br>这句话意思是整个hosts里的机器以ashin账户启动，而且都要ping 一下当前本机。</p><h2><span id="具体语句">具体语句</span></h2><p>怎么连接主机与要控制的远程机器请按之前写的“<a href="http://chenx1242.blog.51cto.com/10430133/1763978”一文进行操作，这里先说几个命令语句：" target="_blank" rel="noopener">http://chenx1242.blog.51cto.com/10430133/1763978”一文进行操作，这里先说几个命令语句：</a></p><p>1)<code>ansible all -m shell -a &quot;/bin/echo hello&quot;</code><br>对hosts里所有的机器一起使用”输出hello这个文字”。-m shell可以忽略不写，但是不是shell而是其他的模块就要写出来；</p><p>2)<code>ansible aliyun -m copy -a &quot;src=~/projects/tests/t.py dest=~&quot;</code><br>把hosts里aliyun组的机器的/projects/tests/t.py复制到~目录下；<br>[注意！]copy模块不支持变量路径，也就是说如果目标服务器的部署路径不同，copy不会很智能的去访问.bash_profile来得到用户的自定义变量，写变量替换路径是不会达到目的的。</p><p>3)<code>ansible jinshanyun[0:9] -i -m file -a &quot;dest=~/tests state=absent&quot;</code><br>把hosts里jinshanyun组中从0~9这十台机器的/tests文件夹删除掉，absent是“缺席，不在”的意思；</p><p>4)<code>ansible 192.168.1.133 -m ping</code><br>这句话=<code>ping 192.168.1.133</code>；</p><p>5)<code>ansible v1 -m service -a &quot;name=mysql state=started&quot; -u ashin --sudo -K</code><br>以用户名为ashin登陆hosts里所有v1组的机器，然后检查mysql是否是started状态，若不是就start，同时要输入root的密码作为确认；</p><p>6)<code>ansible 10.11.22.* -m user -a &quot;name=foo password=foo&quot; --sudo -K</code><br>hosts文件里所有10.11.22开头的机器，都要添加一个新的用户名foo，同时密码是foo，并且输入root密码确认身份；</p><p>7)<code>ansible v1:!v2 -m apt -a &quot;name=git state=latest&quot;</code><br>检查所有属于v1组同时还不属于v2组的机器里的git文件是否是最新版本；</p><p>8)<code>ansible webservers:&amp;dbservers -a &quot;/sbin/reboot&quot; -f 10 --sudo -K</code><br>重新启动既是webservers组又是dbservers组的所有机器；</p><p>9)<code>ansible webservers -m raw -a &#39;yum -y install python-simplejson&#39;</code><br>用ansible去链接低版本的centos时，就乎出现“ansible requires a json module, none found! ”的错误，需要远程机安装samplejson包。raw模块是靠底层ssh的通讯，不依靠python的模块，所以如果碰到低版本的系统，如果command和shell模块无法使用，可以先用这条命令安装完需要的包。</p><p>10)<code>ansible all -m synchronize -a &quot;src=/chenshuo/1.sh dest=/chenshuo delete=yes&quot;</code><br>synchronize原意是“同步”，而这个模块是分发模块，这句话的意思是把控制端的/chenshuo/1.sh分发给host文件里的所有ip服务器，delete=yes意思是以控制端服务器的文件为准。</p><p>11)<code>ansible 10.168.194.89 -m synchronize -a &quot;mode=pull src=/chenshuo/nba.txt dest=/chenshuo/a.txt&quot;</code><br>将10.168.194.89这台服务器上的/chenshuo/nba.txt拉到控制服务器的/chenshuo文件夹下，顺便改名叫a.txt。</p><p>12)<code>ansible all -m get_url -a &quot;url=https://pypi.python.org/packages/56/2b/9c9c113fb88082950067a42cc99e3c61f1df72035f89bb0bdf0a60308ca0/pexpect-4.1.0.tar.gz#md5=562a1a21f2a60b36dfd5d906dbf0943e dest=/chenshuo&quot;</code><br>把那一大串网址的下载连接下载到host文件里的所有ip的/chenshuo文件夹下。</p><p>13)<code>ansible 10.117.14.37 -m script -a &quot;/chenshuo/free.sh&quot;</code><br>在10.117.14.37上执行操作端的free.sh，注意操作端必须要有free.sh这个脚本，而10.117.14.37这台机器上并不一定要有。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.csdn.net/iloveyin/article/details/46982023" target="_blank" rel="noopener">http://blog.csdn.net/iloveyin/article/details/46982023</a></p>]]></content>
    
    <summary type="html">
    
      Ansible的基础用法
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Ansible" scheme="http://yoursite.com/tags/Ansible/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix用户密码忘记怎么办</title>
    <link href="http://yoursite.com/2018/01/17/Zabbix%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <id>http://yoursite.com/2018/01/17/Zabbix用户密码忘记怎么办/</id>
    <published>2018-01-17T03:12:57.000Z</published>
    <updated>2018-01-22T02:29:28.186Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>zabbix的超级用户也是人，人就难免会忘记密码（或者清除了当前浏览器的缓存），忘记密码不要怕，因为zabbix所有的用户数据都是保存在server机器上的mysql里，只要打开<code>zabbix_server.conf</code>，就会查得到mysql的登录账号密码以及zabbix对应的数据库。（这里多说一句，zabbix自带的guest基本就是一个废物，forget it~）</p><p>在zabbix_server机器上输入mysql的账号密码来到mysql里，<code>USE zabbix</code>，然后<code>SELECT * FROM users</code>,就会看到笔者的画面。<br><img src="/images/zabbix_user1.png" alt="akb48"></p><p>这个时候就可以使用数据库的update命令去更改密码，比如说新的密码是“woshitiancai”，就可以写<code>update  users set passwd=md5(&quot;woshitiancai&quot;) where userid=&#39;1&#39;;</code><br>然后就可以用woshitiancai来登陆啦~</p><p>但是！！！你以为这就结束了吗？nononono！！！</p><p>很多人即使更改了密码还是登陆不上去，很简单，那就是你连用户名都忘记了！或者是用户名你记得但是你手贱在zabbix的administration里的users对原来的设定增加了新东西，而且这些东西还特么的是中文！！！于是就像我上面图那样出现了???的字样。</p><p>那些？？？很重要吗？当然了！！！因为那些才是zabbix的登录用户名！！！看见了吗，zabbix使用蛋疼的alias作为真正的登录名而不是用name or surname，这真是一个蛋疼的事儿！</p><p>那么剩下的问题很简单了，就是把???改变成中文，使用语句<code>set names utf8;</code> 然后界面就成了这样：<br><img src="/images/zabbix_user2.png" alt="akb48"></p><p>这次再使用“主管理员”搭配新的密码就可以华丽的登录了！~~我他妈当时都差点要把这个user表格删掉然后重拽一个表格进来，但是终于还是被我识破了，啊哈哈哈哈，我真是个天才！！！</p>]]></content>
    
    <summary type="html">
    
      忘记密码不要怕!
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Docker出现客户端与服务端有差的错误...</title>
    <link href="http://yoursite.com/2018/01/16/Docker%E5%87%BA%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9C%89%E5%B7%AE%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/01/16/Docker出现客户端与服务端有差的错误/</id>
    <published>2018-01-16T00:36:32.000Z</published>
    <updated>2018-01-22T02:28:30.873Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天用docker搞redis镜像的的时候，出现了这样的错误提示：<code>Error response from daemon: client is newer than server (client API version: 1.24, server API version: 1.22)</code>，如图：<br><img src="/images/docker1.png" alt="akb48"></p><p>可见使用了<code>docker version</code>的时候也有提示：当前docker客户端比服务端版本更新。这样是无法创建镜像的，遇到这个问题很简单，那就是重启一下docker，命令如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p><p>然后我们再<code>docker version</code>看一下效果：<br><img src="/images/docker2.png" alt="akb48"></p><p>我做这个的时候，docker升级了也一样可以读到原先的镜像，但是出于保险起见我们也应该学会如何保存和导入镜像，比如现在我现在有这个叫<code>docker.io/ubuntu</code>的镜像，如图：<br><img src="/images/docker3.png" alt="akb48"></p><p>如果要备份它的话，语句就是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save docker.io/ubuntu &gt; <span class="regexp">/root/u</span>buntu.image</span><br></pre></td></tr></table></figure></p><p>这里备份后的文件名就是ubuntu.image。</p><p>如果要导入的话，语句就是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; <span class="regexp">/root/u</span>buntu.image</span><br></pre></td></tr></table></figure></p><p>这样导入的话，images create时间是不变的。</p>]]></content>
    
    <summary type="html">
    
      一不小心手欠，执行了一下yum -y update...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>记录日志系统ELKB 5.6.4的搭建过程</title>
    <link href="http://yoursite.com/2018/01/16/%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9FELKB-5-6-4%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/16/记录日志系统ELKB-5-6-4的搭建过程/</id>
    <published>2018-01-15T23:59:43.000Z</published>
    <updated>2018-01-22T02:31:02.292Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>ELK是最近比较流行的免费的日志系统解决方案，注意，ELK不是一个软件名，而是一个结局方案的缩写，即<code>Elasticsearch+Logstash+Kibana（ELK Stack）</code>。这哥几个都是java系的产品，但是众所周知，java的东西很吃内存和CPU，Logstash在当作为收集日志的Agent时，就显得太过臃肿了。听说直播平台“斗鱼”团队很为logstash占用资源的情况很而苦恼，后来为了解决这个问题，他们自己写了一个agent。不过后来官方在logstash-forwarder的基础上推出了beat系列，里面包括四个兄弟，分别是：Packetbeat（搜集网络流量数据）；Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）；Filebeat（搜集文件数据）；Winlogbeat（搜集 Windows 事件日志数据）。而Filebeat也就这样加入了“日志收集分析”的团队里，所以虽然大家还是习惯性的叫ELK，其实准确的说法已经是ELKB了。</p><p>ELKB这几个哥们的分工如下：</p><ol><li>Elasticsearch：分布式搜索和分析引擎，具有高可伸缩、高可靠和易管理等特点。基于 Apache Lucene 构建，能对大容量的数据进行接近实时的存储、搜索和分析操作。通常被用作某些应用的基础搜索引擎，使其具有复杂的搜索功能；</li><li>Logstash：数据收集额外处理和数据引擎。它支持动态的从各种数据源搜集数据，并对数据进行过滤、分析、丰富、统一格式等操作，然后存储到用户指定的位置；</li><li>Kibana：数据分析和可视化平台。通常与 Elasticsearch 配合使用，对其中数据进行搜索、分析和以统计图表的方式展示；</li><li>Filebeat：ELK 协议栈的新成员，在需要采集日志数据的 server 上安装 Filebeat，并指定日志目录或日志文件后，Filebeat 就能读取数据，迅速发送到 Logstash 进行解析，亦或直接发送到 Elasticsearch 进行集中式存储和分析。</li></ol><h2><span id="设计架构">设计架构</span></h2><p><img src="/images/elk1.png" alt="办公室"></p><p>本文的设计结构就是这样，其中红色的redis/RebbitMQ部分可以省略（我这个例子里暂省略），让日志直接传递到logstash，如果日志量较大，最好还是添加上redis，同时再横向扩容Elasticsearch，搞成一个集群。</p><p>对于这几个模块服务器多说几句：<br>1）Logstash要选择计算能力强的，CPU和内存比较丰满的；<br>2）Elasticsearch要选择磁盘容量大的，同时CPU和内存也比较丰满的；</p><h2><span id="实验软件版本">实验软件版本</span></h2><p>Elasticsearch 5.6.4<br>Logstash 5.6.4<br>Kibana 5.6.4<br>Filebeat 5.6.4<br>Java 1.8+，安装方法：<code>http://blog.51cto.com/chenx1242/2043924</code><br>由于ELKB这几个东西都是墙外的，墙内的下载可能会比较费劲。所以我稍后会把所有ELKB的5.6.4程序都放在51CTO的存储空间里，需要的朋友可以去下载，还是那话，虽然ELK升级频率很快，但是5.6.4已经足够稳定了。</p><h2><span id="实验服务器情况">实验服务器情况</span></h2><p><img src="/images/elk2.png" alt="办公室"></p><h2><span id="安装elasticsearch-564以下所有操作都是root下进行的">安装Elasticsearch 5.6.4（以下所有操作都是root下进行的）</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https:<span class="comment">//artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.4.rpm</span></span><br><span class="line">rpm -ivh elasticsearch<span class="number">-5.6</span><span class="number">.4</span>.rpm</span><br></pre></td></tr></table></figure></code></pre><p>然后编辑<code>/etc/elasticsearch/elasticsearch.yml</code>，不然的话logstash无法与之相连：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-application  #如果是集群的es就把这个打开，Elasticsearch 启动时会根据配置文件中设置的集群名字（cluster.name）自动查找并加入集群，端口是9300</span><br><span class="line">network.host: 0.0.0.0    #取消注释，并且改成0.0.0.0</span><br><span class="line">http.port: 9200    #取消注释</span><br></pre></td></tr></table></figure></p><p>保存之后，启动并且添加开机启动：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start elasticsearch     </span><br><span class="line">systemctl enable elasticsearch</span><br></pre></td></tr></table></figure></p><p>使用<code>curl localhost:9200</code>能看到这样的情景就证明已经成功启动了：<br><img src="/images/elk3.png" alt="办公室"></p><h2><span id="安装kibana-564-以下所有操作都是root下进行的">安装kibana 5.6.4 (以下所有操作都是root下进行的)</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https:<span class="comment">//artifacts.elastic.co/downloads/kibana/kibana-5.6.4-linux-x86_64.tar.gz</span></span><br><span class="line">tar xzvf kibana<span class="number">-5.6</span><span class="number">.4</span>-linux-x86_64.tar.gz</span><br><span class="line">cd kibana<span class="number">-5.6</span><span class="number">.4</span>-linux-x86_64/</span><br><span class="line">vim config/kibana.yml</span><br></pre></td></tr></table></figure></code></pre><p>把kibana.yml里的<code>server.host: localhost</code>改成<code>server.host: 0.0.0.0</code>，然后保存退出，在kibana的bin文件夹里执行<code>./kibana</code>即可。如果要后台启动就是<code>nohup /kibana安装路径/bin/kibana &amp;</code>。</p><p>启动之后，如图：<br><img src="/images/elk4.png" alt="办公室"></p><h2><span id="安装logstash-564以下所有操作都是root下进行的">安装Logstash 5.6.4（以下所有操作都是root下进行的）</span></h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https:<span class="comment">//artifacts.elastic.co/downloads/logstash/logstash-5.6.4.rpm </span></span><br><span class="line">rpm -ivh logstash<span class="number">-5.6</span><span class="number">.4</span>.rpm</span><br></pre></td></tr></table></figure></code></pre><p>如果安装的时候爆错：<code>/usr/share/logstash/vendor/jruby/bin/jruby: line 388: /usr/bin/java: No such file or directory</code>。那么就先<code>which java</code>查看一下java的文件，然后做一个软连接过去，然后重装logstash即可，如图：<br><img src="/images/elk5.png" alt="办公室"></p><p><img src="/images/elk6.png" alt="办公室"></p><p>用户可以使用TLS双向认证加密Filebeat和Logstash的连接，保证Filebeat只向可信的Logstash发送加密的数据（如果你的logstash和filebeat是内网通信，而且你认可当前内网的安全度，这一步可以省略）。同样的，Logstash也只接收可信的Filebeat发送的数据。这个功能默认是关闭的，要开启的话需要先<code>vim /etc/pki/tls/openssl.cnf</code>，如图：<br><img src="/images/elk7.png" alt="办公室"></p><p>找到<code>[ v3_ca ]</code>的字段，在底下添加<code>subjectAltName = IP:logstash的内网IP</code>字段，保存退出来到/etc/pki/tls/，执行下面命令：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -days <span class="number">365</span> -batch -nodes -newkey rsa:<span class="number">2048</span> -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt</span><br></pre></td></tr></table></figure></p><p>来生成一个期限为365天的IP SAN证书对，如果想生成一个十年的证书，就把365改成3650即可，如图：</p><p>安装完毕之后，<code>vim /etc/logstash/logstash.yml</code>，编辑成如下的样子：<br><img src="/images/elk8.png" alt="办公室"></p><p>然后在<code>/etc/logstash/</code>下手动建立一个目录conf.d，在conf.d里新建一个<code>logstash.conf</code>的文件，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/local/logstash/config/conf.d/logstash.conf</span><br><span class="line">#在输入部分，配置Logstash通信端口以及添加SSL证书，从而进行安全通信。</span><br><span class="line">input &#123;</span><br><span class="line"> beats &#123;</span><br><span class="line">   port =&gt; <span class="number">5044</span></span><br><span class="line">   ssl =&gt; <span class="literal">true</span></span><br><span class="line">   ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span><br><span class="line">   ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#在过滤器部分，我们将使用Grok来解析这些日志，然后将其发送到Elasticsearch。以下grok过滤器将查找“syslog”标记的日志，并尝试解析它们，以生成结构化索引。</span><br><span class="line">filter &#123;</span><br><span class="line"> <span class="keyword">if</span> [type] == <span class="string">"syslog"</span> &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;"</span> &#125;</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_at"</span>, <span class="string">"%&#123;@timestamp&#125;"</span> ]</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_from"</span>, <span class="string">"%&#123;host&#125;"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">    syslog_pri &#123; &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [ <span class="string">"syslog_timestamp"</span>, <span class="string">"MMM  d HH:mm:ss"</span>, <span class="string">"MMM dd HH:mm:ss"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#输出部分，我们将定义要存储的日志位置</span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line"> hosts =&gt; [ "10.162.80.192:9200" ]                #这个地址是elasticsearch的内网地址</span><br><span class="line">index =&gt; "filebeat-%&#123;+YYYY.MM.dd&#125;"#设定这个是索引</span><br><span class="line">   #index =&gt; "auclogstash-%&#123;+YYYY.MM.dd&#125;"    #这行是后来作实验的，可以忽视            </span><br><span class="line">user =&gt; elastic                    #这个是为了将来装x-pack准备的</span><br><span class="line">password =&gt; changeme                #同上</span><br><span class="line">      &#125;</span><br><span class="line">stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就是启动并且添加开机自启动:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start logstash        </span><br><span class="line">systemctl enable logstash</span><br></pre></td></tr></table></figure></p><h2><span id="安装filebeat以下所有操作都是root下进行的">安装filebeat（以下所有操作都是root下进行的）</span></h2><p>在模块服务器上安装filebeat的方法如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https:<span class="comment">//artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.6.4-x86_64.rpm </span></span><br><span class="line">rpm -ivh filebeat<span class="number">-5.6</span><span class="number">.4</span>-x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>之前在logstash上生成了一个IP SAN证书，现在需要把这个证书传递给filebeat的机器里，使用scp语句如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -pr root@10.162.80.171:/etc/pki/tls/certs/logstash-forwarder.crt /etc/ssl/certs/        #10.162.80.171就是logstash的内网IP</span><br></pre></td></tr></table></figure></p><p>输入logstash的密码，并且密钥文件复制完毕之后，需要修改filebeat.yml，于是#vim /etc/filebeat/filebeat.yml：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@func-auc-001 log]# grep -iv '#' /etc/filebeat/filebeat.yml | grep -iv '^$'</span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: log</span><br><span class="line">  paths:</span><br><span class="line">    -  <span class="regexp">/mnt/</span>hswx/auc/logs<span class="comment">/*.log        #这个是那个auc模块的路径</span></span><br><span class="line"><span class="comment">    -    /第二个日志路径/*.log                   #如果有第二个文件路径的话</span></span><br><span class="line"><span class="comment">  tail_files: true                                 #从文件末尾开始读取</span></span><br><span class="line"><span class="comment">  document_type: "newnginx-api"                    #logstash那里已经设定了index，如果要使用了document_type，那么在logstash的index就要这么写："%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line"><span class="comment">  # 以下是规避数据热点的优化参数：</span></span><br><span class="line"><span class="comment">    spool_size: 1024         # 积累1024条消息才上报</span></span><br><span class="line"><span class="comment">    idle_timeout: "5s"        # 空闲5s上报</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">output.logstash:</span></span><br><span class="line"><span class="comment">  hosts: ["10.162.80.171:5044"]            #这个地方要写logstash的内网地址</span></span><br><span class="line"><span class="comment">  ssl.certificate_authorities: ["/etc/ssl/certs/logstash-forwarder.crt"]    #这里就是刚刚复制的那个密钥文件路径</span></span><br><span class="line"><span class="comment">  #注意上面是ssl而不是tls，1.0版本才是tls，如果这个写错了，启动的时候会出现“read: connection reset by peer”的错误</span></span><br></pre></td></tr></table></figure></p><p>注意！Filebeat的配置文件采用YAML格式，这意味着缩进非常重要！请务必使用与这些说明相同数量的空格。</p><p>保存之后，使用<code>/etc/init.d/filebeat start</code>启动filebeat，如图：<br><img src="/images/elk10.png" alt="办公室"></p><h2><span id="故障解决">故障解决</span></h2><p>ELK几个部件现在都已经启动了，并且互相telnet端口都是通的，在elasticsearch的服务器上使用<code>curl -XGET &#39;http://elasticsearch内网IP:9200/filebeat-*/_search?pretty&#39;</code>却出现这样的情况：<br><img src="/images/elk9.png" alt="办公室"></p><p>而使用<code>tailf /var/log/filebeat/filebeat</code>去查看filebeat的日志是这样的：<br><img src="/images/elk11.png" alt="办公室"></p><p>再看看logstash-plain.log，里面的情况是这样的：<br><img src="/images/elk12.png" alt="办公室"></p><p>从此可见，filebeat与logstash的联系是error状态，那么停止filebeat的进程，改用<code>/etc/init.d/filebeat start -c /etc/filebeat/filebeat.yml</code>，重新在elasticsearch的服务器上使用<code>curl -XGET &#39;http://elasticsearch内网IP:9200/filebeat-*/_search?pretty&#39;</code>发现已经成功读到了我们之前配置的目录“/mng/hswx/auc/log”，如图：<br><img src="/images/elk13.png" alt="办公室"></p><h2><span id="配置kibana">配置kibana</span></h2><p>在浏览器输入<code>kibana服务器外网IP：5601</code>打开kibana的web界面，把<code>idenx pattern</code>的地方改成<code>filebeat-*</code>(同之前配置的index索引一致)，然后点击<code>create</code>，如图：<br><img src="/images/elk14.png" alt="办公室"></p><p>然后就得到了细节的web界面，如图：<br><img src="/images/elk15.png" alt="办公室"></p><p>点击左侧框的<code>Discover</code>，就会看到梦寐以求的日志web界面，如图：<br><img src="/images/elk16.png" alt="办公室"></p><p>看一下红色框的内容里面有时间，有host主机，有source来源，还有具体的日志信息，我们再去func-auc-001这个日志源主机上查询一下日志：<br><img src="/images/elk17.png" alt="办公室"></p><p>两个日志是一样的，可见实现了预期的日志展示的目标！</p><p>最后一步，就是把kibana与nginx联系起来（也可以把kibana做阿里云负载均衡的后端服务器），这样通过nginx/负载均衡来访问kibana的界面，对kibana来说更安全。配置端口监听如图，再把kibana服务器挂在负载均衡后面即可。<br><img src="/images/elk18.png" alt="办公室"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html</a><br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/</a><br><a href="http://www.jinsk.vip/2017/05/24/elksetup/" target="_blank" rel="noopener">http://www.jinsk.vip/2017/05/24/elksetup/</a><br><a href="https://renwole.com/archives/661" target="_blank" rel="noopener">https://renwole.com/archives/661</a><br><a href="https://www.zybuluo.com/dume2007/note/665868" target="_blank" rel="noopener">https://www.zybuluo.com/dume2007/note/665868</a><br><a href="https://www.elastic.co/guide/en/beats/libbeat/5.6/getting-started.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/libbeat/5.6/getting-started.html</a><br><a href="https://discuss.elastic.co/search?q=ERR%20Failed%20to%20publish%20events%20caused%20by%3A%20read%20tcp" target="_blank" rel="noopener">https://discuss.elastic.co/search?q=ERR%20Failed%20to%20publish%20events%20caused%20by%3A%20read%20tcp</a><br><a href="http://jaminzhang.github.io/elk/ELK-config-and-use-Filebeat/" target="_blank" rel="noopener">http://jaminzhang.github.io/elk/ELK-config-and-use-Filebeat/</a> （这个博主很好，但是就是博客无法留言，这点比较坑）</p>]]></content>
    
    <summary type="html">
    
      从搭建ELK开始日志分析之路
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ELK" scheme="http://yoursite.com/tags/ELK/"/>
    
      <category term="大数据分析" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>从“No space left on device”到删除海量文件</title>
    <link href="http://yoursite.com/2018/01/16/%E4%BB%8E%E2%80%9CNo-space-left-on-device%E2%80%9D%E5%88%B0%E5%88%A0%E9%99%A4%E6%B5%B7%E9%87%8F%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/01/16/从“No-space-left-on-device”到删除海量文件/</id>
    <published>2018-01-15T16:48:39.000Z</published>
    <updated>2018-01-22T02:29:29.526Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>开发发现某个云服务器无法启动进程，提示“No space left on device”，但是使用<code>df -h</code>查看容量的时候，明明还有很多的空间。于是使用<code>df -i</code>，发现inode节点已经全部用光了，所以现在不能建立任何新的文件。如图：<br><img src="/images/df1.png" alt="办公室"></p><p>既然如此就要查出来是哪个文件夹里会有如此多的文件来占用这些inode,使用一个小脚本：<code>for i in /*; do echo $i; find $i | wc -l; done</code>，获取到/mnt下有一个文件占用了绝大多数的inode，如图：<br><img src="/images/df2.png" alt="办公室"></p><p>于是就进入到mnt这个文件夹里，慢慢找寻到底是哪个文件夹，用上面那个语句一点一点缩小范围，最后确定文件夹原来就是data文件夹，如图：<br><img src="/images/df3.png" alt="办公室"></p><p>现在如果要<code>rm -rf data/*</code>的话，是没有效果的，有效果的话也很慢。而且很有可能报<code>-bash: /bin/rm: Argument list too long</code>的错，因为这个文件夹里面的小文件实在太多了，有足足两百五十多万个，那么怎么样处理这样的情况？</p><p>用find搭配-type f -exec rm {} \;可能会引起内存溢出，用文件夹重置命令搭配”–reference” 也没什么效果。</p><p>这时最好的方法就是使用<code>rsync</code>!</p><p>先<code>yum install rsync</code>，当然了现在inode是饱和的状态，yum install是会报错的：<br><img src="/images/df4.png" alt="办公室"></p><p>那么就需要手动删除一些文件，腾出来一部分inode供yum使用，安装完毕rsync之后，找到一个空文件夹，如果没有空文件夹，就手动建立一个。 </p><p>使用命令：<code>rsync --delete-before -a -H -v --progress --stats /空文件夹的路径/ /海量小文件的路径/</code></p><pre><code>–delete-before 接收者在传输之前进行删除操作–progress 在传输时显示传输过程-a 归档模式，表示以递归方式传输文件，并保持所有文件属性-H 保持硬连接的文件-v 详细输出模式-stats 给出某些文件的传输状态</code></pre><p>如果你开了这个服务器的两个窗口，一个是执行上面的命令，另一个是在海量文件夹里执行<code>ls</code>，这个时候ls命令是卡死的，过了大约2分钟，就会看到<code>ls</code>展示的文件喷涌而出，整个电脑屏幕好比黑客帝国一样，异常壮观。</p><p>静等大约20分钟，整个文件夹删除干净，inode也释放了97%，世界恢复了清静。<br><img src="/images/df5.png" alt="办公室"></p>]]></content>
    
    <summary type="html">
    
      当吃的比拉的快...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用Google Authenticator给ssh进行登录验证</title>
    <link href="http://yoursite.com/2018/01/16/%E4%BD%BF%E7%94%A8Google-Authenticator%E7%BB%99ssh%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2018/01/16/使用Google-Authenticator给ssh进行登录验证/</id>
    <published>2018-01-15T16:39:26.000Z</published>
    <updated>2018-01-22T02:32:42.229Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>普通情况下的服务器登录，是“服务器+密码”这种直白的验证方式，但是这种方式太过简单，一旦密码泄露，服务器就有危险，于是为了安全我们就要在登录上再加一把锁，那就是使用Google Authenticator（谷歌身份验证器）这个工具，在登录的时候进行一次验证，只有“验证通过了”+“密码正确”才能登陆服务器。</p><h2><span id="安装前准备">安装前准备</span></h2><p>1）关闭Selinux ：<code>setenforce 0</code><br>2）安装依赖：<code>yum -y install gcc make pam-devel libpng-devel libtool wget git</code><br>3）添加阿里云epel 源：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RHEL <span class="number">6</span>/Centos <span class="number">6</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-6.repo</span></span><br><span class="line">RHEL <span class="number">7</span>/Centos <span class="number">7</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure></p><p>4）安装Qrencode，谷歌身份验证器需要调用该程序生成二维码并显示：<code>yum install -y qrencode</code></p><h2><span id="安装谷歌身份验证器">安装谷歌身份验证器</span></h2><p>这个时候很多教程会让你去执行<code>git clone https://github.com/google/google-authenticator.git</code>，然而现在这个git里面已经不再含有libpam这个文件夹了，下载下来是一个错误的包，那么这个时候你可以使用<code>yum install google-authenticator</code>，不过yum安装的身份验证器的版本很老，这个时候可以执行<code>wget https://github.com/google/google-authenticator-libpam/archive/1.04.tar.gz</code>。</p><p>下载下来1.0.4版本的然后拆包解压缩，里面是这样几个文件：<br><img src="/images/google1.png" alt="办公室"></p><p>然后就<code>./bootstrap.sh &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</code>进行编译和安装。</p><p>安装过程完毕之后，还要复制google身份验证器pam模块到系统下，命令是：<code>cp /usr/local/lib/security/pam_google_authenticator.so /lib64/security/</code>。</p><h2><span id="调整登陆方式">调整登陆方式</span></h2><p>1）编辑<code>/etc/pam.d/sshd</code>这个文件，我这个centos的版本是7.0的，里面的内容可能跟centos 6.x的优点不同，不过没关系，就需要插入黄色框内的<code>auth required pam_google_authenticator.so</code>，如图：<br><img src="/images/google2.png" alt="办公室"></p><p>修改完毕之后，保存退出。</p><p>注意！修改了这步之后，服务器千万不能断开连接，否则再连是需要google验证码的，而我们现在还没有生成码，所以肯定是无法连接服务器，如果是云服务器，可以通过登陆控制台的方式把这个文件修改回来，如果是实体服务器，那就呵呵呵了。</p><p>2）编辑<code>/etc/ssh/sshd_config</code>，就修改一个地方：<code>ChallengeResponseAuthentication yes</code><br>3）保存退出之后，重启一下ssh服务：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RHEL6 /Centos6：Service sshd restart</span><br><span class="line">RHEL7 /Centos7：Systemctl resart sshd</span><br></pre></td></tr></table></figure></p><h2><span id="生成登陆验证码">生成登陆验证码</span></h2><p>这次以root用户为例，那么切换成root用户执行下面的过程。<br>1）执行<code>google-authenticator</code>，由于我们之前已经安装了<code>qrencode</code>，那么这个时候会生成一个超级超级巨大的二维码，给各位感受一下：<br><img src="/images/google3.png" alt="办公室"></p><p>红色内容是生成的密钥，很重要。绿色的内容是备用的紧急救助码，紧急救助码就是当你无法获取认证码时（比如手机丢了），可以当做认证码来用，每用一个少一个，但其实可以手动添加的，建议如果 root 账户使用 Google Authenticator 的话一定要把紧急救助码另外保存一份。</p><pre><code>Do you want me to update your &quot;/home/test/.google_authenticator&quot; file? (y/n) y</code></pre><p>是否更新用户的 Google Authenticator 配置文件，选择 y 才能使上面操作对当前用户生效，其实就是在对应用户的 Home 目录下生成了一个 .google_authenticator 文件，如果你想停用这个用户的 Google Authenticator 验证，只需要删除这个用户 Home 目录下的 .google_authenticator 文件就可以了。</p><pre><code>Do you want to disallow multiple uses of the same authentication token? This restricts you to one login about every 30s, but it increases your chances to notice or even prevent man-in-the-middle attacks (y/n) y</code></pre><p>每次生成的认证码是否同时只允许一个人使用？这里选择 y。</p><pre><code>By default, tokens are good for 30 seconds. In order to compensate for possible time-skew between the client and the server, we allow an extra token before and after the current time. If you experience problems with poor time synchronization, you can increase the window from its default size of +-1min (window size of 3) to about +-4min (window size of 17 acceptable tokens). Do you want to do so? (y/n) n</code></pre><p>是否增加时间误差？这里随便选择， ny都可以。</p><pre><code>If the computer that you are logging into isn&apos;t hardened against brute-force login attempts, you can enable rate-limiting for the authentication module. By default, this limits attackers to no more than 3 login attempts every 30s. Do you want to enable rate-limiting (y/n) y</code></pre><p>是否启用次数限制？这里选择 y，默认每 30 秒最多尝试登录 3 次。</p><p>如果想要写成脚本的话，那么上面交互式的设置也可用通过参数一次性设置：<code>google-authenticator -t -f -d -l test@chen.super -i MR.chen -r 3 -R 30 -W</code>。</p><p>-I和-i是可以随便写的，但是-i后期可以改，-I不能改。</p><h2><span id="搭配手机端">搭配手机端</span></h2><p>如果手机是ios，就去apple store里搜索“Google Authenticator”，如果是安卓，就去应用商店搜索“谷歌动态口令”。</p><p>安装完后，打开App，点击“开始设置”，选择“扫描条形码”扫描上面google-authenticator命令生成的二维码，或者是选择“输入密钥”，然后手机上就能看到对应的六位数认证码了。</p><p>最后一步，返回xshell，修改登陆方式，设置登陆方法为<code>Keyboard Interactive</code>，如图：<br><img src="/images/google4.png" alt="办公室"></p><p>这个时候，推荐各位保留原有的ssh不要动，在另外一个xshell窗口登陆一下看看效果，如果正常的话，这个时候会看到系统会让你先输入一个<code>Verification code</code>。这个值就是手机里的那个六位数，然后再输入密码，只有两个都是正确的，才能登陆！</p><p>至此整个配置完成，如果登陆时遇到问题，请查看日志文件<code>/var/log/secure</code>。</p><h2><span id="更改存储位置">更改存储位置</span></h2><p>在生成二维码那一步的时候，如果你错过了记住密钥也不要怕，系统会自动把密钥和紧急救助码保存在<code>~/.google_authenticator</code>这个文件里。</p><p>如果想要改变密钥存储位置，请使用–secret参数:<code>google-authenticator --secret=&quot;/文件路径/用户名&quot;</code>。</p><p>然后更改/etc/pam.d/sshd内的路径配置:<code>auth required pam_google_authenticator.so user=root secret=/PATH_FOLDER/${USER}</code>。</p><p>上面那句话里“user=root” 用于强制PAM使用root用户权限来搜索文件。</p><p>另外请注意，由于我们当时切换成了root用户，所以密钥文件的所有者是root，生成文件的用户只能读取文件(chmod: 400)：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root.root /PATH_FILE/SECRET_KEY_FILES</span><br><span class="line">chmod <span class="number">400</span> /PATH_FILE/SECRET_KEY_FILES</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      给Linux服务器再加一把锁
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>记录一次处理https监听不正确的过程</title>
    <link href="http://yoursite.com/2018/01/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86https%E7%9B%91%E5%90%AC%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/12/记录一次处理https监听不正确的过程/</id>
    <published>2018-01-12T11:58:54.000Z</published>
    <updated>2018-01-22T04:04:34.715Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天开发反馈在测试金山云设备的时候遇到了这样的一个现象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8 </span></span><br><span class="line">-<span class="number">-2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">11</span>:<span class="number">49</span>:<span class="number">26</span>--  https:<span class="comment">//funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8  </span></span><br><span class="line">Resolving funchlscdn.lechange.cn... <span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span> </span><br><span class="line">Connecting to funchlscdn.lechange.cn|<span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span>|:<span class="number">443.</span>.. connected. </span><br><span class="line">OpenSSL: error:<span class="number">140770</span>FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol </span><br><span class="line">Unable to establish SSL connection.</span><br></pre></td></tr></table></figure></p><p>爆“error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol”的错误，就是在当向只提供http的服务发送https请求造成的。</p><p><code>ping funchlscdn.lechange.cn</code>，获得了这个域名对应的IP之后，返回到金山云的控制台查询这个IP，发现这个IP是一个负载均衡，但是这个负载均衡配置的时候对80端口是http协议，而对443端口还是http协议，于是更改成https，重新测试之后，发现错误变成了这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@js-develop ~]# wget https://funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8 </span><br><span class="line">-<span class="number">-2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">08</span>:<span class="number">15</span>--  https:<span class="comment">//funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8</span></span><br><span class="line">Resolving funchlscdn.lechange.cn... <span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span></span><br><span class="line">Connecting to funchlscdn.lechange.cn|<span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span>|:<span class="number">443.</span>.. connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">502</span> Bad Gateway</span><br><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">08</span>:<span class="number">15</span> ERROR <span class="number">502</span>: Bad Gateway.</span><br></pre></td></tr></table></figure></p><p>在浏览器打开效果如图：</p><p>502 Bad Gateway<br>The proxy server received an invalid response from an upstream server. </p><hr><p>KSYUN ELB 1.0.0 </p><p>同时发现金山云负载均衡里对nginx的8000健康检查是“异常”。但是使用http访问却是可以的，效果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@js-develop ~]# wget http://funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8 </span><br><span class="line">-<span class="number">-2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">31</span>:<span class="number">55</span>--  http:<span class="comment">//funchlscdn.lechange.cn/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8</span></span><br><span class="line">Resolving funchlscdn.lechange.cn... <span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span></span><br><span class="line">Connecting to funchlscdn.lechange.cn|<span class="number">120.92</span><span class="number">.158</span><span class="number">.134</span>|:<span class="number">80.</span>.. connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">302</span> Found</span><br><span class="line">Location: http:<span class="comment">//120.92.133.76:8090/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8 [following]</span></span><br><span class="line">-<span class="number">-2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">31</span>:<span class="number">55</span>--  http:<span class="comment">//120.92.133.76:8090/LCLR/2K02135PAK01979/0/0/20170726085033/dev_20170726085033_lpxh73ezzb92xxa8.m3u8</span></span><br><span class="line">Connecting to <span class="number">120.92</span><span class="number">.133</span><span class="number">.76</span>:<span class="number">8090.</span>.. connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">66</span> [application/x-mpegURL]</span><br><span class="line">Saving to: “dev_20170726085033_lpxh73ezzb92xxa8.m3u8”</span><br><span class="line"><span class="number">100</span>%[========================================================================================================================================================&gt;] <span class="number">66</span>          --.-K/s   <span class="keyword">in</span> <span class="number">0</span>s      </span><br><span class="line"><span class="number">2017</span><span class="number">-07</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">31</span>:<span class="number">55</span> (<span class="number">3.02</span> MB/s) - “dev_20170726085033_lpxh73ezzb92xxa8.m3u8” saved [<span class="number">66</span>/<span class="number">66</span>]</span><br></pre></td></tr></table></figure></p><p>于是就叫来开发问一下http和https详细的流程，开发说在http里，设计路线如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http(<span class="number">80</span>)-&gt;开发模块(<span class="number">9001</span>)</span><br></pre></td></tr></table></figure></p><p>而在https里，设计路线如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https(<span class="number">443</span>)-&gt;nginx(<span class="number">8000</span>)-&gt;开发模块(<span class="number">9001</span>)</span><br></pre></td></tr></table></figure></p><p>这时候就发现了问题，原来最早的时候金山云是没有配置https证书的，于是开发们就用nginx的8000端口去监听ssl这样达到https证书的效果，但是后来金山云控制台添加了https证书，就不再需要nginx去配置ssl证书了，再去https监听8000这一步也就是错误的了，于是在负载均衡那里改成了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https(<span class="number">443</span>)-&gt;开发模块(<span class="number">9001</span>)</span><br></pre></td></tr></table></figure></p><p>同时关闭了nginx，这时候再来测试一下https请求，就成功了！<br><img src="/images/ksslb.png" alt="7牛云存储" title="https返回OK"></p><p>其实如果非要用nginx的ssl证书的话，那么的套路就是：开启nginx，但是在负载均衡那里使用tcp协议去监听nginx的8000端口，这样一样能达到效果。</p>]]></content>
    
    <summary type="html">
    
      什么是人，欲望满身。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Next主题添加音乐和将侧栏移动到左边</title>
    <link href="http://yoursite.com/2018/01/12/next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%92%8C%E4%BE%A7%E6%A0%8F%E5%B7%A6%E7%A7%BB/"/>
    <id>http://yoursite.com/2018/01/12/next主题添加音乐和侧栏左移/</id>
    <published>2018-01-12T07:56:38.000Z</published>
    <updated>2018-01-22T04:04:13.870Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>玩Github博客也有一个多月的时间了，现在这个博客也被我折腾的有点样子了，目前博客里添加了如下功能：<br>1.支持头像图片旋转，同时点击头像可以返回主页；<br>2.背景图片随机出现，而且墙内用户也可以顺利访问；<br>3.增加文章打分系统，觉得好可以给五星好评；<br>4.开放评论系统，无需注册直接评论；<br>5.添加了可视加载栏和公益404页面；<br>6.添加桌面小宠物和访客统计；<br>7.添加博客运行时间和代码橙色高亮；</p><p>目前欠缺的功能一个是“相册”，还有一个就是博客标题的加载方式希望更加高逼格。至于SEO和单独域名，我暂时还没有想去做，等将来再加上吧。而这篇文章里主要说的就是“博客添加音乐”和“侧栏左移”这两个事儿。</p><h2><span id="博客添加音乐">博客添加音乐</span></h2><p>Next主题添加网易云音乐不是一个很难的事儿，但是我发现对于非大陆的IP地址（比如我用的是公司VPN，香港IP），侧栏的网易云音乐就无法播放，而且打开博客页面就自动播放音乐这点对来访的用户来说，体验感觉是见仁见智。所以我打算把侧栏的网易云音乐撤掉，在“关于我”里单独放进音乐歌单。</p><p>若单独配置音乐同时不想被IP地址打扰的话可以使用由DIYgod所制作的APlayer。官方材料在这里：<a href="https://aplayer.js.org/docs/#/?id=options" target="_blank" rel="noopener">https://aplayer.js.org/docs/#/?id=options</a> 。</p><p>要使用APlayer需要先在hexo根目录里安装插件：<code>npm install aplayer --save</code></p><p>安装插件OK了后，具体在文章里添加的语法就是：<br><img src="/images/aplayer2.png" alt="7牛云存储" title="好像跟aplayer的语句都会引发错误啊"></p><p>注意：如果lrc用的是这种URL形式，<code>hexo g</code>时请保持网络通畅，如果没有歌词，可以不用添加。</p><p>现在的世面上很少有在线提供歌曲MP3地址的网站了，很多都是下载mp3到本地，这里我推荐一个免费下载MP3的网站：<a href="https://www.tikitiki.cn" target="_blank" rel="noopener">https://www.tikitiki.cn</a> 。里面有QQ音乐、网易云音乐和酷狗的资源，基本上大陆没有被封杀的艺人作品都能在里面找到（抱歉了，陈升先生和黄耀明先生）。然后再搭配七牛云，把下载的MP3和封面图片上传到七牛云存储里，然后搭配提供的外网域名就可以填写MP3地址和封面地址了。如图：<br><img src="/images/7cow.png" alt="7牛云存储" title="MP3上传到七牛云存储"></p><p>如果想做一个歌单，也很简单，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">"autoplay"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"showlrc"</span>: <span class="number">3</span>,</span><br><span class="line">   <span class="string">"mutex"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="string">"music"</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="string">"title"</span>: <span class="string">"歌曲名"</span>,</span><br><span class="line">           <span class="string">"author"</span>: <span class="string">"歌手名"</span>,</span><br><span class="line">           <span class="string">"url"</span>: <span class="string">"https://具体地址.mp3"</span>,</span><br><span class="line">           <span class="string">"pic"</span>: <span class="string">"https://封面图.jpg"</span>,</span><br><span class="line">          "lrc": "https://歌词.lrc"#不愿意加歌词可以不写，注意逗号</span><br><span class="line">        &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"歌曲名"</span>,</span><br><span class="line">            <span class="string">"author"</span>: <span class="string">"歌手名"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"https://具体地址.mp3"</span>,</span><br><span class="line">            <span class="string">"pic"</span>: <span class="string">"https://封面图.jpg"</span>,</span><br><span class="line">           <span class="string">"lrc"</span>: <span class="string">"https://歌词.lrc"</span></span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure></p><p>不过我这个七牛云的账号比较挫，没有做https，只好用http了…</p><h2><span id="把侧栏移动到左边">把侧栏移动到左边</span></h2><p>博客自从安装了宠物之后，发现小宠物与侧栏重叠，看上去感觉很不友好，但是很奇怪，默认的宠物即使调整了botton依旧无法移动，所以我就想那就把整个侧栏移动到了左边，但是发现更改next主题的<code>_config.xml</code>里的“sidebar的position属性”发现并没有效果，后来经过一顿查找，找到了改成左侧栏的方法(适用于next 5.1.3版本)。</p><p>首先，先更改<code>\themes\next\source\css\_common\components\sidebar\sidebar.styl</code>，把第三行的<code>right</code>改成<code>left</code>,如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.sidebar &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>保存之后，打开<code>\themes\next\source\js\src\motion.js</code>，把101行和167行的<code>paddingRight</code>全改成<code>paddingLeft</code>,同时找到类似如下的代码，并替换成如下代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sidebarToggleLine1st = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-first'</span>,</span><br><span class="line"> status: &#123;</span><br><span class="line">   arrow: &#123;<span class="attr">width</span>: <span class="string">'50%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'2px'</span>, <span class="attr">left</span>: <span class="string">'5px'</span>&#125;,</span><br><span class="line">   close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'5px'</span>, <span class="attr">left</span>: <span class="number">0</span>&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine2nd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">   el: <span class="string">'.sidebar-toggle-line-middle'</span>,</span><br><span class="line"> status: &#123;</span><br><span class="line">   arrow: &#123;<span class="attr">width</span>: <span class="string">'90%'</span>&#125;,</span><br><span class="line">   close: &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine3rd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">   el: <span class="string">'.sidebar-toggle-line-last'</span>,</span><br><span class="line"> status: &#123;</span><br><span class="line">   arrow: &#123;<span class="attr">width</span>: <span class="string">'50%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'-2px'</span>, <span class="attr">left</span>: <span class="string">'5px'</span>&#125;,</span><br><span class="line">   close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'-5px'</span>, <span class="attr">left</span>: <span class="number">0</span>&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>保存完毕之后，<code>hexo clean</code>和<code>hexo d -g</code>。刷新一下页面，就大功告成了！</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#hcm=1515719347596232" target="_blank" rel="noopener">https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#hcm=1515719347596232</a> （这篇文章强烈推荐！）<br><a href="http://www.lmnsyunhao.cn/2017/03/29/hexo-next-themes-left-sidebar/" target="_blank" rel="noopener">http://www.lmnsyunhao.cn/2017/03/29/hexo-next-themes-left-sidebar/</a><br><a href="http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html" target="_blank" rel="noopener">http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html</a></p>]]></content>
    
    <summary type="html">
    
      让博客看起来更加舒服更加贴心
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
      <category term="博客美化" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix监控ActiveMQ队列数以及结合Grafana展示</title>
    <link href="http://yoursite.com/2018/01/11/Zabbix%E7%9B%91%E6%8E%A7ActiveMQ%E9%98%9F%E5%88%97%E6%95%B0%E4%BB%A5%E5%8F%8A%E7%BB%93%E5%90%88Grafana%E5%B1%95%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/01/11/Zabbix监控ActiveMQ队列数以及结合Grafana展示/</id>
    <published>2018-01-11T13:43:01.000Z</published>
    <updated>2018-01-22T09:08:16.057Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="在zabbix上监控mq队列">在ZABBIX上监控MQ队列</span></h2><p>众所周知，Zabbix是可以自定义监控项的，那么就代表只要能获得到的数字都可以进入Zabbix的监控范围内。作为消息队列，Activemq里的“消息堆积数”是监控的重点项目之一。</p><p>获取消息堆积数并不是一个很难的事儿，浏览器里登陆MQ的web网页控制台，输入账号密码之后，在Queues的网页里就能看到如下的界面：<br><img src="/images/mqinfo.png" alt="akb48" title="MQ的界面"></p><p>其中Pending Messages就是“等待消息”，Consumers是“消费者”，Enqueued是“入队”，Dequeued是“出队”。<code>入队数=出队数+等待数</code>。</p><p>现在我们要获取到图中的队列叫AggregateQueue里的那个23596，很简单，shell语句是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -u网站用户名:网站密码 http:<span class="comment">//网站外网IP地址:8161/admin/queues.jsp | grep -A 5 "具体的队列名&lt;/a&gt;&lt;/td&gt;"|awk -F '&lt;' '&#123;print $2&#125;'|sed 's/td&gt;//g'|head -2|tail -1</span></span><br></pre></td></tr></table></figure></p><p>这里curl有一个<code>-s</code>的参数，不然会显示curl的状态。如图：<br><img src="/images/curl+s.png" alt="akb48" title="curl -s的效果"></p><p>语句在此，写脚本就很easy了。不过我这里就直接监控具体数字了，没有写脚本，如果要写python脚本的话，我推荐各位移步：<a href="http://blog.51cto.com/sfzhang88/1316789" target="_blank" rel="noopener">http://blog.51cto.com/sfzhang88/1316789</a> ，看一下这篇文章。</p><p>现在把这个监控项添加到具体的<code>zabbix_agentd.conf</code>里吧，具体添加过程可以参看 <a href="http://blog.51cto.com/chenx1242/1839829" target="_blank" rel="noopener">http://blog.51cto.com/chenx1242/1839829</a> ，由于是curl网站，那么直接把这个监控项加到Zabbix-server里就好，然后使用<code>zabbix_get</code>检查一下。有的zabbix 3.x里没有<code>zabbix_get</code>，安装zabbix_get方法：<code>yum install zabbix-get.x86_64</code>。</p><p>zabbix_get检查情况和具体的trigger情况如下：<br><img src="/images/getMQ.png" alt="akb48" title="zabbix_get检查情况"><br><img src="/images/mqtrigger.png" alt="akb48" title="zabbix_get检查情况"></p><h2><span id="配置zabbix结合grafana">配置Zabbix结合Grafana</span></h2><p>我使用的Grafana版本是4.3.2，下载地址：<a href="https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.3.2-1.x86_64.rpm" target="_blank" rel="noopener">https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.3.2-1.x86_64.rpm</a> ，下载完毕之后，直接<code>yum install /路径/grafana-4.3.2-1.x86_64.rpm</code>，由于Grafana使用的是AWS的云存储，可能在墙内的下载会比较吃力，有断开的情况就多试几次。话说Grafana的升级是比较频繁的，半年不到的时间升级了三次，现在最新版本已经是4.6.2。所以说这玩意，其实选择一个稳定的就好。</p><p>启动grafana的方法就是：<code>systemctl start grafana-server.service</code>，配置开机自启动的方法：<code>chkconfig grafana-server on</code>。然后在浏览器里输入<code>grafana外网ip地址：3000</code>就能看到grafana的界面，默认密码：<code>admin/admin</code>，grafana默认的日志存储路径是<code>/var/log/grafana/</code>。</p><p>Grafana与ZABBIX联系的插件下载方式：<code>grafana-cli plugins install alexanderzobnin-zabbix-app</code>，安装之后，重启一下grafana-server，在web界面就会看到插件已经成功安装，如图：<br><img src="/images/grafana1.png" alt="akb48" title="grafana插件web界面"></p><p>其他更多的插件下载可以在grafana的官方网站查看到：<a href="https://grafana.com/plugins" target="_blank" rel="noopener">https://grafana.com/plugins</a> ，用<code>grafana-cli</code>都能搞定，还是那话，墙里的同学速度要慢一点。</p><p>现在配置Zabbix作为Grafana的数据源，首选点击网站上面的红色漩涡标志，选择<code>zabbix</code>，点击<code>Plugin Config</code>，点击<code>Enable</code>，启动Zabbix插件。如图：<br><img src="/images/grafana2.png" alt="akb48" title="启动Zabbix插件"></p><p>再次点击红色漩涡，这次选择<code>Data Sources</code>，点击<code>Add data source</code>，如果插件启动成功，那么在Type里是可以选择<code>zabbix</code>的，然后就是填各种东西，如图：<br><img src="/images/grafana3.png" alt="akb48" title="添加数据源"></p><p>这里有一些要额外说明：<br>1）url这个是zabbix的API地址<code>http://ip/zabbix/api_jsonrpc.php</code>，这个可以在zabbix服务端上可查找<code>find / -name api_*.php</code>；<br>2）username和passwd是zabbix WEB界面的登录用户名和密码，有读的权限即可；<br>3）alerting选择启动，<code>min severity</code>选择high；</p><p>然后点击<code>save &amp; test</code>，如果都正确的话，就会出现success，如图：<br><img src="/images/grafana4.png" alt="akb48" title="保存zabbix资料"></p><h2><span id="在grafana展示趋势图">在Grafana展示趋势图</span></h2><p>点击左上方红色漩涡，<code>Dashboards</code>的地方点击<code>+new</code>，然后在小齿轮的地方选择<code>Templating</code>,如图：<br><img src="/images/grafana5.png" alt="akb48" title="趋势图"></p><p>在Templating里要建立4个模板，其中group的添加方法如下，如果Query正确的话，在点击<code>Include All option</code>的时候，就会有“组”显示出，而且和zabbix里完全一致：<br><img src="/images/grafana6.png" alt="akb48" title="添加模板"></p><p>group添加完了，还有host、application、iteams，添加的大同小异，需要注意的是Query的不同：<br>host的Query：<code>$group.*</code><br>application的Query: <code>$group.$host.*</code><br>iterm的Query:<code>$group.$host.$application.*</code></p><p>以上四个template都搞定之后，应该是这个样子：<br><img src="/images/grafana7.png" alt="akb48" title="搞定templage"></p><p>模板搞定了，下面就是图形展示，选择对应的hosts、application和items就自动有图像生成了！<br><img src="/images/grafana8.png" alt="akb48" title="大功告成！"></p><p>最后说一下页面自动刷新，点击右上角“Last 6 hours”, 在弹出的下拉框中，选择<code>Time range</code>下的<code>Refreshing every</code>选项，点击下拉框按钮，默认应该有“off”和“1m”两个选项。点击“1m” 然后<code>Apply</code>设置，即为每一分钟刷新一次数据的意思。设置成功后，在原来<code>Last 6 hours</code>的后面会出现<code>Refresh every 1m</code>的橙色文字！</p><h2><span id="参考资料">参考资料</span></h2><p>《实践MQ的小demo》<a href="http://www.jianshu.com/p/3a39c8dd4f29" target="_blank" rel="noopener">http://www.jianshu.com/p/3a39c8dd4f29</a></p>]]></content>
    
    <summary type="html">
    
      用了Grafana，图像高大上！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="grafana" scheme="http://yoursite.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>在Python使用yaml的几个例子</title>
    <link href="http://yoursite.com/2018/01/11/%E5%9C%A8Python%E4%BD%BF%E7%94%A8yaml%E7%9A%84%E5%87%A0%E4%B8%AA%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2018/01/11/在Python使用yaml的几个例子/</id>
    <published>2018-01-11T02:11:17.000Z</published>
    <updated>2018-01-22T02:33:38.843Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>python版本：<code>2.7.5</code><br>安装方法：<code>pip install PyYaml</code></p><p>“把变量写进yaml做配置文件，然后python脚本从yaml文件里面取到变量”的方法最近是在python编程里比较流行的配置项方法。yaml更加易读，而且通过缩进表示结构，这一点与python不谋而合。</p><p>Yaml有四个比较常用的用法，分别是<code>load()</code>、<code>dump()</code>、<code>load_all()</code>、<code>dump_all()</code>。这篇文章主要就是了解一下这四个方法。</p><p>首先我们先写一个很简单的test.py：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">yaml_str = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">name: Gakki</span></span><br><span class="line"><span class="string">age: 29</span></span><br><span class="line"><span class="string">job: Actress</span></span><br><span class="line"><span class="string">relationship: Wife</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"> </span><br><span class="line">aaa = yaml.load(yaml_str)</span><br><span class="line">print aaa</span><br></pre></td></tr></table></figure></p><p>执行的话，看到的效果就是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">&#123;<span class="string">'job'</span>: <span class="string">'Actress'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'relationship'</span>: <span class="string">'Wife'</span>, <span class="string">'name'</span>: <span class="string">'Gakki'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>这个aaa的类型是一个<code>字典（dict）</code>，如果要得到里面那个”Gakki”，那么就是aaa[‘name’]。通过load方法，一个字符串变成了一个字典。</p><p>现在把test.py换成如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">yaml_dict = &#123;<span class="string">"name"</span>: <span class="string">"Gakki"</span>,</span><br><span class="line">         <span class="string">"age"</span>: <span class="number">29</span>,</span><br><span class="line">         <span class="string">"job"</span>: <span class="string">"Actress"</span>,</span><br><span class="line">         <span class="string">"relationship"</span>: <span class="string">"Wife"</span></span><br><span class="line">              &#125;</span><br><span class="line">aaa = yaml.dump(yaml_dict, default_flow_style=False)</span><br><span class="line">print aaa</span><br><span class="line">print (type(aaa))</span><br></pre></td></tr></table></figure></p><p>执行后的效果如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">age: <span class="number">29</span></span><br><span class="line">job: Actress</span><br><span class="line">name: Gakki</span><br><span class="line">relationship: Wife</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>可见，通过dump方法，把一个dict变成了一个字符串。</p><p>现在写一个配置文件，假如它叫test.yaml:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Gakki</span><br><span class="line">- <span class="number">29</span></span><br><span class="line">- Actress</span><br><span class="line">- Wife</span><br></pre></td></tr></table></figure></p><p>再来一个test.py，内容如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"> </span><br><span class="line">aaa = yaml.load(file(<span class="string">'test.yaml'</span>, <span class="string">'r'</span>))</span><br><span class="line">print aaa</span><br><span class="line">print (type(aaa))</span><br></pre></td></tr></table></figure></p><p>执行这个test.py：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">[<span class="string">'Gakki'</span>, <span class="number">29</span>, <span class="string">'Actress'</span>, <span class="string">'Wife'</span>]</span><br><span class="line">&lt;type 'list'&gt;    #得到了一个列表</span><br></pre></td></tr></table></figure></p><p>如果把那个test.yaml升级成字典和列表的混合结构，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: Chris</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line"> job: OM Engineer</span><br><span class="line">- name: Gakki</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line"> job: Actress</span><br><span class="line"> relationship: Wife</span><br></pre></td></tr></table></figure></p><p>执行test.py的效果如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">[&#123;<span class="string">'job'</span>: <span class="string">'OM Engineer'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'name'</span>: <span class="string">'Chris'</span>&#125;, &#123;<span class="string">'job'</span>: <span class="string">'Actress'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'relationship'</span>: <span class="string">'Wife'</span>, <span class="string">'name'</span>: <span class="string">'Gakki'</span>&#125;]</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>既然获得的结果是一个包含字典的列表，那么如果要获得“Gakki”就是aaa[1][‘name’]</p><p>如果想要复制和引用，那么要用&amp;和*，比如把test.yaml改成这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: &amp;name Gakki</span><br><span class="line">wife: *name</span><br></pre></td></tr></table></figure></p><p>执行test.py的效果如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Gakki'</span>, <span class="string">'wife'</span>: <span class="string">'Gakki'</span>&#125;</span><br><span class="line">&lt;type <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>在同一个yaml文件中，可以用 — 来分段，这样可以将多个文档写在一个文件中：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> name: Chris</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line"> job: OM Engineer</span><br><span class="line">---</span><br><span class="line"> name: Gakki</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line"> job: Actress</span><br><span class="line"> relationship: Wife</span><br></pre></td></tr></table></figure></p><p>再写一个新的test.py如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">ys = yaml.load_all(file('gakki.yaml', 'r'))    #load_all() 方法会生成一个迭代器，可以用for输出出来</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> ys:</span><br><span class="line">   print y</span><br></pre></td></tr></table></figure></p><p>执行这个py的效果：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@paas-online-crs-001 chentest]# python test.py </span><br><span class="line">&#123;<span class="string">'job'</span>: <span class="string">'OM Engineer'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'name'</span>: <span class="string">'Chris'</span>&#125;</span><br><span class="line">&#123;<span class="string">'job'</span>: <span class="string">'Actress'</span>, <span class="string">'age'</span>: <span class="number">29</span>, <span class="string">'relationship'</span>: <span class="string">'Wife'</span>, <span class="string">'name'</span>: <span class="string">'Gakki'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>参考文档：<a href="https://huilansame.github.io/huilansame.github.io/archivers/recommond-case-file-type-yaml" target="_blank" rel="noopener">https://huilansame.github.io/huilansame.github.io/archivers/recommond-case-file-type-yaml</a></p><p><img src="/images/todalaugh.gif" alt="抱光妹" title="Toda马笑"></p>]]></content>
    
    <summary type="html">
    
      以后要多用yaml格式做配置文件...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Zabbix去监控Redis</title>
    <link href="http://yoursite.com/2018/01/10/%E4%BD%BF%E7%94%A8Zabbix%E5%8E%BB%E7%9B%91%E6%8E%A7Redis/"/>
    <id>http://yoursite.com/2018/01/10/使用Zabbix去监控Redis/</id>
    <published>2018-01-10T14:49:04.000Z</published>
    <updated>2018-01-22T02:32:59.824Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="了解redis的info">了解Redis的info</span></h2><p>要获得Redis的当前情况，使用<code>info</code>命令即可。具体用法：<code>redis-cli -h 127.0.0.1 -p 6379 -a redis_passwd info [参数]</code> 。针对不同的参数就会看到具体的数字，如果没有带参数，那么就会把默认情况写出来，如果带上<code>all</code>参数，那么就会把所有情况都写出来。比如：<code>redis-cli -h 127.0.0.1 -p 6379 -a redis_passwd info server</code>，就会看到redis关于server的一些数据，如下：<br><img src="/images/redisinfo.png" alt="抱光妹" title="redis的info内容"><br>可以看出，从server里可以查询到的是版本号、pid号、配置文件路径等等东西。</p><p>如果参数是client，记录了是客户端的相关信息：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# redis-cli -h 127.0.0.1 -p 6379 info clients</span><br><span class="line"># Clients</span><br><span class="line">connected_clients:64    #已连接客户端的数量（不包括通过从属服务器连接的客户端）</span><br><span class="line">client_longest_output_list:0    #当前连接的客户端当中，最长的输出列表</span><br><span class="line">client_biggest_input_buf:0    #当前连接的客户端当中，最大输入缓存</span><br><span class="line">blocked_clients:0    #正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</span><br></pre></td></tr></table></figure></p><p>如果参数是memory，记录的是内存的相关信息：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# redis-cli -h 127.0.0.1 -p 6379 info memory</span><br><span class="line"># Memory</span><br><span class="line">used_memory:2252984    #由 Redis 分配器分配的内存总量，以字节（byte）为单位</span><br><span class="line">used_memory_human:2.15M    #上面的数字加上了单位</span><br><span class="line">used_memory_rss:9293824    #常驻集大小，即Redis已分配的内存总量。这个值和top、ps等命令的输出一致</span><br><span class="line">used_memory_peak:2607520    #Redis 的内存消耗峰值（以字节为单位）</span><br><span class="line">used_memory_peak_human:2.49M    #上面的数字加上了单位</span><br><span class="line">used_memory_lua:33792    #Lua 引擎所使用的内存大小（以字节为单位）</span><br><span class="line">mem_fragmentation_ratio:4.13    #used_memory_rss 和 used_memory 之间的比率</span><br><span class="line">mem_allocator:jemalloc-3.2.0    #在编译时指定的，Redis所使用的内存分配器。可以是libc、jemalloc或者tcmalloc。</span><br></pre></td></tr></table></figure></p><p>这里要注意！<font color="red">在理想情况下， used_memory_rss 的值应该只比 used_memory 稍微高一点儿</font>（我这个机器就已经属于严重的级别了）。当 rss &gt; used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。内存碎片的比率可以通过 mem_fragmentation_ratio 的值看出。当 used &gt; rss 时，表示 Redis 的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟。</p><p>如果参数是stats，那就是统计的相关信息：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# redis-cli -h 127.0.0.1 -p 6379 info stats</span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:150383    #服务器已接受的连接请求数量</span><br><span class="line">total_commands_processed:500935    #服务器已执行的命令数量</span><br><span class="line">instantaneous_ops_per_sec:0    #服务器每秒钟执行的命令数量</span><br><span class="line">rejected_connections:0    #因为最大客户端数量限制而被拒绝的连接请求数量</span><br><span class="line">sync_full:<span class="number">0</span>    </span><br><span class="line">sync_partial_ok:<span class="number">0</span>    </span><br><span class="line">sync_partial_err:0    #查找数据库键成功的次数</span><br><span class="line">expired_keys:41    #因为过期而被自动删除的数据库键数量</span><br><span class="line">evicted_keys:0    #因为最大内存容量限制而被驱逐（evict）的键数量</span><br><span class="line">keyspace_hits:78121    #查找数据库键成功的次数</span><br><span class="line">keyspace_misses:56    #查找数据库键失败的次数</span><br><span class="line">pubsub_channels:0    #目前被订阅的频道数量</span><br><span class="line">pubsub_patterns:0    #目前被订阅的模式数量</span><br><span class="line">latest_fork_usec:878    #最近一次 fork() 操作耗费的微秒数</span><br></pre></td></tr></table></figure></p><p>如果参数是CPU，那么就会返回CPU的相关信息：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# redis-cli -h 127.0.0.1 -p 6379 info cpu</span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:63.95    #Redis服务器耗费的系统CPU</span><br><span class="line">used_cpu_user:129.54    #Redis服务器耗费的用户CPU </span><br><span class="line">used_cpu_sys_children:1.70    #子进程耗费的系统CPU</span><br><span class="line">used_cpu_user_children:1.03    #子进程耗费的用户CPU</span><br></pre></td></tr></table></figure></p><p>如果参数是keyspace，那么就会返回数据库相关的统计信息：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# redis-cli -h 127.0.0.1 -p 6379 info keyspace</span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys=262,expires=183,avg_ttl=284091259423    #据库的键数量、数据库设置有过期时间的key的数量（这个值减少是正常的）</span><br></pre></td></tr></table></figure></p><p>除了以上之外其他还有更多信息，请移步：<a href="http://redisdoc.com/server/info.html" target="_blank" rel="noopener">http://redisdoc.com/server/info.html</a> 。感谢前人栽树！！！</p><h2><span id="使用zabbix监控redis">使用zabbix监控redis</span></h2><p>用zabbix监控redis是一个很简单的事儿，只需要把需要监控的数据提取出来即可。而提取数据的方法就是利用info去得到对应的数值。</p><p>首先先来一个判断redis服务器连接的脚本：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@func-redis-001 ~]# cat check_redis.sh</span><br><span class="line">#这个脚本是用来zabbix监控自建redis的</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PORT=<span class="string">'6379'</span></span><br><span class="line">PASSWD=‘REDIS密码’ </span><br><span class="line">STATUS_redis=$(redis-cli -h <span class="string">'127.0.0.1'</span> -p $PORT -a $PASSWD ping)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"$STATUS_redis"</span> == <span class="string">'PONG'</span> ];then</span><br><span class="line">        echo <span class="string">'1'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        echo <span class="string">'0'</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>然后更改zabbix_agentd.conf,如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=redis_status[*],redis-cli -h <span class="string">'127.0.0.1'</span> -p $<span class="number">1</span> info | grep -w $<span class="number">2</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $NF&#125;'</span></span><br><span class="line">UserParameter=redis_ping,sudo sh /root/check_redis.sh</span><br></pre></td></tr></table></figure></p><p>修改/etc/sudoers文件如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">zabbix  ALL=(ALL)       NOPASSWD:ALL    #这个是新增</span><br><span class="line">Defaults:zabbix !requiretty        #这个是新增</span><br></pre></td></tr></table></figure></p><p>保存之后，重启zabbix-agent服务，由于我这个redis是通过zabbix-proxy监控的，所以在zabbix-proxy一端用<code>zabbix_get</code>来查看结果：<br><img src="/images/motiorredis.png" alt="抱光妹" title="zabbix_get到redis内容"></p><p>然后在zabbix-proxy的模板里面添加一些需要监控的item即可，有必要的话可以设置trigger+action用来报警，如图：<br><img src="/images/zabbixredis.png" alt="抱光妹" title="配置item"></p><p>最后就是grafana搞一个炫酷的图表来，如图：<br><img src="/images/grafanaredis.png" alt="抱光妹" title="使用grafana展示成果"></p><p>最后一点，关于redis的内存优化，各位可以来看看：<a href="https://cachecloud.github.io/2017/02/16/Redis%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">https://cachecloud.github.io/2017/02/16/Redis%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</a> ，写的很全面了。还有zabbix各种模板整理，有需要的同学也可以去下载：<a href="https://monitoringartist.github.io/zabbix-searcher/" target="_blank" rel="noopener">https://monitoringartist.github.io/zabbix-searcher/</a> 。</p>]]></content>
    
    <summary type="html">
    
      要好好对待自己的那个Redis
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
</feed>
