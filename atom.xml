<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-25T11:08:27.539Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django将某个数据库字段给多个app使用</title>
    <link href="http://yoursite.com/2018/09/25/Django%E5%B0%86%E6%9F%90%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%BB%99%E5%A4%9A%E4%B8%AAapp%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/25/Django将某个数据库字段给多个app使用/</id>
    <published>2018-09-25T06:48:20.000Z</published>
    <updated>2018-09-25T11:08:27.539Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>Django里经常会有这样的一个需求—-同样的一组数据要给很多个app使用。比如是一个运维系统，同样运维人员名单就既要给“项目部署”这个APP用又要给“项目负责人”这个APP用。如果每次都要去跨应用的<code>from XXX.models import xxx</code>很有不友好，所以要解决这个问题，就要用到django自带的<code>ContentTypes</code>框架。<br>Django:<code>2.1.1</code><br>Python:<code>3.6.4</code><br>old app:<code>Articles</code><br>new app:<code>read_stats</code></p><h2><span id="原始状态与前期配置">原始状态与前期配置</span></h2><p>目前在django的控制台页面的情况是这样的：<br><img src="/images/django14.png" alt="paradin"></p><p>可见里面就一个叫<code>Articles</code>的app，点开之后，发现对应的项目也很简单，只有<code>id</code>和<code>title</code>这两个字段而已：<br><img src="/images/django15.png" alt="paradin"></p><p>本次试验的目的就是<strong>新建立一个文章统计计数的app，在里面配置数据库，然后让原来的blog这个app能够使用得到新app的数据项</strong>。</p><p>首先先建立一个专门用来计数的app，比如就叫<code>read_stat</code>，那么在django项目路径下<code>python manage.py startapp read_stats</code>，再把这个新的app添加到settings.py里：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;article&apos;,#先加载django自身的app，然后是第三方app，最后是自己开发的app</span><br><span class="line">    &apos;read_stats&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>编辑一下<code>read_stats</code>里的<code>models.py</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.contenttypes.fields import GenericForeignKey</span><br><span class="line">from django.contrib.contenttypes.models import ContentType</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class ReadNum(models.Model):</span><br><span class="line">    read_num = models.IntegerField(default=0)</span><br><span class="line">    content_type = models.ForeignKey(ContentType,on_delete=models.DO_NOTHING)</span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    content_object = GenericForeignKey(&quot;content_type&quot;,&quot;object_id&quot;)</span><br></pre></td></tr></table></figure></p><p>配置了数据库，肯定需要<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>：<br><img src="/images/django16.png" alt="paradin"></p><p>修改一下负责后台展示的<code>admin.py</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import ReadNum</span><br><span class="line"># Register your models here.</span><br><span class="line"></span><br><span class="line">@admin.register(ReadNum)   #装饰器</span><br><span class="line">class ReadNumAdmin(admin.ModelAdmin):</span><br><span class="line">        list_display = (&apos;read_num&apos;,&apos;content_object&apos;)</span><br></pre></td></tr></table></figure></p><p>此时刷新一下django页面就看到app已经注册成功了：<br><img src="/images/django17.png" alt="paradin"></p><p>由于是新的，所以里面空空如也，点击一下<code>ADD</code>，就可以输入值了，<code>Read num</code>就是设定的“阅读次数”，<code>Content type</code>这个数据是一个选择项，选择对应的app：<code>Article</code>，而<code>Object id</code>就<code>Articles</code>对应的文章编号：<br><img src="/images/django18.png" alt="paradin"></p><p>这样达到了后台配置“将Article应用里的第2篇文章的阅读次数上调到了99次”。</p><h2><span id="数据库的跨app配置">数据库的跨app配置</span></h2><p>刚才手动在后台配置完毕，但是目前这个<code>read_num</code>数据只能是在<code>read_stats</code>这个app里自嗨。要给让<code>Article</code>能够得到这个<code>read_num</code>的话，首先要配置<code>Article</code>下的<code>models.py</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.db.models.fields import exceptions#引入错误给try...except使用</span><br><span class="line">from django.contrib.contenttypes.models import ContentType#引入ContentType</span><br><span class="line">from read_stats.models import ReadNum      #从另一个app里引入类</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class Article(models.Model):</span><br><span class="line">    title = models.CharField(max_length=30)</span><br><span class="line">    content = models.TextField()#这是它原来的数据库内容</span><br><span class="line">    </span><br><span class="line">    #添加一个方法给admin.py使用，如果有就直接返回值（字符串），如果没有object就返回一个0</span><br><span class="line">    def get_read_num(self):</span><br><span class="line">        try:</span><br><span class="line">            ct = ContentType.objects.get_for_model(self)#确定ContentType</span><br><span class="line">            readnum = ReadNum.objects.get(content_type=ct,object_id=self.pk)#每个readnum都是content_type和object_id对应的项</span><br><span class="line">            return readnum.read_num#这样返回就是一个具体的值，不然只是一个数据</span><br><span class="line">        except exceptions.ObjectDoesNotExist:</span><br><span class="line">            return 0</span><br></pre></td></tr></table></figure></p><p>再修改<code>Article</code>下的<code>admin.py</code>，让后台可以体现出来<code>read_num</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Article</span><br><span class="line"># Register your models here.</span><br><span class="line"></span><br><span class="line">@admin.register(Article)</span><br><span class="line">class Article(admin.ModelAdmin):</span><br><span class="line">        list_display = (&apos;id&apos;,&apos;title&apos;,&apos;get_read_num&apos;)#这里新加上刚才的那个方法</span><br></pre></td></tr></table></figure></p><p>由于<code>admin.py</code>里返回的必须是字段，所以我们才在<code>models.py</code>里添加了一个方法去生成字段。</p><p>刷新一下Django后台页面，就看到效果了：<br><img src="/images/django19.png" alt="paradin"></p><p>至此，这个read_num数据就同时被两个APP分享了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://docs.djangoproject.com/en/2.1/ref/contrib/contenttypes/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.1/ref/contrib/contenttypes/</a>    （官方文档）</p>]]></content>
    
    <summary type="html">
    
      本文是杨世航在Bilibili的第19讲，我这里只是做一个自己理解的复述而已
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本返回前端展示之二</title>
    <link href="http://yoursite.com/2018/09/18/Django%E9%80%9A%E8%BF%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E5%B0%86%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E5%BA%94%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2018/09/18/Django通过唯一标识符将后台数据库对应输出/</id>
    <published>2018-09-18T11:18:51.000Z</published>
    <updated>2018-09-19T02:11:27.790Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/09/13/Django%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6%E4%B9%8B%E6%94%B9%E8%BF%9B%E7%89%88/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/13/Django%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6%E4%B9%8B%E6%94%B9%E8%BF%9B%E7%89%88/</a></p><h2><span id="sqlite3的用法">sqlite3的用法</span></h2><p><code>sqlite</code>是django默认的数据库，如果只是存一点简单的数据，那么它是足够胜任的。如果在django的APP文件夹里配置了<code>models.py</code>而且执行了<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>的话，那么在project的文件夹里是会生成<code>db.sqlite3</code>这个文件的。至于如何命令行操作sqlite和python调用sqlite，请去看：<a href="http://blog.51cto.com/zengestudy/1904680" target="_blank" rel="noopener">http://blog.51cto.com/zengestudy/1904680</a> ，里面说的已经很清楚了。</p><p>不过要注意的是<code>execute</code>方法得到的是一个对象，是看不到具体的sql结果。还需要<code>fetchall</code>方法进一步的解析，这样得到的是一个列表，然后取其中的具体元素，如图：<br><img src="/images/django12.png" alt="paradin"></p><h2><span id="使用唯一标识符">使用唯一标识符</span></h2><p>由于yaml的参数是从前端传入的，如果同时有多个人传入数据，那么后端脚本在取参数就会出现错误：<strong>多个人在传入不同的数据之后得到的结果却是一样的，即服务器接收到的最后那个数据返回的结果</strong>。为了不出现这样的混乱，所以我们就要引入唯一标识符保证每个人得到都是他们的结果。</p><p>在数据库里是有一个主键的也就是<code>id</code>，它是django生成数据库的时候自带的<code>private key</code>，每一个id都是唯一的，既然唯一那肯定就是我们选做唯一标识符的首选。至于怎么用它，其实就是在原有的<code>views.py</code>上做一点小手脚。如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">from .models import parameter#引入同级的modes.py里的parameter类</span><br><span class="line"></span><br><span class="line">def create_yaml(request):</span><br><span class="line">    return render(request,'create_yaml.html')#这个页面是用来输入各值</span><br><span class="line"></span><br><span class="line">def get_yaml(request):</span><br><span class="line">    if request.method == 'POST':#如果是post传参，那么就记录下来</span><br><span class="line">        apiVersion = request.POST.get(<span class="string">'apiVersion'</span>,<span class="string">'v1'</span>)</span><br><span class="line">        kind = request.POST.get(<span class="string">'kind'</span>,<span class="string">'RC'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        replicas = request.POST.get(<span class="string">'replicas'</span>,<span class="string">'1'</span>)</span><br><span class="line">        labels_app = request.POST.get(<span class="string">'labels_app'</span>,None)</span><br><span class="line">containers_name = request.POST.get(<span class="string">'containers_name'</span>,None)</span><br><span class="line">containers_image = request.POST.get(<span class="string">'containers_image'</span>,None)</span><br><span class="line">containerPort1 = request.POST.get(<span class="string">'containerPort1'</span>,None)</span><br><span class="line">containerPort2 = request.POST.get(<span class="string">'containerPort2'</span>,None)</span><br><span class="line">       containers_name2 = request.POST.get(<span class="string">'containers_name2'</span>,None)</span><br><span class="line">       containers_image2 = request.POST.get(<span class="string">'containers_image2'</span>,None)</span><br><span class="line">       containerPort2_1 = request.POST.get(<span class="string">'containerPort2_1'</span>,None)</span><br><span class="line">       containerPort2_2 = request.POST.get(<span class="string">'containerPort2_2'</span>,None)</span><br><span class="line">       signer = request.POST.get(<span class="string">'signer'</span>, <span class="string">'Micheal Jackson'</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">'404'</span>)</span><br><span class="line"></span><br><span class="line">   Parameter = parameter()#将parameter实例化</span><br><span class="line">   Parameter.apiVersion = apiVersion#把刚刚从前端得到的值对应赋值</span><br><span class="line">   Parameter.kind = kind</span><br><span class="line">   Parameter.name = name</span><br><span class="line">   Parameter.replicas = replicas</span><br><span class="line">   Parameter.labels_app = labels_app</span><br><span class="line">   Parameter.containers_name = containers_name</span><br><span class="line">   Parameter.containers_image = containers_image</span><br><span class="line">   Parameter.containerPort1 = containerPort1</span><br><span class="line">   Parameter.containerPort2 = containerPort2</span><br><span class="line">   Parameter.containers_name2 = containers_name2</span><br><span class="line">   Parameter.containers_image2 = containers_image2</span><br><span class="line">   Parameter.containerPort2_1 = containerPort2_1</span><br><span class="line">   Parameter.containerPort2_2 = containerPort2_2</span><br><span class="line">   Parameter.save()        #保存修改</span><br><span class="line"></span><br><span class="line">   yaml = parameter.objects.get(id=Parameter.id)#通过object.get方法是得到保存的所有值，但是我们只要本次的值，也就是id与private key一致的</span><br><span class="line">   return HttpResponse('api版本:%s yaml类型:%s yaml名称:%s 副本数量:%s yaml所属APP:%s 容器名称:%s 容器镜像名:%s'  % (yaml.apiVersion,yaml.kind,yaml.name,yaml.replicas,yaml.labels_app,yaml.containers_name,yaml.containers_image)))#输出部分刚输入的值到页面，检查一下是否正确</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> createyaml <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(r<span class="string">'create_yaml/'</span>, views.create_yaml),</span><br><span class="line">    path(r<span class="string">'get_yaml/'</span>, views.get_yaml),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动django，在前端页面测试一下看看是否得到的结果就是本次输入的结果，如图：<br><img src="/images/django13.gif" alt="paradin"></p><p>可以看到，返回的页面正确的输出了本次各个参数！剩下还有三部分：</p><ol><li>做一个python脚本，把脚本加工的结果返回到前端；</li><li>用css/js把界面加工一下；</li><li>加入javascript，在前端输入的时候判断输入值是否合法；</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.51cto.com/lannyma/1735751" target="_blank" rel="noopener">http://blog.51cto.com/lannyma/1735751</a><br><a href="http://www.liujiangblog.com/course/django/152" target="_blank" rel="noopener">http://www.liujiangblog.com/course/django/152</a><br><a href="https://www.jianshu.com/p/46188b39eae5" target="_blank" rel="noopener">https://www.jianshu.com/p/46188b39eae5</a></p>]]></content>
    
    <summary type="html">
    
      使用唯一标识符将后台数据库对应输出
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>调用阿里云api去修改域名对应IP</title>
    <link href="http://yoursite.com/2018/09/17/%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91api%E5%8E%BB%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2018/09/17/调用阿里云api去修改域名/</id>
    <published>2018-09-17T06:13:26.000Z</published>
    <updated>2018-09-17T09:42:04.761Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="问题简述">问题简述</span></h2><p>以阿里云厂家为例，假设我们有一个网站，它的服务器、数据库、负载均衡都部署在杭州区可用区B,将IP A绑定到某个域名上，启动了系统之后为客户提供服务。那么如果现在要对这套系统进行灾备，应该怎么做？</p><p>第一个方法：在可用区D复制一模一样的环境，然后以“主备服务器组”的方式配置一下负载均衡：如果端口监听不正常就会切换到备用服务器上，监听正常了再切回来。但是这个方式有一个问题，就是当前模式<strong>阿里云的主备切换是不支持HTTPS/HTTP的</strong>，如图：<br><img src="/images/aliyundns2.png" alt="akb48"></p><p>可见，这种方式是有很大的局限性的。</p><p>那既然同是花钱，干脆就做一个异地容灾，整套系统在其他的地理区域比如上海区也复制一遍，把上海区的B IP也绑定到这个网站域名上，阿里云的域名解析是支持多IP绑定同一个域名的。平时的时候，上海区的IP被域名解析的权重是0，一旦杭州区出现了某些线路方面的硬件问题，那么就将杭州区的权重降成0，同时提高上海区的权重，这样用户就会直接访问到上海区的系统。</p><p>理想是丰满的，但是现实是骨感的，因为阿里云的权重配置区域是1~100，而不是0~100，如下图：<br><img src="/images/aliyundns1.png" alt="akb48"></p><p>也就是说这个云解析的负载均衡是不能当做主备切换使用的，如果想要通过阿里云解析来达到主备切换的目的，方法只能是<code>升级VIP DNS，配置网站监控</code>，具体操作是<a href="https://help.aliyun.com/document_detail/59372.html?spm=5176.215331.1147916.23.65de614dac85Sw" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/59372.html?spm=5176.215331.1147916.23.65de614dac85Sw</a> 。但是这个VIP升级是需要钱的，如果监控的网站越多，花费越大，如果老板不肯掏这份钱，那就只能换条路走。</p><h2><span id="脚本内容">脚本内容</span></h2><p>想来想去，还是老办法—-调用阿里云API修改云解析记录达到切换IP的目的。脚本如下，这里我采取了命令行交互的形式，实际上都是将域名IP写死的：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line">#此脚本版本是2.7，用来修改阿里云云解析IP地址，使用之前请先安装sdk:pip install aliyun-python-sdk-domain</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.request <span class="keyword">import</span> CommonRequest</span><br><span class="line">print <span class="string">"请注意！本脚本只会修改lechange.com域名下的A记录！！！"</span></span><br><span class="line">RRKeyWord = raw_input(<span class="string">"请输入您要修改的域名："</span>)</span><br><span class="line">Value = raw_input(<span class="string">"请输入新的IP："</span>)</span><br><span class="line">client = AcsClient(<span class="string">'这里是AK'</span>, <span class="string">'这里是SK'</span>,<span class="string">'cn-hangzhou'</span>)</span><br><span class="line">request = CommonRequest()</span><br><span class="line">request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">request.set_domain(<span class="string">'alidns.aliyuncs.com'</span>)</span><br><span class="line">request.set_method(<span class="string">'POST'</span>)</span><br><span class="line">request.set_version(<span class="string">'2015-01-09'</span>)</span><br><span class="line"></span><br><span class="line">def getRecordId(RRKeyWord):</span><br><span class="line">        global RecordId</span><br><span class="line">        request.set_action_name(<span class="string">'DescribeDomainRecords'</span>)</span><br><span class="line">        request.add_query_param('DomainName', 'lechange.com')#这里写死了lechange.com域名</span><br><span class="line">        request.add_query_param(<span class="string">'RRKeyWord'</span>, RRKeyWord)</span><br><span class="line">        request.add_query_param(<span class="string">'TypeKeyWord'</span>, <span class="string">'A'</span>)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        encode_json = json.loads(response)</span><br><span class="line">        RecordId = encode_json['DomainRecords']['Record'][0]['RecordId']#需要获取这个RecordId</span><br><span class="line">                </span><br><span class="line">def UpdateDomainRecord(RRKeyWord,Value):</span><br><span class="line">        request.set_action_name(<span class="string">'UpdateDomainRecord'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'RecordId'</span>, RecordId)</span><br><span class="line">        request.add_query_param(<span class="string">'RR'</span>, RRKeyWord)</span><br><span class="line">        request.add_query_param(<span class="string">'Type'</span>, <span class="string">'A'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'Value'</span>, Value)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">        getRecordId(RRKeyWord)</span><br><span class="line">        UpdateDomainRecord(RRKeyWord,Value)</span><br></pre></td></tr></table></figure></p><p>这个脚本比较粗糙，可以改进的地方如下：</p><ol><li>判断输入的域名和IP是否符合格式的规范；</li><li>判断输入的域名是否存在；</li><li>如果添加错误，对应的报错；</li><li>搭配爬虫页面脚本使用，如果爬虫页面脚本出现了异常，那么直接启动这个脚本，并且发送微信/邮件通知！</li></ol><h2><span id="效果展示">效果展示</span></h2><p>整个脚本启动后效果如下：<br><img src="/images/aliyundns3.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://help.aliyun.com/document_detail/29776.html?spm=a2c4g.11186623.2.37.d31b31dfNqojPT" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/29776.html?spm=a2c4g.11186623.2.37.d31b31dfNqojPT</a><br><a href="https://help.aliyun.com/document_detail/44657.html?spm=a2c4g.11186623.6.579.4d1d7cd208aSgl" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/44657.html?spm=a2c4g.11186623.6.579.4d1d7cd208aSgl</a></p>]]></content>
    
    <summary type="html">
    
      “山竹”台风近日肆虐深圳香港地区，为了防止当地机房崩溃，所以就有这篇文章
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本返回前端展示之一</title>
    <link href="http://yoursite.com/2018/09/13/Django%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6%E4%B9%8B%E6%94%B9%E8%BF%9B%E7%89%88/"/>
    <id>http://yoursite.com/2018/09/13/Django制作前端页面生成yaml文件之改进版/</id>
    <published>2018-09-13T01:20:16.000Z</published>
    <updated>2018-09-18T12:15:22.198Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>之前搞了一个简易版的“通过前端页面生成yaml”的方法，地址在此：<a href="https://rorschachchan.github.io/2018/09/03/制作前端页面生成yaml文件/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/03/制作前端页面生成yaml文件/</a> 。但是这个方法实际上有很多的不足，比如说每一次生成记录就消失了，无法追溯，所以要引入数据库，把每一次的数据保存到数据库里。</p><p>整体的流程设计还是跟以前的一样：</p><ol><li>制作一个<code>create_yaml.html</code>网页让用户输入相关数值，并且有两个按钮，一个是重置，一个是生成yaml供K8s使用；</li><li>数值保存到django的数据库里；</li><li>做一个脚本，脚本从django数据库里取值然后执行；</li><li>脚本的结果返回到<code>get_yaml</code>网页，它也有两个按钮，一个是返回，一个是执行此yaml；</li></ol><p><strong>本篇文章的内容是第一步和第二步</strong>，Django的project名是<code>Kubernetes</code>，app名是<code>createyaml</code>。</p><h2><span id="配置数据库">配置数据库</span></h2><p>由于这个小系统保存的数据量不多，所以我就直接使用django默认的<code>db.sqlite3</code>数据库。跑到<code>Kubernetes/createyaml</code>的<code>models.py</code>里，根据yaml的实际情况编写一下数据库各字段：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"> </span><br><span class="line"># Create your models here.</span><br><span class="line">class parameter(models.Model):</span><br><span class="line">       type = (</span><br><span class="line">               (U<span class="string">'Pod'</span>,<span class="string">'Pod'</span>),</span><br><span class="line">               (U<span class="string">'Service'</span>,<span class="string">'Service'</span>),</span><br><span class="line">               (U<span class="string">'Deployment'</span>,<span class="string">'Deployment'</span>),</span><br><span class="line">               (U<span class="string">'ReplicationController'</span>,<span class="string">'ReplicationController'</span>),</span><br><span class="line">                   )</span><br><span class="line">       api_type = (</span><br><span class="line">                    (U<span class="string">'v1'</span>,<span class="string">'v1'</span>),</span><br><span class="line">                    (U<span class="string">'extensions/v1beta1'</span>,<span class="string">'beta1'</span>),</span><br><span class="line">                   )</span><br><span class="line">       apiVersion = models.CharField(verbose_name=<span class="string">'API版本'</span>,max_length=<span class="number">20</span>,choices=api_type)</span><br><span class="line">       kind = models.CharField(verbose_name=<span class="string">'任务类型'</span>,max_length=<span class="number">50</span>,choices=type)</span><br><span class="line">       name = models.CharField(verbose_name=<span class="string">'任务名称'</span>,max_length=<span class="number">100</span>)</span><br><span class="line">       replicas = models.CharField(verbose_name='任务数量',max_length=50,default='1')#默认情况下副本数是1</span><br><span class="line">       labels_app = models.CharField(verbose_name=<span class="string">'APP名称'</span>,max_length=<span class="number">100</span>)</span><br><span class="line">       containers_name = models.CharField(verbose_name=<span class="string">'容器1名称'</span>,max_length=<span class="number">100</span>)</span><br><span class="line">       containers_image = models.CharField(verbose_name=<span class="string">'容器1镜像'</span>,max_length=<span class="number">100</span>)</span><br><span class="line">       containerPort1 = models.CharField(verbose_name='容器1开放端口1',max_length=25,blank=True)#可以为空，下同</span><br><span class="line">       containerPort2 = models.CharField(verbose_name=<span class="string">'容器1开放端口2'</span>,max_length=<span class="number">25</span>,blank=True)</span><br><span class="line">       containers_name2 = models.CharField(verbose_name=<span class="string">'容器2名称'</span>,max_length=<span class="number">100</span>,blank=True)</span><br><span class="line">       containers_image2 = models.CharField(verbose_name=<span class="string">'容器2镜像'</span>,max_length=<span class="number">100</span>,blank=True)</span><br><span class="line">       containerPort2_1 = models.CharField(verbose_name=<span class="string">'容器2开放端口1'</span>,max_length=<span class="number">25</span>,blank=True)</span><br><span class="line">       containerPort2_2 = models.CharField(verbose_name=<span class="string">'容器2开放端口2'</span>,max_length=<span class="number">25</span>,blank=True)</span><br><span class="line">       signer = models.CharField(verbose_name=<span class="string">'登记人'</span>,max_length=<span class="number">50</span>, <span class="keyword">default</span>=<span class="string">'system'</span>)</span><br><span class="line">       signtime = models.DateField(auto_now_add= True)#默认添加当前时间</span><br><span class="line"></span><br><span class="line">#返回相应的值</span><br><span class="line">def __unicode__(self):</span><br><span class="line"><span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></p><p>保存之后，<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>，就会看到<code>db.sqlite3</code>文件在<code>Kubernetes</code>这个project文件夹里诞生了。</p><h2><span id="配置url路由">配置URL路由</span></h2><p>根据整体的流程设计所说，url.py就新增了如下几个路由：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(r'create_yaml/', views.create_yaml),#create_yaml网页里的内容就是views.py里的create_yaml函数，下同</span><br><span class="line">    path(r<span class="string">'get_yaml/'</span>, views.get_yaml),</span><br><span class="line">    path(r<span class="string">'addok/'</span>, views.addok),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在admin后台界面也要体现出每一次数据输入，于是就配置一下<code>Kubernetes/createyaml/admin.py</code>:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line">from .models import parameter#把parameter这个class引入</span><br><span class="line"># Register your models here.</span><br><span class="line"></span><br><span class="line">class parameterAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display = ('name','apiVersion','kind','replicas','labels_app','containers_name','containers_image','containerPort1','containers_name2','containers_image2','containerPort2_1','signer','signtime')#把models.py里的字段都添加进去</span><br><span class="line">    exclude = ['signer']#signer字段不要添加</span><br><span class="line">    def save_model(self, request, obj, form, change):</span><br><span class="line">        obj.signer = str(request.user)</span><br><span class="line">        obj.save()</span><br><span class="line"></span><br><span class="line">admin.site.register(parameter,parameterAdmin)</span><br></pre></td></tr></table></figure></p><p>准备工作完事，开始搞前端页面。</p><h2><span id="配置前端">配置前端</span></h2><p>在<code>createyaml</code>文件夹下建立一个<code>template</code>文件夹，里面先写一个<code>create_yaml.html</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">                &lt;title&gt;生成K8S所用的YAML文件&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;用户输入：&lt;/h1&gt;</span><br><span class="line">                &lt;h2&gt;请注意！大小写敏感！！！&lt;/h2&gt;</span><br><span class="line">                &lt;form action=&quot;/get_yaml/&quot; method=&quot;post&quot; name=&apos;addyaml&apos;&gt;</span><br><span class="line">&lt;!-- form action的意思就是，submit的指向就是/get_yaml/，以post形式传递 --&gt;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                API版本：</span><br><span class="line">                &lt;select name=&apos;apiVersion&apos;&gt;</span><br><span class="line">                        &lt;option value=&quot;v1&quot; selected&gt;v1&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;extensions/v1beta1&quot;&gt;beta1&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;&lt;br /&gt;</span><br><span class="line">                任务类型：</span><br><span class="line">                &lt;select name=&apos;kind&apos;&gt;</span><br><span class="line">                        &lt;option value=&quot;Pod&quot; selected&gt;Pod&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;Service&quot;&gt;Service&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;Deployment&quot;&gt;Deployment&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;ReplicationController&quot;&gt;ReplicationController&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;&lt;br /&gt;</span><br><span class="line">                任务名称：&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                任务数量：&lt;input type=&quot;text&quot; placeholder=&quot;请输入阿拉伯数字&quot; name=&quot;replicas&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                APP名称：&lt;input type=&quot;text&quot; placeholder=&quot;对应的APP&quot; name=&quot;labels_app&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器1名称：&lt;input type=&quot;text&quot; name=&quot;containers_name&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器1镜像：&lt;input type=&quot;text&quot; name=&quot;containers_image&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器1开放端口1：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort1&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器1开放端口2：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2名称：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containers_name2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2镜像：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containers_image2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2开放端口1：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2_1&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2开放端口2：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2_2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                &lt;input type=&quot;reset&quot; value=&quot;清除所有&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;submit&quot; value=&quot;生成yaml文件&quot; /&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>写完了之后，再来一个<code>addok.html</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;添加成功&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            text-decoration:none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;添加成功&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>前端准备完毕。</p><h2><span id="配置viewspy">配置views.py</span></h2><p>views.py里的具体函数是整个django的主心骨，内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"></span><br><span class="line">def create_yaml(request):</span><br><span class="line">    return render(request,'create_yaml.html')#只是展现一个页面而已</span><br><span class="line"></span><br><span class="line">def get_yaml(request):</span><br><span class="line">    if request.method == 'POST':#如果是POST就获取前端传入的值</span><br><span class="line">        apiVersion = request.POST.get(<span class="string">'apiVersion'</span>,<span class="string">'v1'</span>)</span><br><span class="line">        kind = request.POST.get(<span class="string">'kind'</span>,<span class="string">'RC'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        replicas = request.POST.get(<span class="string">'replicas'</span>,<span class="string">'1'</span>)</span><br><span class="line">        labels_app = request.POST.get(<span class="string">'labels_app'</span>,None)</span><br><span class="line">        containers_name = request.POST.get(<span class="string">'containers_name'</span>,None)</span><br><span class="line">        containers_image = request.POST.get(<span class="string">'containers_image'</span>,None)</span><br><span class="line">        containerPort1 = request.POST.get(<span class="string">'containerPort1'</span>,None)</span><br><span class="line">        containerPort2 = request.POST.get(<span class="string">'containerPort2'</span>,None)</span><br><span class="line">        containers_name2 = request.POST.get(<span class="string">'containers_name2'</span>,None)</span><br><span class="line">        containers_image2 = request.POST.get(<span class="string">'containers_image2'</span>,None)</span><br><span class="line">        containerPort2_1 = request.POST.get(<span class="string">'containerPort2_1'</span>,None)</span><br><span class="line">        containerPort2_2 = request.POST.get(<span class="string">'containerPort2_2'</span>,None)</span><br><span class="line">        signer = request.POST.get(<span class="string">'signer'</span>, <span class="string">'Micheal Jackson'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'404'</span>)</span><br><span class="line"></span><br><span class="line">    from createyaml.models import parameter#数据库对应项进行赋值</span><br><span class="line">    Parameter = parameter()</span><br><span class="line">    Parameter.apiVersion = apiVersion</span><br><span class="line">    Parameter.kind = kind</span><br><span class="line">    Parameter.name = name</span><br><span class="line">    Parameter.replicas = replicas</span><br><span class="line">    Parameter.labels_app = labels_app</span><br><span class="line">    Parameter.containers_name = containers_name</span><br><span class="line">    Parameter.containers_image = containers_image</span><br><span class="line">    Parameter.containerPort1 = containerPort1</span><br><span class="line">    Parameter.containerPort2 = containerPort2</span><br><span class="line">    Parameter.containers_name2 = containers_name2</span><br><span class="line">    Parameter.containers_image2 = containers_image2</span><br><span class="line">    Parameter.containerPort2_1 = containerPort2_1</span><br><span class="line">    Parameter.containerPort2_2 = containerPort2_2</span><br><span class="line">    Parameter.save()        #保存到数据库里</span><br><span class="line"></span><br><span class="line">    # 重定向到添加成功页面</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/addok/'</span>)</span><br><span class="line"></span><br><span class="line">def addok(request):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'addok.html'</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="效果验证">效果验证</span></h2><p>启动django之后，首先先去admin后台看一下当前的情况，如图：<br><img src="/images/django9.png" alt="paradin"></p><p>可以看到里面是有几个记录的，那么我们现在登录<code>外网地址:端口/create_yaml</code>，输入一些字段看一下效果：<br><img src="/images/django10.gif" alt="paradin"></p><p>再返回到admin后台刷新，发现刚才新加的任务已经体现出来了：<br><img src="/images/django11.png" alt="paradin"></p><p>至此，就达到了“前端html传入数据，后端数据库记录”的效果。</p>]]></content>
    
    <summary type="html">
    
      将前端页面存储到后台sqlite数据库，脚本通过数据库取值进行操作
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一篇旧文----《当今中国会不会发生革命》</title>
    <link href="http://yoursite.com/2018/09/06/%E4%B8%80%E7%89%87%E6%97%A7%E6%96%87-%E5%BD%93%E4%BB%8A%E4%B8%AD%E5%9B%BD%E4%BC%9A%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E9%9D%A9%E5%91%BD/"/>
    <id>http://yoursite.com/2018/09/06/一片旧文-当今中国会不会发生革命/</id>
    <published>2018-09-05T16:10:22.000Z</published>
    <updated>2018-09-07T01:54:18.561Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>苏振华对本文的初稿提出了中肯的批评和建议，在此致以感谢。</p><p>二十世纪中国是一个革命的世纪。二十世纪上半叶，中国经历的主要革命运动有辛亥革命、二次革命、五四运动、北伐战争和共产主义革命。1949年中国共产党取得政权后，又搞了许多具有社会革命性质的社会运动，其中最为著名的有土地改革、人民公社运动、大跃进和文化大革命。改革开放后，中国共产党逐渐从一个革命党转变为执政党，但是中国的一些知识分子、学生和民众却从共产党手中接过“革命的旗帜”，于是就有了1989年的学生运动以及最近的“零八宪章运动”和所谓“茉莉花运动”等集体行动的事件。当然也有知识分子提出中国应该“告别革命”，应该反对激进主义。这是一种应然性吁求，但问题在于：中国是否会再发生（或者能避免）一场革命性的社会动荡？</p><p>这一问题甚至引发中国政治精英的广泛关注。最近网上有文章说中共高层有不少人在阅读托克维尔（Alexis de Tocqueville）的《旧制度与大革命》（L’Ancien regime et la Revolution），幷说王岐山看完此书后曾担忧地表示：中国的现代化转型不会那么顺利；中国人自己的代价也没有付够。当然，革命一旦发生，人民将付出的代价在一定程度上是由革命性质决定。一般来说，政治革命（一场只改变政权的性质，而不改变社会经济结构的革命）给社会带来的震荡要远远低于社会革命（一场既改变政权的性质，又改变社会经济结构的革命），非暴力革命给社会带来的震荡要远远低于暴力革命。王岐山也许是在担心中国会发生一场暴力革命，甚至是暴力性的社会革命。</p><p>不管上述中共高层读书的传说可信度如何，有一点十分明确：虽然近年来中国政府在维护稳定上花了很大的力气，中国的经济在近三十年来取得了举世瞩目的发展，民众的生活水平在近年来也有了很大的提高，但中共高层丝毫没有减轻对在中国再发生一次革命的可能性的焦虑。中共高层为甚么会如此忧虑？当前中国与政权稳定相关的根本问题是甚么？本文试图在理论的指导下对当前中国面临的困境作出分析。</p><h1><span id="一-革命为甚么会发生理论简述">一　革命为甚么会发生：理论简述</span></h1><p>早期的西方理论都把现代化过程中所发生的巨大社会变迁看作是一个国家发生革命的主要诱导因子。这一理论的逻辑很简单：现代化带来了传统的生活方式和价值观的变化，给身处其中的人们带来很大的不适应和不确定性；同时，现代化过程也削弱了传统社会组织对于人们的控制，给革命造就了机会1。的确，世界上的革命无一不发生在正在发生巨大变化的社会之中，而巨大的社会变迁确实会给身处其境的人们带来多方面的不确定性。从这个意义上说，这种理论自有它的道理。但是，世界上每一个国家在现代化过程中都经历过巨大的社会变迁，却不是每个国家都发生了剧烈的革命。社会变迁充其量只能是引发革命的一个必要条件。</p><p>在过去的大多数时间，有些学者也常用阶级或者是利益集团的视角来解释一个国家革命的成功与否2。他们的逻辑也很简单：如果一个国家中的一个主要阶级拥护和加入了革命，那么革命就会成功；反之革命就不会发生，就是发生了也会失败。当今中国的不少学者也仍然会自觉或者不自觉地运用这一视角来分析中国社会的危机所在。依笔者所见，这类分析方法表现出了左派知识分子的天真，而反映出来的则是这些知识分子看待问题时的教条性。</p><p>这并不是说人们在现代社会中不会产生阶级认同。问题在于：每一个人在社会上都会同时拥有许多身份（比如一个人同时可具有如下的身份：工人、浙江人、男人、某些圈子中的一员、某个俱乐部的成员等），并且具有某一身份的人们之间又存在着巨大的差别（比如工人之间就有蓝领工和白领工、技术工和非技术工、熟练工和非熟练工、临时工和正式职工之间的差别等）。因此，除非存在巨大无比的外力，比如国家对社会上的一个主要人群的利益完全漠视，幷且对这一人群的抗争进行严厉的和系统性的镇压，否则那些被天真的知识分子所认定的“阶级”就很难形成强烈的认同感，去完成知识分子所赋予他们的“历史使命”。</p><p>当今世界只有两类大型群体会有着较为“天然的”强大认同感，那就是族群和宗教群体。他们所发起的抗争和革命也因此往往有较大的威力。在很大的程度上，当今所流行的各种“社会分层研究”都是过去知识分子的研究误区的某种产物。不同的社会分层方法除了对了解社会流动和指导政府的公共政策制订有一定的应用性意义外，从社会行动或革命的角度来看，其价值却十分有限。这当然是题外话。</p><p>1970年代后，西方学者开始强调国家的性质和结构性行为对革命产生乃至成功的影响3。这类理论背后的一个核心逻辑是：在当代交通和通讯技术的支持下，现代国家获得了古代国家完全没有的渗透社会的能力。与古代国家相比，现代国家的管治领域不但十分宽泛，而且它的政令更能严重影响到社会上绝大多数成员的利益。现代国家的这一性质导致了如下三个后果：第一，国家的错误政策非常容易触发民众大规模的针对国家的怨恨情绪；第二，国家的强势刺激了人们组织起来进行抗争，要求国家颁布和施行对自己群体有利的法律和社会政策；第三，部分人就会想到通过夺取国家的权力（即革命）来彻底改变国家的性质，通过掌握国家权力来推行他们的理想。在这种所谓“国家中心论”的视角下，西方学者做了大量的研究，幷逐渐产生了以下三点共识（即衡量一个国家发生革命可能性的三个维度）：第一，革命不容易发生在一个有着效率较高的官僚集团的国家（官僚集团内的程序政治会增强国家精英的团结、国家决策的合理性和国家镇压机器的有效性）；第二，革命不容易发生在一个对社会精英有着很强吸纳能力的国家；第三，革命不容易发生在一个对社会有着很强渗透力（不仅仅指由国家所控制的交通和通讯工具，而且指警察机构对社会的监控能力）的国家4。</p><p>以上的三个维度有很强的解释力。的确，早期的革命，包括法国革命（1789）、俄国革命（1917）、中国革命（1949）和伊朗革命（1979），都发生在用以上三个维度来衡量处境都不太妙的国家。其实，官僚集团的效率、国家对社会精英的吸纳能力，以及国家对社会的渗透能力，是任何国家进行有效统治的关键要素。一个没有这些能力或者是这三方面能力不足的现代国家，无论是民主国家还是威权国家，都会在其运行过程中遇到大量的困难。但问题是，长期以来在分析革命的可能性时，西方学者过于借重了这三个因素，因此直到1980年代他们还在强调苏联和东欧国家具有很大的政治稳定性（因为这些国家都有着比较有效率的官僚集团、对社会精英的吸纳能力和对社会的渗透力）5，而完全没有料想到革命竟然马上就在这些国家发生了，而且其中不少国家的革命都取得了成功。</p><p>笔者认为，在分析苏联和东欧国家爆发革命的可能性时，西方学者都忽略了国家权力的合法性基础和国家政权稳定性之间的关系这一维度的重要性。具体来说，一个国家的权力愈是建立在较为稳定的合法性基础之上，这一国家就愈不可能发生革命。苏联和东欧之所以发生革命，不仅仅是因为它们的经济没搞好、它们的军事落后、它们在民族问题上走入误区、它们的领导人采取了错误的政策等（这些因素都很重要），而且更在于这些国家没有把政权建立在一个比较稳定的合法性基础之上。笔者多年来对中外各国革命作出分析时不断强调国家的合法性基础与政权稳定性之间的紧密关系6。笔者认为，西方学者所着重的三个维度都是国家统治手段中偏“硬件”性质的成份，而国家的合法性基础和政权稳定性则构成了国家统治的关键性“软件”，它们缺一不可。</p><h1><span id="二-合法性和政权的稳定性">二　合法性和政权的稳定性</span></h1><p>国家虽然掌握着强大的官僚组织以及军队与警察等武装力量，但是其统治的有效性仍必须依赖于国家政权在大众（包括国家官员）心目中的合法性。考察古今中外的统治史，我们会发觉国家在寻求统治合法性时只能采取以下三种方式：通过一种价值性的承诺、通过提供公共服务、通过一个普遍被接受的国家领导选拔程序。相应地，我们可以界定三种理想状态的国家合法性基础：意识形态型、绩效型和程序型7。如果一个国家统治的正当性是基于一个被民众广为信仰的价值体系，我们可以说这个国家的统治是基于意识形态合法性；如果一个国家统治的正当性来源于国家向社会提供公共物品的能力时，这个国家的统治则基于绩效合法性；如果一个国家的领导人是通过一个被大多数人所认可的程序而产生，这一国家的统治则基于程序合法性。</p><p>需要强调的是，以上定义的是国家合法性来源的三个理想类型（ideal types）。现实中，任何国家都不会把合法性完全建立在某一理想类型之上；或者说，任何国家的合法性来源都是这些理想类型的一个混合体。但是，在某一历史时期内，某一理想类型往往会成为一个国家统治最为重要的基础，幷在很大程度上定义了一个国家的性质。</p><p>现在让我们来讨论不同的国家合法性基础和政权稳定性之间的关系。</p><h2><span id="一意识形态合法性">（一）意识形态合法性</span></h2><p>意识形态是国家统治的一个最为根本的合法性基础。一个国家如果把执政基础完全建立在某一意识形态之上，那是不行的；但是，一个国家的执政如果没有意识形态作为基础，则是万万不行的。当大多数的民众都认同国家所推崇的某一意识形态时，这种意识形态不仅仅为国家的统治提供了道德性依据，而且为社会提供了一个“核心价值观”。如果一个国家有一个被广为接受的核心价值观，统治成本就会大大降低。</p><p>需要强调的是，核心价值观不能是“八荣八耻”，也不能是“雷锋精神”，因为这些都只能是一个国家的从属性价值观，只有核心价值观才有助于建立国家的合法性基础。国家的核心价值观必须是一种宏大的给予历史以某种道德意义的叙事（即西方后现代学者所说的“宏大叙事”[grand narrative]）。美国中学教科书上所描述的美国建国历史以及那些由建国时期政治家所确定的建国原则和理念，就是核心价值观的一个例子；西周初期所形成的“天命论”以及在西周历史中逐渐得以完善的“宗法制度”是有周一代的核心价值观，幷对古代中国的政治哲学和政治文化产生过重大的影响；当代中国学生在学校里学过的围绕着历史唯物主义和“只有共产党才能救中国”而展开的中国近代史叙事，也是核心价值观的一个例子。当然，美国的宏大叙事在其社会中仍然可以获得广泛的认同，而中国教科书中的叙事方式和内容在国内已经没有多少人真正认同了，幷且中国政府至今也没有创造出一套能被广泛认同的宏大叙事。这一意识形态的缺失所导致的后果就是核心价值观的缺乏，幷给当下中国政府的执政带来了很大的困扰。此是后话。</p><p>不同的意识形态有着不同的性质，幷对国家政权的稳定性有着不同的影响。意识形态合法性有三个主要类型：领袖魅力型、世俗意识形态型、宗教意识形态型。在这三个类型中，领袖的魅力（近似于韦伯所说的“克里斯玛合法性”）最不能给予政权一个稳定的合法性基础，因为领袖的寿命有限。</p><p>一般来说，世俗意识形态对大众所作的承诺比较容易被验证。一旦当国家不能兑现那些承诺，就会产生合法性危机。从这个意义上来说，世俗意识形态也不是一个稳定的合法性基础。但是如果我们把世俗意识形态进一步细分，就会发觉不同的意识形态对人性有不同的要求和对民众有不同的许诺。一般来说，要是一种意识形态对人性的要求愈接近于人的本性幷且其许诺愈不容易被证伪，这一意识形态就愈能为国家的合法性提供一个可靠的基础。比如美国建立在个人主义基础上的“机会之地”（Land of Opportunity）这一意识形态，不但与人的竞争和趋利本性十分接近，而且很难被证伪。这一意识形态有着人们所说的“钱币落在正面我赢，落在反面你输”（heads I win, tails you lose）的性质：你的成功证明了这意识形态的正确性，而你没有成功很容易被解释为是你没有付出足够或恰当的努力。与之相比较，“共产主义”这一意识形态就很难为一个政权提供稳定的合法性基础。共产主义意识形态不但建立在一个过于理想的人性的基础之上，幷且承诺提供一个比其他社会制度更为完美的世俗世界，例如“各尽所能、按需分配”之类。如果一个国家把共产主义意识形态作为合法性基础，一旦国家不能兑现相应的承诺，民众马上就会产生“信仰危机”，从而给国家带来合法性危机。</p><p>但是从理论上来说，即使一个国家把合法性建立在像共产主义这样很不牢靠的意识形态之上，这一国家也是有可能取得较为长久的政权稳定的。这里的诀窍是：当大多数民众还相信这一意识形态时，国家就应该采用选举（程序合法性）来补充共产主义意识形态的内禀不稳定性。因为一旦有了选举，幷且在社会上的大多数民众都认可共产主义意识形态的情况下，当政府搞得不好时，候选人就可以攻击政府没有带领人民在共产主义的“康庄大道”上正确地前进，民众就会去怪罪当朝政府的施政，而不是从意识形态本身的误区来检讨国家中所存在的根本问题。读者可以假设，如果中国在毛泽东时代能搞出一个共产党领导下的民主社会的话，今天的中国也许就不会面临如此严重的意识形态合法性危机。</p><p>以上的逻辑还支持了以下的推论：宗教意识形态要比任何世俗意识形态更能为一个国家提供稳定的合法性基础。宗教源自于人的可怜的本性──因为害怕失去和死亡而无限放大生命的意义。宗教的承诺也不具有可验证性──“来世”、“净土”或者“天堂”这样的宗教承诺既十分动人又无法验证，而对于宗教来说，最具权威的克里斯玛都是不存在于世俗世界的“神”、“佛”或者是“圣人”。宗教意识形态与人性的贴近和承诺的无法验证性，赋予那些把国家合法性建基于宗教意识形态之上的国家很大的政权稳定性。</p><p>不过，在现代社会，宗教意识形态合法性的最大弱点来自宗教力量和国家政权之间的紧张。现代社会极其复杂且变化极快。为了适应新的变化，国家政权就必须以务实的态度来处理日益复杂的世俗性事物，但是国家的务实态度及其所带来的社会后果势必会招来具有强烈保守倾向的宗教力量的反对。由政教斗争所导致的政权不稳定性，对于那些把宗教意识形态作为合法性基础的国家来说，是必定要面临的一个难题。当今伊朗的政治就在较大程度上受到这一因素的困扰。</p><h2><span id="二绩效合法性">（二）绩效合法性</span></h2><p>任何一个政府都需要为治下的民众提供必要的公共服务，例如仲裁、维持公共秩序、保证人身安全、保卫国家等。这个层面上的绩效是绝不可少的。如果一个政府没有能力提供这些最为基本的公共物品，相应的国家就不会存在，即便存在也会很快垮台。这里所说的“绩效合法性”，指的是国家领导集团在一个更为进取的层面上积极创造绩效以获取合法性。</p><p>获取这一合法性的手段可分为三种亚类型：领导经济发展、官员作为民众的道德表率和炒作民族主义情绪。但是，这三种手段都不能为国家提供一个稳定的合法性基础。首先，没有一个国家能保证经济的永久高增长。其次，把官员的道德表率作为国家合法性基础就会将贪污这样在法律层面上能解决的问题提升为政治问题，从而从根本上削弱了国家的合法性。最后，如果在和平时期政府经常以炒作国际危机来提高其统治合法性的话，这一国家的国际环境就会日趋险恶，幷且大量的极端民族主义者就会在这一国家中产生。这将推动一个国家朝着战争的方向发展，后果不堪设想。　总之，当一个国家的合法性系于绩效承诺时，这一国家的政府就必须设法来兑现这些承诺。如果这些绩效承诺得到了兑现，民众的欲望就会提高，幷对政府提出更高的要求，而政府则不得不把民众不断提高的要求作为新的、更新的，甚至是即时的工作目标。但是，一旦政府不能够兑现其承诺时，这一国家马上就会出现合法性危机。</p><h2><span id="三程序合法性">（三）程序合法性</span></h2><p>现代社会到来之前，除了古希腊之外，程序始终不是世界各国权力合法性的一个重要基础。这幷不是说在古代政府首脑产生的背后没有程序可言，而是说这些程序只在一小部分精英之间才有意义，幷且这些程序在国家政治中不占有像今天的选举政治般重要的地位。笔者认为，以下三个原因使得程序合法性在现代政治中的地位不断上升：</p><p>第一，现代国家绝大多数都采取了政教分离原则，宗教意识形态不再是国家的主要合法性来源，或者说现代国家失去了古代国家所拥有的一个十分稳定的合法性基础；第二，现代国家的政府管理的事情愈来愈多，这就使得绩效在现代国家合法性中的地位大大增强，幷给现代国家的政治带来很大的不稳定性；第三，在现代技术的支持下，政府的统治能力不断加强，民众生活受到国家政策愈来愈严重的影响。在这一背景下，怎么控制政府的权力，幷使之不滥用权力，对广大民众来说就变得十分迫切。</p><p>我们可以从多种视角来解释为甚么民主政治会在现代国家中兴起。就本文的角度而言，民主兴起的一个重要原因就是现代国家意识形态合法性不足幷且严重倚重于绩效合法性，这就使得国家不得不依靠程序合法性来获得政权的稳定性。</p><p>由于以下原因，现代意义上的程序合法性（即民主选举）会给国家政权带来很大的稳定性8：</p><p>第一，一旦国家首脑是由民选产生，只要选举被认为是公正的，执政者即使在上台后表现很差，也不会影响政府执政的合法性。用通俗的话说，在绩效合法性的统治基础上，当官如果不为民作主，就有被赶回家卖红薯的危险；而在程序合法性的统治基础上，当官即使不为民作主，也至少得当完一届才回家卖红薯。从这个意义上说，程序合法性大大减低了民众对政府执政的压力。</p><p>第二，当一个国家有了程序合法性后，即使有执政者被赶下台也不是甚么大事。这是因为程序合法性在很大程度上把政府和政体分开了。政府即使垮台（比如水门事件[Watergate Scandal]后的尼克松[Richard M. Nixon]政府），政体也不会受到根本性的动摇。</p><p>第三，当一个国家有了程序合法性后，民众的不满在相当程度上可以通过选举或其他常规程序的政府更迭而得到缓解。一旦民众有了选择，他们就难以联合起来进行革命，这也给国家政权带来了稳定性。</p><p>第四，一旦当官的不为民作主也没有马上就被赶回家卖红薯的危险的时候，公开批评国家领导就不是甚么大事了，这就给言论和结社自由提供了基础。但这自由同时也约束了人民的行为，缓解了社会矛盾，从而构成了政权稳定的一个重要机制。这是因为言论和结社自由让社会上各种思想及利益的交流和竞争，使人们对社会其他群体的利益有了更深的理解，对社会现状有了现实感。同样重要的是，一旦有了言论和结社自由，现代社会的多样性势必会导致社会组织在利益和观点上的分化，这些组织互相牵制使得任何全民性的革命运动变得不大可能。</p><p>但就稳定国家政权而言，程序合法性也有着很多弱点，其中最为重要的是它背后必须有一个核心价值观支撑，或者说只有在竞选各方都服从同一意识形态（即“忠诚反对”）时，程序合法性才能为国家提供政权稳定性。如第二次世界大战前的德国，共产党、纳粹党和社会民主党各自有着完全不同的意识形态，幷且共产党和纳粹党都想利用选举来夺取政权，把国家彻底引向对自己有利的方面，形成赢者通吃的格局，选举在这种情形下就不可能成为国家政权稳定的基础。从这个意义上说，一个政治上最为稳定的国家（或者说最不可能发生革命的国家）应该是一个同时拥有意识形态合法性和程序合法性的国家：程序合法性需要强有力的意识形态合法性的支持，幷且程序合法性又是维持国家的意识形态合法性的关键。</p><h1><span id="三-有关中国政府合法性的经验研究">三　有关中国政府合法性的经验研究</span></h1><p>在“世界价值观调查”（World Values Survey）和“亚洲民主动态调查”（Asian Barometer Survey）等调查数据基础上，一些学者对中国的国家合法性进行了研究。他们的一个重要发现是：中国民众对政府的认可度要远远高于许多西方民众对他们政府的认可度。他们于是就得出中国政局稳定、国家具有很高的合法性这一结论9。一般来说，我们都会相信这些研究的结论是成立的。这些学者都受过严格的西方学术训练，他们的材料所展示的也是全国民众的普遍看法，而不是少数人的极端观点。同时，中国政府近年来加强了吏治，采取了一系列的“亲民政策”，这些政策应该说是取得一定效果的。笔者近年来在全国范围内与农村和城市的各界民众进行了不少交流，感到中国百姓的生活水平在近年来有了普遍的和显著的提高，或者说大多数百姓确实从国家的政策中获得了实惠。这些学者的研究结果所反映的正是民众对于当今政府的绩效在一定程度上的认可。</p><p>但问题是，从“百姓对当下政府的绩效是肯定的”这一现象中，我们是不能推论出“这个国家的政局是稳定的”这样一个结论的。遍览世界各国，民众对政府绩效的评价，可以说是说变就变的。在西方，民众对政府的认可度数月内就可以波动许多个百分点（他们对政府的认可度有时甚至低至百分之十几）。在西方国家，民众对政府绩效的认可度与国家政局的稳定性之间没有很大的关系，因为西方国家合法性的根本基础不是政府的绩效，而是被主流精英和人民所认可的核心价值观和具有程序公正的选举。但是在中国，百姓对政府执政绩效的认可度与政局的稳定却有着密切的关系：如果中国百姓对政府绩效的认可显著下跌的话，的确是有可能引发一场大规模的政治波动甚至革命的。这背后的原因很简单：共产主义意识形态在中国已经式微，但是国家又拿不出其他有效的价值观取而代之；同时，中国领导人也不是通过一种被大多数人所认可的程序而产生的。中国因此非常缺乏意识形态和程序层面上的合法性，于是绩效就成了国家合法性的最为重要、甚至是唯一的基础。</p><h1><span id="四-当前中国的问题所在合法性问题">四　当前中国的问题所在──合法性问题</span></h1><p>中国经济发展举世瞩目，百姓的生活水平近年来有了很大的提高。但是，中国维稳的成本却愈来愈高。2011年，中国一些人受到突尼斯“茉莉花革命”的影响，促动“茉莉花运动”，但国内几乎没有人响应。尽管如此，不少市政府还是如临大敌，弄得马路上的警察人数不知超过了寥寥无几的闹事人群多少倍。显然，繁荣的经济和大多数百姓对当下政府在不少方面的表现还算满意这些事实，完全不能减轻中共高层领导的焦虑。到底甚么是当前中国政局的关键性不稳定因素？或者问：中共高层领导到底在忧虑甚么？说到这一点，国内的绝大多数知识分子和百姓都会把诸如贫富差距过大、官员贪污腐败等放在首列，但这些因素的重要性或许幷不是想象般大。当前中国的贫富差距的确很大，而官员贪污腐败（特别是在那些吏治较差的省份）无疑也十分严重。相比之下，印度的贫富差距和官员腐败也十分厉害，甚至在不少方面明显超过了中国，可是印度却不是人们认为很可能发生革命的国家。显然，仅仅是贫富差距和官员贪污腐败是不足以引发革命的。</p><p>中国的知识分子和百姓都对贫富差距和官员腐败深恶痛绝，但是中国却完全不存在这方面的高质量研究。于是，在考虑这些问题时，中国的知识分子和民众就不得不凭借想象：你对政府有多大程度上的不信任，你就会把中国的贫富差距和官员腐败问题想象得有多严重。笔者认为，当前中国的问题归根到底是政治问题，或者说国家的合法性问题，而不是诸如贫富差距和官员腐败这类社会问题。而中共政权合法性问题的关键在于：第一，国家在共产主义意识形态式微后再也拿不出一个能被广泛认可的主流价值体系；第二，国家不敢（或者不愿意）把合法性的重心转移到程序合法性的层面上来；第三，国家对于绩效合法性产生了过度的依赖。</p><p>当下中国的领导人似乎仍然不了解绩效合法性的内禀不稳定这一特质，因为在他们的各种发言中不断流露出人民自然会拥护一个绩效优良的政府这样一种天真的论点，幷且他们也正在努力地通过加强政府绩效来获取国家的合法性。他们的做法与百姓情绪的耦合就给中国带来了如下的悖论：中国的经济和民众的生活水平在近年来都取得了举世羡慕的发展，但是社会却有朝着革命方向发展的倾向。</p><p>当社会上的大多数精英和百姓都认同于国家建构的意识形态时，这一意识形态就会成为一个社会的核心价值观或者说核心意识形态。在有着主流意识形态的国家中，社会就会显得非常平和甚至是保守。比如媒体：如果一个记者经常在某一媒体上发表与主流意识形态不符的言论，百姓就会不喜欢这个媒体，其订阅量或收视率就会下降，媒体老板也因此会不喜欢这一记者。可以说，当国家建构的主流意识形态被广为接受时，百姓就会更相信那些平和甚至是保守的报导，而发表偏激言论的媒体就会没有出路。个体也一样：如果一个人经常在公开场合（和网络上）发表与主流意识形态不符的言论，他的言论就会被忽视，他的朋友也不会喜欢他，他也不会有任何社会影响。但是，如果社会上的精英和大多数百姓不认同国家建构的主流意识形态时，人们就会不相信主流媒体中的报导，特别是与政治有关的报导，与主流意识形态保持一致的媒体就会在民众的心目中被边缘化，幷且不再能建构民众的舆论，而敢于反对主流意识形态的媒体和个人就会被看作是“社会的良知”。</p><p>当国家建构的意识形态不再是社会上的主流价值观时，在面对以上的异议时国家也就失去有效的对策。如果国家对闹事者或者发表对国家不满观点的人士进行镇压的话，那么国家政权在民众心目中就会进一步失去道义，稍有良知的国家干部就会感觉愧疚，而闹事者和发表对国家不满观点的人士就会被大家看作是“英雄”。但是如果国家选择容忍的话，那么这些人的行动和言论就得不到约束。更有之，一旦形成了这样的“机会结构”，人们就会发觉“会闹的孩子多吃奶”这一妙诀，社会民风于是趋于民粹和暴戾。同时，一旦大众有着把闹事者和发表对国家强烈不满观点的人士看作是“英雄”的倾向，随着“英雄”形象而产生的种种利益就会刺激有些人带着寻租的心态去装扮“英雄”。社会道德就在围绕着反体制而产生的种种“高尚”话语下不断下降。</p><p>当国家建构的意识形态不再是社会上的主流价值观时，政府就会失去公信力。这时，如果国家对舆论不加控制，反政府的言论就会在社会上产生很大的影响力，从而引发政治危机。但是如果国家控制舆论的话，人们就会去追逐谣言；加上长期控制舆论而导致人们普遍的无知，天方夜谭式的谣言很容易不胫而走，比如“江泽民去世了，但是中共却秘不发葬”、“薄熙来手上有一百多条人命”、“被重庆警察击毙的不是周克华而是一个便衣警察”等，也会被大家（包括不少社会精英）津津乐道。这些传言不但会给中国的政局增加不确定因素，幷且使得中国本来就很糟糕的政治文化进一步走向糜烂。</p><p>当国家建构的意识形态不再是社会上的主流意识形态时，国家的当权者甚至不敢运用民主选举来增强其合法性。从当权者的私利角度看，在这样的情况下举行选举不但会使他们马上下台，而且整个共产党的统治也会结束；很少有当权者愿意在这样的条件下推动民主选举。而从国家利益来说，如果政治精英不能服从一个主流价值观，由选举而产生的“非忠诚反对派”就会撕裂社会，这给了当局拒绝搞民主选举以一定的道德依据。但接下来的问题是，不搞以选举为核心的程序政治只会使得社会矛盾不断积累，幷为中国从威权国家到民主国家的平稳过渡增加了难度。</p><p>一旦国家的合法性不能依托于意识形态和领导人的产生程序，绩效就成了国家唯一可依托的合法性基础。得益于中国的“强国家”传统，中国政府在加强执政绩效方面应该说还是可圈可点的。但是，即便可圈可点的绩效使得中国政府变得十分富有，其后果却是金钱使国家领导变得短视，以为金钱能解决一切问题，结果在解决一个问题的同时制造了几个问题。更令人担忧的是，围绕着金钱所产生的种种利益，使得大量的利益相关者带着工具理性围聚在政府周围。这些人对体制毫无忠诚可言，他们一方面死死地把住体制的大船，另一方面则随时准备另寻高就甚至搞狡兔三窟。当前中国出现了“裸官”现象，即不少国家干部的妻子和子女都在国外拥有永久居住权甚至是公民资格，大多数年轻人都向往公务员和国企的工作，其原因盖出于此。这带来的后果就是当前中国民众的强烈仇官心理以及由此生发出来的对任何成功者的仇恨心理，整个社会的道德维系（moral fabric）被大面积毁坏。</p><p>为了进一步加强绩效合法性，政府就必须加强吏治、采取悦民政策，幷且把社会上可能出现各种不安定因素的事情统统管了起来。但是，恶性循环不可避免地开始了：政府管得愈好，民众对政府的要求就会愈高；政府管得愈多，问题也就愈多，很多社会问题于是成了政治问题。社会问题的重新政治化是近十年来中国出现的一个令人担忧的发展方向。</p><h1><span id="五-中国的前途">五　中国的前途</span></h1><p>在国内，对国家前途不看好的还真是大有人在，其中既有国内语境下的“自由主义者”和比较极端的“左派”，也有难以计数的掌握着一定话语权的网民。最近，甚至连吴敬琏这样比较持重的学者，都在发表文章惊呼当前中国的“经济社会矛盾几乎到了临界点”10。本文认为，中国的确有再爆发一次革命的可能。与以上的观点不同是，笔者认为当这场动荡到来时，其引发的根本原因不应该是当今中国社会上存在着的各种“经济社会矛盾”，而是民众在主观层面上的不满情绪以及由此带来的大量的社会矛盾。而这些不满情绪和社会矛盾的根源，则是当今政府在国家的法律─选举合法性不足的情况下，过多地把绩效当作了国家合法性的根本基础。笔者同时认为，虽然当前的形势很严峻，但是由于以下原因，中国并没有马上就爆发一场革命的危险：</p><p>第一，尽管近年来中国经济发展的势头有所减缓，但是中国仍然是世界上经济发展最为迅速、百姓生活水平有着快速提高的国家。只要中国经济继续能保持目前的增长势头，绩效合法性就还能维持一定的效力，一场革命性的动荡在中国就暂时不会发生。</p><p>第二，在中国的不少地区（特别是藏区和新疆地区）有着很严重的民族问题，但中国少数民族人口与汉人相比比例实在太小；这就是说，与前苏联不同，少数民族地区的动乱在中国不会是引发革命的一个主要动因。</p><p>第三，由于美国经济的衰退和美国对外政策在世界上普遍不得人心，相当部分的中国知识分子不再简单地把美国政治和政治体制作为理想，或者说当前中国的“自由派”知识分子不再享有1980年代的道德高度，因此也失去了1980年代一呼百应的能力。</p><p>第四，中国知识分子在近年来生活水平有了很大的提高，幷且他们发表言论的渠道也大大增加。如果说前一个变化给了知识分子耐心，使他们不会急于鼓动革命，后一个变化则促进了知识群体的分化，从而降低了在中国产生一个人们广为接受的反体制意识形态的可能性。第五，国内外大多数的学者往往会把中国每天都在发生的群体性抗争事件（特别是一些重大事件）看作为革命性事件的可能促发因素。这种观点再一次反映了知识分子的天真。笔者认为，大量的群体性事件对中国政治的稳定实际上有着巨大的正面作用。当前不少地方的地方政府软弱，中国大规模爆发群体性抗争事件的阈值因此较低，社会矛盾也不容易有大规模的堆积。此外，当前中央政府对地方发生的群体性抗争事件采取的基本态度就是让地方政府自己去处理。只要地方政府能控制住局面，中央就保持袖手旁观的姿态；但是如果地方政府让事件失控，或者在处理过程中造成了流血事件，在国内外引起广泛关注，中央政府则会对地方政府官员进行处罚。中央政府的这一做法强化了群体性事件参加者“反贪官不反皇帝”的心态，同时也促使地方政府在处理群体性事件时表现出了极大的多样性和灵活性，从而大大缓解了中国群体性事件走向政治化的倾向。</p><p>第六，与一些领袖终身制的国家相比，中国已经形成了一套比较成型的国家领导每届五年，每任不超过两届的做法。虽然新的领导人不是由普选产生，幷且换届过程的不透明也给各种政治流言提供了温床，但是换届送走了人们已经厌烦了的领导（不在于干得好不好，而在于一个人在领导位置坐长了人们都会产生厌倦感），给了人们一种新的想象和希望，从而缓解了社会矛盾朝着革命的方向发展。</p><p>但是以上这些有利于缓解社会矛盾激化的因素，完全不可能改变以下的事实：在意识形态和程序合法性严重不足的情况下，执政绩效成了当前中国政府最为主要的合法性基础。因此，即便中国没有马上就发生革命性动荡的危险，只要国家的性质得不到根本性的改变，再发生一次革命的危险在中国始终存在。从这个意义上来说，“中国人自己的代价”的确“没有付够”。</p><h1><span id="注释">注释</span></h1><p>1　Samuel P. Huntington, Political Order in Changing Societies (New Haven, CT: Yale University Press, 1968); William Kornhauser, The Politics of Mass Society (Glencoe, IL: Free Press, 1959); Eric R. Wolf, “Peasant Rebellion and Revolution”, in National Liberation: Revolution in the Third World, ed. Norman Miller and Roderick Aya (New York: Free Press, 1971), 48-67.</p><p>2　Barrington Moore, Social Origins of Dictatorship and Democracy: Lord and Peasant in the Making of the Modern World (Boston: Beacon Press, 1966); Jeffrey M. Paige, Agrarian Revolution: Social Movements and Export Agriculture in the Underdeveloped World (New York: Free Press, 1975).</p><p>3　Jeff Goodwin, No Other Way Out: States and Revolutionary Movements, 1945-1991 (New York: Cambridge University Press, 2001); Tim McDaniel, Autocracy, Capitalism, and Revolution in Russia (Berkeley, CA: University of California Press, 1988); Autocracy, Modernization, and Revolution in Russia and Iran (Princeton, NJ: Princeton University Press, 1991); Theda Skocpol, States and Social Revolutions: A Comparative Analysis of France, Russia, and China (New York: Cambridge University Press, 1979); Timothy P. Wickham-Crowley, Guerrillas and Revolution in Latin America: A Comparative Study of Insurgents and Regimes since 1956 (Princeton, NJ: Princeton University Press, 1992).</p><p>4、5　Jeff Goodwin and Theda Skocpol, “Explaining Revolutions in the Contemporary Third World”, Politics and Society 17, no. 4 (1989): 489-509.</p><p>6　Dingxin Zhao, “State Legitimacy, State Policy, and the Development of the 1989 Beijing Student Movement”, Asian Perspective 23, no. 2 (1999): 245-84; “State-Society Relations and the Discourses and Activities of the 1989 Beijing Student Movement”, American Journal of Sociology 105, no. 6 (2000): 1592-632.</p><p>7　Dingxin Zhao, The Power of Tiananmen: State-Society Relations and the 1989 Beijing Student Movement (Chicago: University of Chicago Press, 2001); “The Mandate of Heaven and Performance Legitimation in Historical and Contemporary China”, American Behavioral Scientist 53, no. 3 (2009): 416-33.</p><p>8　赵鼎新：〈民主的生命力、局限与中国的出路〉，《领导者》，2007年第18期，页76-86。</p><p>9　Jie Chen, Popular Political Support in Urban China (Washington, DC: Woodrow Wilson Center Press; Stanford, CA: Stanford University Press, 2004); Bruce Gilley, “Legitimacy and Institutional Change: The Case of China”, Comparative Political Studies 41, no. 3 (2008): 259-84; Lianjiang Li, “Political Trust in Rural China”, Modern China 30, no. 2 (2004): 228-58; Tianjian Shi, “Cultural Values and Political Trust: A Comparison of the People’s Republic of China and Taiwan”, Comparative Politics 33, no. 4 (2001): 401-19; Wenfang Tang, Public Opinion and Political Change in China (Stanford, CA: Stanford University Press, 2005).</p><p>10　参见吴敬琏的博客，<a href="http://wujinglianblog.i.sohu.com/blog/view/236115860.htm。" target="_blank" rel="noopener">http://wujinglianblog.i.sohu.com/blog/view/236115860.htm。</a></p>]]></content>
    
    <summary type="html">
    
      这是2013年年初赵鼎新先生发表在《观察者》上的一篇文章，记录下来，研究学习。
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="政治" scheme="http://yoursite.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Django制作前端页面生成yaml文件</title>
    <link href="http://yoursite.com/2018/09/03/%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/09/03/制作前端页面生成yaml文件/</id>
    <published>2018-09-03T03:06:42.000Z</published>
    <updated>2018-09-05T13:56:37.544Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="整体流程与环境说明">整体流程与环境说明</span></h2><p>整体流程如下图，请感受灵魂画师的功力：<br><img src="/images/django7.png" alt="paradin"></p><p>Django:<code>2.1.1</code>，阿里云服务器<br>Python:<code>3.6.4</code>，安装方法见：<a href="https://rorschachchan.github.io/2018/07/31/获取网站title的脚本/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/07/31/获取网站title的脚本/</a></p><h2><span id="django启动">Django启动</span></h2><p>由于是python3，所以直接<code>pip install django</code>就安装最新的Django版本。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject Kubernetes#如果提示django-admin命令不存在可以做一个软连接到/usr/local/bin/目录下</span><br><span class="line">cd Kubernetes</span><br><span class="line">python manage.py startapp createyaml #创建APP</span><br><span class="line">python manage.py migrate</span><br><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>app创建完毕之后，在<code>Kubernetes/settings.py</code>的<code>INSTALLED_APPS</code>字段添加<code>createyaml</code>，此时就创建好了项目和app。<code>python manage.py runserver 0.0.0.0:8000</code>启动django，然后浏览器地址栏输入<code>外网IP：8000</code>，就会看到django正常启动了，如图：<br><img src="/images/django6.png" alt="paradin"></p><h2><span id="django准备">Django准备</span></h2><p>首先我们先准备一个脚本<code>111.sh</code>，这个脚本很简单，就是接收到前端传入的数值然后加工成一个yaml文件，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#用来生成对应的yaml文件</span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">=============================</span><br><span class="line">===   HERE IS YOUR YAML   ===</span><br><span class="line">=============================</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">echo apiVersion: v1</span><br><span class="line">echo kind: $<span class="number">1</span></span><br><span class="line">echo metadata:</span><br><span class="line">echo name: $<span class="number">2</span></span><br><span class="line">echo labels:</span><br><span class="line">echo app: web</span><br><span class="line">echo spec:</span><br><span class="line">echo containers:</span><br><span class="line">echo -- name: front-end</span><br><span class="line">echo image: $<span class="number">5</span></span><br><span class="line">echo ports:</span><br><span class="line">echo -- containerPort: $<span class="number">3</span></span><br><span class="line">echo -- name: rss-reader</span><br><span class="line">echo image: nickchase/rss-php-nginx:v1</span><br><span class="line">echo ports:</span><br><span class="line">echo - containerPort: $<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>可以看出上面这个生成yaml脚本太粗糙了，很多地方还有待改进，但是这仅仅是一个小例子而已。再去<code>/django/Kubernetes/createyaml/templates</code>里准备一个比较简单的前端页面脚本，内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">                &lt;title&gt;创建yaml文件&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;创建YAML文件用于K8s部署&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h2&gt;请根据实际情况填写以下内容&lt;/</span>h2&gt;</span><br><span class="line">                &lt;form method=<span class="string">"post"</span> action=<span class="string">"/create_yaml/"</span>&gt;</span><br><span class="line">                        &lt;input type=<span class="string">"text"</span> name=<span class="string">"kind"</span> placeholder=<span class="string">"类型"</span>&gt;&lt;br&gt;</span><br><span class="line">                        &lt;input type="text" name="name" placeholder="名称"&gt;&lt;br&gt;</span><br><span class="line">                        &lt;input type="text" name="containerPort1" placeholder="容器端口1"&gt;&lt;br&gt;</span><br><span class="line">                        &lt;input type="text" name="containerPort2" placeholder="容器端口2"&gt;&lt;br&gt;</span><br><span class="line">                        &lt;input type="text" name="mirror" placeholder="镜像"&gt;&lt;br&gt;</span><br><span class="line">                        &#123;&#123; error &#125;&#125;&lt;br&gt;</span><br><span class="line">                        &lt;button id="btn" type="submit"&gt;生成yaml&lt;/button&gt;</span><br><span class="line">                        &#123;% csrf_token %&#125;</span><br><span class="line">&lt;!-- 标签添加CSRF令牌，这是因为django针对CSRF(跨站请求伪造)有保护措施，没有这句话就是403 --!&gt; </span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>有了页面，还需要一个域名指向这个页面，修改一下<code>/django/Kubernetes/Kubernetes/urls.py</code>，改成如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line">from createyaml import views#将createyaml这个app的views引进</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(r'create_yaml/', views.create_yaml),#新版的这里不再是url了，把这个url指向views.py里的create_yaml函数</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>再继续，写一下<code>views.py</code>里的<code>create_yaml</code>函数：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import subprocess#引入这个库</span><br><span class="line"></span><br><span class="line">#创建yaml</span><br><span class="line">def create_yaml(request):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        kind = request.POST.get('kind', '')#后面的''是默认值的意思</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line">        containerPort1 = request.POST.get(<span class="string">'containerPort1'</span>, <span class="string">''</span>)</span><br><span class="line">        containerPort2 = request.POST.get(<span class="string">'containerPort2'</span>, <span class="string">''</span>)</span><br><span class="line">        mirror = request.POST.get(<span class="string">'mirror'</span>, <span class="string">''</span>)</span><br><span class="line">        result = subprocess.Popen(args=['bash','/docker/111.sh',name,mirror,containerPort1,containerPort2],stdout = subprocess.PIPE,shell = False).stdout.read()#在这里通过subprocess去启动111.sh这个脚本</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(result,content_type=<span class="string">"text/plain"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'createyaml.html'</span>)</span><br></pre></td></tr></table></figure></p><p>以上函数多说几句：</p><ol><li>首先判断请求的方法是否是<code>POST</code>，不是的话返回该页面;</li><li><code>request.POST.get</code>方法获取前端传入的名称或者端口等值，此处的<code>kind</code>、<code>name</code>、<code>mirror</code>和<code>containerPort</code>就是html文件里form表单部分那两个<code>input</code>标签的<code>name</code>属性；</li><li>获取到了变量，然后就让<code>subprocess</code>来调用111.sh来用这些变量去运行脚本，执行的结果就是<code>result</code>，然后<code>return</code>这个<code>result</code>结果；</li><li>使用subprocess最好不打开<code>shell = True</code>，因为这样的话，要是不小心<code>rm -rf /</code>，你就gg了，但是如果<code>shell = False</code>的话，就会把刚才的命令看成<code>rm</code>和<code>-rf /</code>两部分，也就是不能成功，这样也免去了别人恶意注入的危险；</li></ol><h2><span id="实际操作效果">实际操作效果</span></h2><p><img src="/images/django8.gif" alt="akb48" title="本gif是用LICEcap录制的"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/xiaoyaozizai017/article/details/72794469" target="_blank" rel="noopener">https://blog.csdn.net/xiaoyaozizai017/article/details/72794469</a><br><a href="http://lipeilipei.top/2018/02/07/python+django%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/" target="_blank" rel="noopener">http://lipeilipei.top/2018/02/07/python+django%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/</a><br><a href="https://blog.csdn.net/bjbz_cxy/article/details/79358718" target="_blank" rel="noopener">https://blog.csdn.net/bjbz_cxy/article/details/79358718</a>    (如果不想用django就可以看看这个cgi方法)<br><a href="http://blog.51cto.com/laomomo/2163399" target="_blank" rel="noopener">http://blog.51cto.com/laomomo/2163399</a></p>]]></content>
    
    <summary type="html">
    
      唉，我觉得我的django能力还需要更进步！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins自动构建镜像并且发送钉钉通知</title>
    <link href="http://yoursite.com/2018/08/30/Jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%B9%B6%E4%B8%94%E5%8F%91%E9%80%81%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2018/08/30/Jenkins自动构建镜像并且发送钉钉通知/</id>
    <published>2018-08-30T03:39:27.000Z</published>
    <updated>2018-08-31T08:33:54.397Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="部署流程图">部署流程图</span></h2><p>把k8s引入到整个部署的自动化流程如下图：<br><img src="/images/jenkinsdingding2.png" alt="akb48" title="这是宋净超大神的图，侵权则删"></p><p>上图已经说的很明白了，但是结合到我公司的内部情况，再加一点文字的解释：</p><ol><li>运维做一个前端页面，上面提供一些关键词作为变量传入;</li><li>开发将代码上传到svn或者gitlab，进行jira通知，如果是svn的话，jenkins将新代码打包成zip文件，启动jenkins把windows的zip包上传到阿里云云存储上；如果是到gitlab，就不用打包成zip了，直接就把包传到云存储上；</li><li>Gitlab/Svn通过webhook通知jenkins去挂载云存储bucket的文件夹里，并且根据对应的dockerfile进行build成镜像，然后再把镜像推送到云镜像仓库里，推送成功后，Jenkins发送一个钉钉成功的通知；</li><li>Jinkens针对本次镜像和实际部署内容再搭配上之前传递进来的变量，构建一个yaml文件；</li><li>通过create这个yaml文件，启动对应的services来达到用户访问的目的，此时Jenkins再发一条钉钉通知，整个部署流程结束。</li></ol><h2><span id="环境说明">环境说明</span></h2><p>Jenkins:<code>2.124</code>,jenkins与docker在同一台云服务器上，并且确定这个机器上可以顺利login到阿里云的私有仓库<br>云存储:阿里云OSS<br>Gitlab:<code>10.7.3</code><br>镜像仓库:阿里云容器镜像仓库<br>钉钉:<code>4.5.5</code></p><h2><span id="jinkens安装钉钉插件">Jinkens安装钉钉插件</span></h2><p>既然要让jenkins调用钉钉发送成功消息，那么就需要把jenkins跟钉钉结合在一起。至于怎么配自定义钉钉机器人，请看钉钉的官方文档：<a href="https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.karFPe&amp;treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.karFPe&amp;treeId=257&amp;articleId=105735&amp;docType=1</a> 。而jenkins里也是有官方的钉钉插件，界面<code>系统管理</code>–<code>管理插件</code>，然后搜索“dingding”，安装即可，如图：<br><img src="/images/jenkinsdingding1.png" alt="akb48"></p><p>插件安装完毕之后，重启jenkins即可。</p><h2><span id="挂载阿里云存储">挂载阿里云存储</span></h2><p>阿里云官方挂载云存储的方法是<code>ossfs</code>，登陆到jenkins所在的服务器(centos 7.4)里，步骤如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//github.com/aliyun/ossfs/releases/download/v1.80.5/ossfs_1.80.5_centos7.0_x86_64.rpm</span></span><br><span class="line">yum localinstall ossfs_1.80.5_centos7.0_x86_64.rpm #这一步安装可能会比较慢</span><br><span class="line">echo 需要挂载的bucket名:云存储对应ak:云存储对应sk &gt; /etc/passwd-ossfs#将云存储的ak,sk写入到文件里</span><br><span class="line">chmod <span class="number">640</span> /etc/passwd-ossfs</span><br><span class="line">mkdir /tmp/ossfs#创建挂载文件</span><br><span class="line">ossfs 需要挂载的bucket名 /tmp/ossfs -ourl=http:<span class="comment">//oss-cn-hangzhou-internal.aliyuncs.com#如果不是阿里云就要用外网的endpoint</span></span><br></pre></td></tr></table></figure></p><p>操作的效果如下，我挂载的bucket叫<code>ligentest</code>，毕竟代码是高度机密，bucket属性设置是<code>私有</code>，256T的容量爽爽的：<br><img src="/images/jenkinsdingding3.png" alt="akb48"></p><h2><span id="配置任务">配置任务</span></h2><p>在jenkins里创建一个新的工程，取名叫“构建镜像并且上传到云仓库”。“gitlab更新就触发jenkins”的配置内容可以参考 <a href="https://rorschachchan.github.io/2018/05/25/Gitlab-Jenkins搭建持续集成系统/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/05/25/Gitlab-Jenkins搭建持续集成系统/</a> 一文进行操作。</p><p>配置正确jenkins与gitlab各自的webhook，测试提交能返回200之后。就要配置<code>构建</code>和<code>构建后操作</code>。</p><p><code>构建</code>选择<code>执行shell</code>，里面填写这样一个命令：<code>sudo sh /docker/pushimage.sh</code>，也就是运行一个脚本，脚本内容如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">#这个脚本用来推送最新的镜像去阿里云镜像仓库</span><br><span class="line"></span><br><span class="line">version=$(date +20%y%m%d)#用当前日期作为version</span><br><span class="line">docker build -f /docker/chenpyfile -t chentest/python:$version .#先本地构建镜像</span><br><span class="line">image_id=$(docker images | awk '&#123;print $3&#125;' | sed -n '2p')#获取image的id号</span><br><span class="line">docker tag $image_id registry.cn-hangzhou.aliyuncs.com/lechangetest/chentest:$version#给本地的镜像打一个tag</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/lechangetest/chentest:$version#推送到阿里云对应的仓库去</span><br></pre></td></tr></table></figure></p><p><code>构建后操作</code>选择<code>钉钉通知器配置</code>，<code>jenkins URL</code>一栏应该默认填好的，即jenkins的网址；<code>钉钉access token</code>这一栏就是直接填机器人的那个<code>access token</code>，然后选择根据什么情景机器人触发通知，如图：<br><img src="/images/jenkinsdingding4.png" alt="akb48"></p><h2><span id="触发验证">触发验证</span></h2><p>首先要确认jenkins用户能否正常使用docker命令，方法就是修改一下<code>/etc/sudoers</code>添加<code>jenkins</code>这个用户即可。</p><p>这次测试，我们就不搞nginx那种静态页面了，换一个python在后台运行的例子。首先，准备一个叫<code>time.py</code>的脚本，这个脚本很简单，就是不断的输出当前时间的脚本：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">def get_time():</span><br><span class="line">       localtime = time.asctime( time.localtime(time.time()) )</span><br><span class="line">       print ("本地时间为 :", localtime)#python的dockerfile用的是latest，python3是要求有括号的</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       <span class="keyword">while</span> True:</span><br><span class="line">          get_time()</span><br><span class="line">          time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>对应的dockerfile叫<code>chenpyfile</code>，如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># Dockerfile to build A python container images   #</span><br><span class="line"># Based on Python   #</span><br><span class="line">############################################################</span><br><span class="line">FROM    python:latest</span><br><span class="line">MAINTAINER      ChrisChan <span class="string">"Chris@jjfjj.com"</span></span><br><span class="line">RUN     apt-get update &amp;&amp; \</span><br><span class="line">        apt-get install -y vim &amp;&amp; \</span><br><span class="line">        apt-get install -y procps</span><br><span class="line">RUN     mkdir -p /root/app</span><br><span class="line">COPY    /script/ /root/script#把上面那个脚本拷贝到容器里，当然挂载也可以</span><br><span class="line">CMD     ["python", "/root/script/time.py"]#这里不要写“python /root/script/time.py”，注意前后台问题</span><br></pre></td></tr></table></figure></p><p>这个dockerfile在本地测试构建镜像是完全没问题的，然后触发一下<code>git push</code>，就会看到钉钉机器人启动了：<br><img src="/images/jenkinsdingding5.png" alt="akb48"></p><p>构建完毕之后，机器人也会给一个成功的标志，然后去阿里云的云仓库一看，嗯，果然已经推送过来了！如图：<br><img src="/images/jenkinsdingding6.png" alt="akb48"></p><p>再<code>docker run -dit --name chen-pytest registry.cn-hangzhou.aliyuncs.com/lechangetest/chentest:20180831</code>，也能看到新创建的镜像是可以启动的：<br><img src="/images/jenkinsdingding7.png" alt="akb48"></p><p>至此整个“Jenkins自动构建镜像并且发送钉钉通知”部分就结束了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://jimmysong.io/posts/kubernetes-jenkins-ci-cd/" target="_blank" rel="noopener">https://jimmysong.io/posts/kubernetes-jenkins-ci-cd/</a><br><a href="https://help.aliyun.com/document_detail/32196.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/32196.html</a><br><a href="http://www.cnblogs.com/jianxuanbing/p/7211006.html" target="_blank" rel="noopener">http://www.cnblogs.com/jianxuanbing/p/7211006.html</a></p>]]></content>
    
    <summary type="html">
    
      使用Jenkins进行持续构建与发布应用到kubernetes集群中
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
      <category term="钉钉" scheme="http://yoursite.com/tags/%E9%92%89%E9%92%89/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>K8s的基础操作</title>
    <link href="http://yoursite.com/2018/08/27/K8s%E4%BB%8E%E9%83%A8%E7%BD%B2%E5%88%B0%E6%89%A9%E5%AE%B9/"/>
    <id>http://yoursite.com/2018/08/27/K8s从部署到扩容/</id>
    <published>2018-08-27T06:25:03.000Z</published>
    <updated>2018-08-29T07:14:22.810Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="环境说明">环境说明</span></h2><p>kubenetes:阿里云服务，版本<code>v1.10.4</code>，三个master，一个node，我也不知道为啥阿里云设定master最少是3个，而node最少可以是1个…<br>服务器:阿里云<code>Centos 7.4</code></p><h2><span id="部署服务">部署服务</span></h2><p>首先，我们先部署一个以dockhub最新nginx镜像为底的nginx。命令如下：<code>kubectl run nginx-test --image=nginx:latest --port=80</code>。同理，再部署一个最新版redis的话，就是找葫芦画瓢：<code>kubectl run redis-test --image=redis:latest --port=6379</code>。</p><p>两个命令敲完，这就给k8s下达了一个deployment（部署任务），可用<code>kubectl get deployments</code>和<code>kubectl get pods</code>命令查看：<br><img src="/images/k8s10.png" alt="paradin"></p><p>可以看到现在已经生成了对应的pod，而pod里就是容器了，容器里就是对应的服务。如果想爬进这个容器看一下里面的文件等情况，命令是：<code>kubectl exec -it nginx-test-bb95c4645-7qpbj bash</code>。</p><p>这里插播一下<code>kubectl get deployment</code>里各参数的含义：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DESIRED：对应.spec.replicas，用户设定的期望副本数</span><br><span class="line">CURRENT：对应.status.replicas，目前运行的副本数</span><br><span class="line">UP-TO-DATE:对应.status.updatedReplicas，包含最新的pod template的副本数</span><br><span class="line">AVAILABLE：对应.status.availableReplicas，进入正常状态的副本数</span><br></pre></td></tr></table></figure></p><p>但是现在这个服务是外网无法访问的，因为宿主机还没有一个端口与这个nginx容器的80端口相对应。所以要暴露一个端口给外部用于访问。命令是：<code>kubectl expose deployment/kubernetes-bootcamp --type=&quot;NodePort&quot; --port 80</code>，然后用<code>kubectl get services</code>查看一下效果：<br><img src="/images/k8s11.png" alt="paradin"></p><p>然后在对应的master和node里就看到宿主机随机分配的那个30497端口已经启动了，如图：<br><img src="/images/k8s12.png" alt="paradin"></p><p>在浏览器上访问一下30497端口，果然可以访问到nginx服务：<br><img src="/images/k8s13.png" alt="paradin"></p><h2><span id="扩容服务">扩容服务</span></h2><p>服务嘛，总有高峰低谷。比如微博，突然爆出来哪个娱乐明星的新闻，肯定就会有大量的流量涌入，此时就需要扩容，那么k8s的扩容很简单，就是pod的复制，如果要把上面那个nginx-test的部署任务进行扩展，命令就是<code>kubectl scale deployments/nginx-test  --replicas=4</code>，如图：<br><img src="/images/k8s14.png" alt="paradin"></p><p>可见nginx-test又生成了三个pod，与原来的组成了4个pod，而另一个redis的部署任务是没有变化的。</p><p>用<code>kubectl get pods -o wide</code>可见，每一个pod分配到了不同的虚拟IP上，而且node都是阿里云的那台node服务器。<br><img src="/images/k8s15.png" alt="paradin"></p><p>在阿里云控制台也能看到里面的情况：<br><img src="/images/k8s16.png" alt="paradin"></p><p>此时进入到node节点，<code>docker ps -a</code>就会看到新的nginx景象生成，同时也生成了三个<code>/pause</code>的容器：<br><img src="/images/k8s17.png" alt="paradin"></p><p>kubernetes中的pause容器主要为每个业务容器提供以下功能：</p><ol><li>在pod中担任Linux命名空间共享的基础；</li><li>启用pid命名空间，开启init进程。</li></ol><p><font color="red">注意！目前kubernetes似乎仅仅支持共享网络，还不支持进程体系、文件系统之间的共享。</font>如果此时在访问，就会看到访问会相对均匀的落到这四个pod中的每一个，起到一个负载均衡的作用。如果高峰期过了，不需要那么多pod了，就<code>kubectl scale deployments/nginx-test  --replicas=1</code>，pod就会恢复成1个，据我几次试验，每次都是保留最老的那一个pod。</p><h2><span id="yaml文件创建一个pod">yaml文件创建一个pod</span></h2><p>K8s的yaml文件的文法和规矩，官方社区就有教程：<a href="https://www.kubernetes.org.cn/1414.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1414.html</a> 。但是如果要搭配阿里云的私有镜像，需要先参考一下阿里云文档：<a href="https://help.aliyun.com/document_detail/86562.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/86562.html</a> 。<font color="red">注意，这个方法不能在命令行里使用，只能在yaml或者json里用。</font>这里先写一个简单的nginx配置文件<code>pod-nginx.yaml</code>做例子，全文如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: aliyun-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Always         #表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器</span><br><span class="line">  nodeSelector:  </span><br><span class="line">   zone: node1#节点选择</span><br><span class="line">  containers:</span><br><span class="line">  - name: aliyun-test-nginx</span><br><span class="line">    image: registry-vpc.cn-hangzhou.aliyuncs.com/lechangetest/chentest:<span class="number">1.1</span></span><br><span class="line">    imagePullPolicy: IfNotPresent      #可选择Always、Never、IfNotPresent，即每次启动时检查和更新images的策略，IfNotPresent是节点上没有此nginx镜像时才执行pull操作</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80       #容器开发对外的端口</span><br><span class="line">      hostPort: 33664            #映射到主机的端口/对外映射的端口（一般可以不写）</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: regsecret#这句话为了通过阿里云似有仓库的鉴权</span><br></pre></td></tr></table></figure></p><p>保存退出，再<code>kubectl create -f pod-redis.yaml</code>把这个文件执行一下。然后<code>kubectl get pod</code>看一下效果：<br><img src="/images/k8s18.png" alt="paradin"></p><p>发现我们创建那个redis-pod状态是<code>Pending</code>（等待中），那就是不成功啊。于是就<code>kubectl describe pod/pod-redis</code>查看一下原因，反馈如下：<br><img src="/images/k8s19.png" alt="paradin"></p><p>这个错误的意思是“如果指定的label在所有node上都无法匹配，则创建Pod失败”。原来是我没有配置<code>kubectl label nodes</code>，那先把<code>pod-redis</code>删除，再把<code>nodeSelector</code>那一段去掉，改成<code>nodeName: cn-hangzhou.i-bp1978gmunq3oalfcqlx</code>，去掉再重新create一下。<code>kubectl get pod</code>检查：<br><img src="/images/k8s20.png" alt="paradin"></p><p>然后就是给这个pod增加一个对外的端口。<code>kubectl expose pod/aliyun-nginx --type=&quot;NodePort&quot; --port 80</code>，效果如下：<br><img src="/images/k8s21.png" alt="paradin"></p><p>再去浏览器里，输入<code>node的外网网址：31829</code>看看效果：<br><img src="/images/k8s22.png" alt="paradin"></p><p>配置成功，当然这整个过程也可以在阿里云的控制台操作，更简单更直观，而且阿里云还会自动把对外端口配置到SLB里，具体步骤可以看阿里云的官方文档。</p><h2><span id="升级与回滚">升级与回滚</span></h2><p>假设我们把<code>nginx-test</code>这个deployment的镜像升级成阿里云私有仓库的1.1版本，那么命令是：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployments/nginx-test nginx-test=registry.cn-hangzhou.aliyuncs.com/lechangetest/chentest:<span class="number">1.1</span></span><br></pre></td></tr></table></figure></p><p>升级之后，<code>kubectl get pod</code>发现有几个节点不正常，如图：<br><img src="/images/k8s23.png" alt="paradin"></p><p>那么这种情况下需要紧急回滚，回滚命令：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment/nginx-test</span><br></pre></td></tr></table></figure></p><p>一会就看到回滚成功了。如图：<br><img src="/images/k8s24.png" alt="paradin"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://jimmysong.io/posts/what-is-a-pause-container/" target="_blank" rel="noopener">https://jimmysong.io/posts/what-is-a-pause-container/</a><br><a href="https://blog.csdn.net/mailjoin/article/details/79686937" target="_blank" rel="noopener">https://blog.csdn.net/mailjoin/article/details/79686937</a><br><a href="http://pipul.org/2016/05/why-we-need-the-pod-and-service-of-kubernetes/" target="_blank" rel="noopener">http://pipul.org/2016/05/why-we-need-the-pod-and-service-of-kubernetes/</a><br><a href="https://www.imooc.com/article/30473" target="_blank" rel="noopener">https://www.imooc.com/article/30473</a></p>]]></content>
    
    <summary type="html">
    
      基础笔记，基础笔记而已...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="kubenetes" scheme="http://yoursite.com/tags/kubenetes/"/>
    
  </entry>
  
  <entry>
    <title>Centos6.5升级最新内核4.18的坑</title>
    <link href="http://yoursite.com/2018/08/25/centos6-5%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E5%86%85%E6%A0%B84-18%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2018/08/25/centos6-5升级最新内核4-18的坑/</id>
    <published>2018-08-25T03:34:59.000Z</published>
    <updated>2018-08-25T06:28:36.794Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="升级流程">升级流程</span></h2><p>开发童鞋要搞BBR，然后让我在他的阿里云服务器上升级一下内核。我登进去一看，centos 6.5，内核还是2.6的。</p><p>之前我曾经搞过centos 7升级内核到最新版，文章在此：<a href="https://rorschachchan.github.io/2018/06/11/阿里云centos7升级内核过程/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/06/11/阿里云centos7升级内核过程/</a> 。centos6升级内核有几个地方不太一样，但是过程差不多。整个升级内核步骤如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先备份镜像，很重要！！！  而且备份镜像成功之前，云服务器不可以重启。</span><br><span class="line">yum uodate -y</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org #导入ELRepo GPG key</span><br><span class="line">rpm -Uvh https://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm #安装 6版本的ELRepo</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml -y#截至本文，最新的是4.18，lt版本是4.4</span><br></pre></td></tr></table></figure></p><p>如果yum的时候有提示<code>Warning: RPMDB altered outside of yum</code>，只需要删除一下yum的历史记录即可：<code>rm -rf /var/lib/yum/history/*.sqlite</code> 。 </p><p>安装完毕之后，<code>vim /etc/grub.conf</code>，把default改成0，即指定使用第一个内核启动，如图：<br><img src="/images/centos6updatecore1.png" alt="akb48"></p><p>然后在阿里云控制台重启一下这个服务器即可。</p><h2><span id="无法启动">无法启动？</span></h2><p>可能有的人直接就启动成功了，因为网络上很多文章到此就结束了。但是我这台服务器，很不幸，出现了问题。在控制台上看服务器是“运行中”，但是无法ssh连接，而且ping也是失败。不一会，控制台的服务器就显示“已停止”，可见是内核出了问题。</p><p>联系了阿里的后台，他们反馈这个机器现在的状态是<code>Module scsi_wait_scan not found</code>，那知道了原因就对症下药吧，这个问题解决方法不止一个，我亲测以下的方法好使。</p><p>首先先用刚刚做的那个磁盘快照回滚到之前正常的状态，重新执行上面整个安装4.18的内核的所有操作，然后还要补充如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'add_drivers+="virtio_blk"'</span> &gt;<span class="regexp">/etc/</span>dracut.conf.d/force-vitio_blk-to-ensure-boot.conf</span><br><span class="line">cp /boot/initramfs-4.18.5-1.el6.elrepo.x86_64.img /boot/initramfs-4.18.5-1.el6.elrepo.x86_64.img-bak#把新下载的4.18的img文件备份</span><br><span class="line">dracut -f initramfs-4.18.5-1.el6.elrepo.x86_64.img 4.18.5-1.el6.elrepo.x86_64#编译生成新的img，4.18.5-1.el6.elrepo.x86_64这个文件在/lib/modules/下</span><br></pre></td></tr></table></figure></p><p>重新在阿里云控制台重启一下这个服务器，这一次就OK了。<br><img src="/images/centos6updatecore2.png" alt="akb48"></p><p>发生异常的原因是：更新内核后,在写dracut程序时无法检测<code>KVM&#39;s virtual disk driver &quot;virtio_blk&quot;</code>，此驱动被用于访问KVM虚拟磁盘,dracut没有正常添加新的<code>initramfs module</code>,导致系统没有磁盘访问驱动无法正常启动。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://bugzilla.kernel.org/show_bug.cgi?id=60758" target="_blank" rel="noopener">https://bugzilla.kernel.org/show_bug.cgi?id=60758</a><br><a href="https://opengers.github.io/linux/linux-source-code-compile-kernel-rpm/" target="_blank" rel="noopener">https://opengers.github.io/linux/linux-source-code-compile-kernel-rpm/</a></p>]]></content>
    
    <summary type="html">
    
      修改/usr/share/dracut/modules.d/90kernel-modules/installkernel把blk_init_queue修改为blk_mq_init_queue，然后重新rpm -ivh也可以
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="内核" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="BBR" scheme="http://yoursite.com/tags/BBR/"/>
    
  </entry>
  
  <entry>
    <title>Kubectl使用的简单举例</title>
    <link href="http://yoursite.com/2018/08/22/%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AEkubectl/"/>
    <id>http://yoursite.com/2018/08/22/安装并且配置kubectl/</id>
    <published>2018-08-22T08:39:41.000Z</published>
    <updated>2018-09-10T03:38:05.516Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装kubectl">安装kubectl</span></h2><p>在阿里云的Kubernetes界面生成一个新的集群，如图：<br><img src="/images/k8s1.png" alt="akb48"></p><p>但是这个集群是无法通过ssh登陆云服务器那样登录的，这个时候要操作k8s就有两个招数，第一个招数就是用<code>kubectl</code>这个工具去连接到集群。但是<code>kubectl</code>很难搞，因为它所在的<code>storage.googleapis.com</code>在大陆是无法访问的，如果效仿<a href="https://www.kubernetes.org.cn/installkubectl" target="_blank" rel="noopener">https://www.kubernetes.org.cn/installkubectl</a> 里面的方式去下载<code>kubectl</code>是无法成功的，如图：<br><img src="/images/k8s2.png" alt="akb48"></p><p>为了应付这个办法，就要去kubernete的github界面里下载代码包，然后手动上传到云服务器里安装。</p><p>首先到<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#v1112" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#v1112</a> 里的<code>Client Binaries</code>下载1.11版本的kubectl的包，如图：<br><img src="/images/k8s3.png" alt="akb48"></p><p>将这个包上传到云服务器之后解压缩，然后把kubernetes安装包里的<code>/client/bin/kubectl</code>做一个<code>/usr/local/bin/kubectl</code>的软连接，如图：<br><img src="/images/k8s4.png" alt="akb48"></p><p>如果所在的网络也无法打开github，那么只好用国内的源<a href="https://mirrors.ustc.edu.cn/kubernetes/apt/pool/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/kubernetes/apt/pool/</a> ，下载相应的包之后手动上传到云服务器里也能达到一样的效果，缺点就是国内源没有github更新的那么快。</p><h2><span id="配置kubectl">配置kubectl</span></h2><p>阿里云在生成kubernetes集群后，点击<code>管理</code>，最下面会有一个配置文件，将整个文件内容写入<code>/root/.kube/config</code>，然后再一次使用<code>kubectl cluster-info</code>就能看到配置成功了，如图：<br><img src="/images/k8s5.png" alt="akb48"></p><p>再用<code>kubectl config view</code>能进一步看到细节：<br><img src="/images/k8s6.png" alt="akb48"></p><p>这样就证明可以通过kubectl连接到kubenetes集群了。</p><h2><span id="kubectl基本操作">kubectl基本操作</span></h2><ol><li><p><code>kubectl get nodes</code>：查看master和worker的基本情况，如图：<br><img src="/images/k8s7.png" alt="akb48" title="这里面有各个节点的角色、命名、版本和状态"></p></li><li><p><code>kubectl run ngx-test --image=nginx:latest --port=8080 --restart=Never</code>：部署一个以nginx最新镜像为底的叫<code>ngx-test</code>的部署，并且开放下面容器的8080端口，每个部署的名称不能重复。部署会自动生成pod，如果加上了<code>--restart=Never</code>，那么pod生成一次失败就不再生成；</p></li><li><p><code>kubectl delete deployment chen-test</code>:删除一个叫<code>chen-test</code>的部署，注意，使用kubectl命令，要删除拥有该pod的Deployment。如果我们直接删除pod，Deployment将会重新创建该pod；</p></li><li><p><code>kubectl get deployments</code>：查看部署情况，如图：<br><img src="/images/k8s8.png" alt="akb48"></p></li><li><p><code>kubectl proxy</code>: 每个pod在kuber集群里都是一个封闭的网络环境里，可以通过这个命令使API server监听在本地的8001端口上；</p></li><li><p><code>kubectl get pods</code>：获取每一个pods的基本情况，如图:<br><img src="/images/k8s9.png" alt="akb48"></p></li><li><p><code>kubectl describe pods</code>:查看每一个pods的运行细节，可以出来为什么pods没有正常的运行，如果要特别制定具体的pod，那就是<code>kubectl describe pods pod的名称</code>；</p></li><li><p><code>kubectl exec -it POD_NAME bash</code>:连接到对应的pod里；</p></li><li><p><code>kubectl get pods -n kube-system</code>:查看NAMESPACE是<code>kube-system</code>的所有pod；</p></li></ol><p>10.<code>kubectl delete pods/kubernetes-dashboard-7b9c7bc8c9-q8425 -n kube-system</code>:删除掉<code>kube-system</code>这个NAMESPACE里<code>kubernetes-dashboard-7b9c7bc8c9-q8425</code>这个pod；</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://help.aliyun.com/document_detail/64940.html?spm=a2c4g.11186623.4.1.2c4652f3qdpMed" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/64940.html?spm=a2c4g.11186623.4.1.2c4652f3qdpMed</a> （这个是通过ssh访问k8s负载均衡的方法）<br><a href="https://kubernetes.io/cn/docs/tutorials/kubernetes-basics/" target="_blank" rel="noopener">https://kubernetes.io/cn/docs/tutorials/kubernetes-basics/</a></p>]]></content>
    
    <summary type="html">
    
      k8s集群有多个部署，每个部署里有多个pod，而每个pod里有多个容器。当我们在Kubernetes上创建一个部署时，该部署将在其中创建包含容器的Pod(而不是直接创建容器)。Pod 总是运行在Node上。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用gitlab搭配阿里云容器镜像服务构建镜像</title>
    <link href="http://yoursite.com/2018/08/15/%E4%BD%BF%E7%94%A8gitlab%E6%90%AD%E9%85%8D%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2018/08/15/使用gitlab搭配阿里云容器镜像服务构建镜像/</id>
    <published>2018-08-15T02:15:44.000Z</published>
    <updated>2018-08-23T06:42:54.142Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="工作思路">工作思路</span></h2><p>本次北京AWS技术峰会里看到了很多公司在运维上使用容器部署和扩容的实例，一天下来感受良多。现在比较流行部署办法就是“云镜像”：<strong>即开发把新的代码提交到gitlab上，然后gitlab与云厂家的镜像服务相关联，然后每一次commit提交都会触发一次镜像的构建，然后再根据这个镜像部署到实际的服务器里，同时将此服务器作一个快照，同时再搭配上容器监控，如果服务吃紧，就用此快照购买实例扩容；如果服务闲余，那么也会自动将最老的服务器实例关机，进而释放退款。</strong></p><p>用图像来说就是这个意思：<br><img src="/images/aliyungitlab7.png" alt="paradin" title="也可以gitlab触发jenkins，用jenkins构建镜像并且把镜像推送到阿里云容器仓库去"></p><h2><span id="勾连gitlab与云镜像">勾连gitlab与云镜像</span></h2><p>本文使用的镜像厂家是阿里云，gitlab版本是<code>10.7.3</code>。</p><p>进入阿里云的“容器镜像”页面，如果你是第一次使用这个产品需要先建立一个仓库密码，然后点击左侧的代码源，如图：<br><img src="/images/aliyungitlab1.png" alt="paradin"></p><p>在gitlab地方选择“绑定账号”，就需要填写对应的栏目：<br><img src="/images/aliyungitlab2.png" alt="paradin"></p><p>前两项很好写，最后一个token需要在gitlab里创建：在gitlab的页面，点击个人的头像，然后<code>settings</code>—<code>Access Tokens</code>，填写好名字（生产环境一般都是填运维的账号）然后在<code>api</code>处打勾，生成的那个东东就是token，直接复制填写到阿里云的页面即可。如图：<br><img src="/images/aliyungitlab3.png" alt="paradin"></p><h2><span id="配置镜像仓库">配置镜像仓库</span></h2><p>在阿里云容器镜像界面点击“创建镜像仓库”，填写好名字摘要仓库类型之后，在代码源里选择gitlab，由于刚刚填写了token所以是可以看得到gitlab用户下所有的project名的，如图：<br><img src="/images/aliyungitlab4.png" alt="paradin"></p><p>然后点击新创建的那个仓库，在构建一栏默认已经选择好了“代码变更时自动构建镜像”，点击“添加规则”，如图：<br><img src="/images/aliyungitlab5.png" alt="paradin"></p><p>这里我选择了master分支，然后指明了dockerfile文件名和路径，最后版本号就先写一个version，这个可以通过gitlab在commit时特殊指定。</p><p>右侧栏里的Webhook是用来发送提示的，可以在钉钉里创建一个机器人，在创建机器人时会生成webhook，然后把机器人的webhook添加到这个webhook即可。如果在添加的时候提示“当前请求失败，请重试”，这个情况是因为Webhook的名称里有中文，要全英文才可以。<br><img src="/images/aliyungitlab8.png" alt="paradin"></p><h2><span id="编写dockerfile">编写dockerfile</span></h2><p>如果没有dockerfile是无法构建镜像的，于是就在上面“规则”的目录里创建对应的dockerfile文件，<font color="red">注意!“规则”里的根目录就是代码文件夹的顶目录，而不是整个服务器的根目录</font>。写dockerfile的基础知识和语法这里不多说了，网络上有的是，我就随便写一个nginx dockerfile，内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># Dockerfile to build Nginx container images</span><br><span class="line"># Based on Debian</span><br><span class="line">############################################################</span><br><span class="line">FROM    debian:latest</span><br><span class="line">MAINTAINER      ChrisChan <span class="string">"Chris@jjfjj.com"</span></span><br><span class="line">RUN     apt-get update</span><br><span class="line">RUN     apt-get install -y nginx</span><br><span class="line">RUN     apt-get install -y vim</span><br><span class="line">RUN     apt-get install -y procps#安装ps命令</span><br><span class="line">RUN     echo <span class="string">'HI!WARRIOR is the champion!!!'</span> &gt; <span class="regexp">/var/</span>www/html/index.nginx-debian.html</span><br><span class="line">EXPOSE  8080#开放8080端口</span><br><span class="line">COPY    /file/kubernetes.tar.gz /mnt/</span><br><span class="line">#CMD    service nginx start &amp;&amp; nginx -g "daemon off;"</span><br><span class="line">ENTRYPOINT [ <span class="string">"/usr/sbin/nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span> ]</span><br></pre></td></tr></table></figure></p><p><font color="red">注意！使用上面注释的CMD语句作为结尾的话，那么这个镜像docker run的时候就会马上退出，这是因为把command做为容器内部命令，那么nginx程序将后台运行，这个时候nginx并不是pid为1的程序，而是执行的bash，这个bash执行了nginx指令后就挂了，所以容器也就退出了。</font>简而言之，Docker容器后台运行,就必须有一个前台进程。因为Docker容器仅在它的1号进程（PID为1）运行时，会保持运行。如果1号进程退出了，Docker容器也就退出了。</p><p>在gitlab触发之后，阿里云就自动把这个dockerfile build成了镜像保存在阿里云的容器仓库里，如图：<br><img src="/images/aliyungitlab6.png" alt="paradin"></p><p>想用这个镜像就可以直接去阿里云的仓库里下载并启动，这样就节省了本地的硬盘容量。最后就是把这个镜像部署到对应的kubernetes集群里，这样就完成了“gitlab代码提交触发阿里云构建镜像”的过程，而如何使用kubernetes的内容将在以后细说。</p>]]></content>
    
    <summary type="html">
    
      出去参加交流才发现，我们的运维简直就是手工作坊...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="docker镜像" scheme="http://yoursite.com/tags/docker%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Centos7开启swap虚拟内存</title>
    <link href="http://yoursite.com/2018/08/13/%E9%98%BF%E9%87%8C%E4%BA%91Centos7%E5%BC%80%E5%90%AFswap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>http://yoursite.com/2018/08/13/阿里云Centos7开启swap虚拟内存/</id>
    <published>2018-08-13T03:21:27.000Z</published>
    <updated>2018-08-13T06:27:39.627Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>出差归来，几个开发反馈说gitlab网页卡的不行，上传代码也非常吃力。我登入服务器一看，原来是内存已经耗尽了。</p><h2><span id="修改配置文件">修改配置文件</span></h2><p>gitlab本身就是一个特别吃内存的软件，服务器还是2核4G的配置。于是我就登陆到gitlab容器里，修改一下<code>/etc/gitlab/gitlab.rb</code>，把<code>unicorn[&#39;worker_processes&#39;]</code>手动改成了3，也就是比CPU大一个，这样可以少开一点进程。但是注意，这个参数最小值是2，如果设置成1，那么gitlab就会崩坏。</p><p>保存文件之后，<code>gitlab-ctl reconfigure</code>，看一下内存的情况，嗯，比刚才好一点点。如图：<br><img src="/images/swap1.png" alt="paradin"></p><h2><span id="开启虚拟内存">开启虚拟内存</span></h2><p>上面那个方法毕竟效果有限，时间长了还是会把内存一点点蚕食光，于是就要使用Swap分区，但是阿里云虚拟服务器默认是不带swap分区的，如何手动创建swap分区才是本文的要点。</p><p>这里我用了一个非生产环境的机器做实验。</p><p>创建swap分区主要的中心思想就是“创建一个文件，然后将这块文件格式化为swap格式”，首先先看一下当前的磁盘容量：<br><img src="/images/swap2.png" alt="paradin"></p><p>当前已用磁盘容量是16G，使用<code>cat /proc/swaps</code>看一下当前虚拟内存的情况：<br><img src="/images/swap3.png" alt="paradin"></p><p>这个情况说明没开启swap，于是就手动建立一个文件夹，比如叫/swaps，在/swaps这个路径下执行<code>dd if=/dev/zero of=swaps bs=512 count=8388616</code>，在这里创建swap大小为bs*count=4294971392(4G)，这个过程需要一点时间，稍等片刻：<br><img src="/images/swap4.png" alt="paradin"></p><p>通过<code>mkswap swaps</code>命令将上面新建出的swaps文件做成swap分区：<br><img src="/images/swap5.png" alt="paradin"></p><p>此时使用<code>cat /proc/sys/vm/swappiness</code>查看数值应该是0，需要<code>sysctl -w vm.swappiness=60</code>把它改成60，这里60的含义是：100%-60%=40%，即物理内存剩下40%的时候时启用虚拟内存。若想永久修改，则编辑<code>/etc/sysctl.conf</code>文件，改文件中有<code>vm.swappiness</code>变量配置。</p><p>再<code>swapon /swaps/swaps</code>：<br><img src="/images/swap6.png" alt="paradin"></p><p>最后就是添加开机自动挂载，即在<code>/etc/fstab</code>文件添加如下一句：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swaps/swaps  swap      swap    defaults   <span class="number">0</span>       <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>再用<code>cat /proc/swaps</code>命令检查一下swap分区是否启动：<br><img src="/images/swap7.png" alt="paradin"></p><p>最后，重启一下服务器，看一下开机是否正常挂载上这个虚拟分区了：<br><img src="/images/swap8.png" alt="paradin"></p><p>可见原来使用了16G容量，现在用了20G，这中间差的4G就是拿来做了swap，于是内存就这样多了4个G…</p>]]></content>
    
    <summary type="html">
    
      不想掏内存钱，那就把磁盘改造成内存吧...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
      <category term="虚拟内存" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
      <category term="阿里云服务器" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>爬取当前IP并且修改阿里云安全组的脚本</title>
    <link href="http://yoursite.com/2018/08/07/%E7%88%AC%E5%8F%96%E5%BD%93%E5%89%8DIP%E5%B9%B6%E4%B8%94%E4%BF%AE%E6%94%B9%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/08/07/爬取当前IP并且修改阿里云安全组的脚本/</id>
    <published>2018-08-07T07:01:07.000Z</published>
    <updated>2018-08-07T09:20:23.200Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="动机与脚本">动机与脚本</span></h2><p>我工位所用的网络是公司特批的海外专线，速度OK还能翻墙出去看看，自从有了这条线爽的飞起，但缺陷就是每周IP地址都会变，IP一变很多的阿里云ecs安全组就要重新配置，因为有一些公网端口比如grafana或者跳板机是只能公司运维人员访问的。这样每周都要手动改一次IP地址太烦了，于是乎，写了下面这个脚本，一劳永逸的解决这个问题：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">#这个脚本在python3.6下自验通过，用途是去爬当前的IP地址然后给阿里云安全组添加新的IP，并且删除掉老的IP</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> AuthorizeSecurityGroupRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> RevokeSecurityGroupRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.profile <span class="keyword">import</span> region_provider</span><br><span class="line"><span class="keyword">import</span> requests,sys,re,os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">clt = client.AcsClient('这里是AK', '这里是SK', 'cn-hangzhou')#鉴权</span><br><span class="line">file = <span class="string">"F:\\ip.txt"</span></span><br><span class="line"></span><br><span class="line">def checkDIR():</span><br><span class="line">    global file</span><br><span class="line">    if os.path.exists(file) == True:#先判断文件是否存在</span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            old_ip = f.read()</span><br><span class="line">            return (old_ip)#获取旧ip</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"ip.txt文件不存在，请手动生成！"</span>)</span><br><span class="line">        sys.exit()#文件不存在直接退出</span><br><span class="line"></span><br><span class="line">def getIP():</span><br><span class="line">    global file</span><br><span class="line">    r = requests.get('http://www.ip111.cn/')        #这里输入要爬的网站域名</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">"lxml"</span>)</span><br><span class="line">    context = []</span><br><span class="line">    for link in soup.find_all('td'):    #获取所有td标签内容</span><br><span class="line">        context.append(link.get_text())     #添加一个列里</span><br><span class="line">    str = context[<span class="number">4</span>]</span><br><span class="line">    ip = re.split(r'[\n\s]\s*', str)[1]#多符号分割字符串</span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ip)</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line">def addnewRULE(func):</span><br><span class="line">    global clt</span><br><span class="line">    # 设置参数</span><br><span class="line">    for port in ['3000/3000', '34872/34872']:#这里是端口</span><br><span class="line">        request = AuthorizeSecurityGroupRequest.AuthorizeSecurityGroupRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'RegionId'</span>, <span class="string">'cn-hangzhou'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'SecurityGroupId'</span>, <span class="string">'目标安全组ID'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'IpProtocol'</span>, <span class="string">'tcp'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'PortRange'</span>, port)</span><br><span class="line">        request.add_query_param(<span class="string">'SourceCidrIp'</span>,func())</span><br><span class="line">        request.add_query_param('NicType', 'intranet')      #如果不加这句话就是公网添加</span><br><span class="line">        <span class="keyword">if</span> port == <span class="string">'3000/3000'</span>:</span><br><span class="line">            request.add_query_param(<span class="string">'Description'</span>, <span class="string">'Grafana使用端口'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            request.add_query_param(<span class="string">'Description'</span>, <span class="string">'Zabbix和堡垒机使用端口'</span>)</span><br><span class="line">        # 发起请求</span><br><span class="line">        response = clt.do_action(request)</span><br><span class="line">        print (response)</span><br><span class="line"></span><br><span class="line">def deloldRULE(func):</span><br><span class="line">    global clt</span><br><span class="line">    # 设置参数</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> [<span class="string">'3000/3000'</span>,<span class="string">'34872/34872'</span>]:</span><br><span class="line">        request = RevokeSecurityGroupRequest.RevokeSecurityGroupRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'RegionId'</span>, <span class="string">'cn-hangzhou'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'SecurityGroupId'</span>, <span class="string">'目标安全组ID'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'IpProtocol'</span>, <span class="string">'tcp'</span>)</span><br><span class="line">        request.add_query_param(<span class="string">'PortRange'</span>, port)</span><br><span class="line">        request.add_query_param(<span class="string">'SourceCidrIp'</span>, func())</span><br><span class="line">        request.add_query_param('NicType', 'intranet')      #如果不加这句话就是公网删除</span><br><span class="line">        # 发起请求</span><br><span class="line">        response = clt.do_action(request)</span><br><span class="line">        print (response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    checkDIR()</span><br><span class="line">    deloldRULE(checkDIR)</span><br><span class="line">    getIP()</span><br><span class="line">    addnewRULE(getIP)</span><br></pre></td></tr></table></figure></p><p>整个脚本的逻辑就是先在F盘下有<code>ip.txt</code>里面就保存当前IP地址，然后执行脚本的时候就会先在目标安全组里删除掉这个IP相关的3000端口和34872端口，然后去<code>www.ip111.cn</code>里爬取当前的网址，把新IP写入到<code>ip.txt</code>的同时，再去目标安全组里添加这个新IP相关的3000端口和34872端口。</p><h2><span id="新的知识点">新的知识点</span></h2><ol><li><p>把上一个函数结果当作参数在下一个函数里执行的方法：<br><img src="/images/func1.png" alt="akb48"></p></li><li><p>python的退出有两个：<code>os._exit()</code>和<code>sys.exit()</code>：<code>os._exit()</code>会直接将python程序终止，之后的所有代码都不会执行；<code>sys.exit()</code>会抛出一个异常: <code>SystemExit</code>，如果这个异常没有被捕获，那么python解释器将会退出。如果有捕获该异常的代码，那么这些代码还是会执行。使用<code>sys.exit()</code>来退出程序比较优雅，一般情况下也用这个，<code>os._exit()</code>可以在<code>os.fork()</code>产生的子进程里使用。</p></li><li>在windows里定时执行python脚本的方法：<br>打开<code>控制面板</code>—&gt;<code>系统和安全</code>—&gt;<code>计划任务。</code>如图：<br><img src="/images/func2.png" alt="akb48"></li></ol><p>点击右侧的<code>创建基本任务</code>，输入任务名称和可选的描述。点击<code>下一步</code>，设置任务的开始时间，可以选择每日执行、每周执行或每月执行。点击<code>下一步</code>，<code>操作</code>选择<code>启动程序</code>，点击下一步输入参数。如图：<br><img src="/images/func3.png" alt="akb48"><br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">程序或脚本：python.exe  </span><br><span class="line">添加参数：输入要执行的python脚本路径（包括文件名）</span><br><span class="line">起始于：输入python.exe的目录（不包括文件名）</span><br></pre></td></tr></table></figure></p><p>最后点击<code>下一步</code>，整个过程搞定。</p>]]></content>
    
    <summary type="html">
    
      AWS北京技术峰会，我来啦！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="python3.6" scheme="http://yoursite.com/tags/python3-6/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>获取网站title的脚本</title>
    <link href="http://yoursite.com/2018/07/31/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99title%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/07/31/获取网站title的脚本/</id>
    <published>2018-07-31T07:48:40.000Z</published>
    <updated>2018-08-13T07:13:24.623Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="脚本在此">脚本在此</span></h2><p>公司的商城需要添加一个脚本，这个脚本就是观察首页页面是否正常，虽然已经配置了zabbix监控网站是否200，但是有一些特殊的情况，比如网页可以打开但是页面是“file not found”，类似这样就需要被运维第一时间监控到然后通知开发。</p><p>原本我打算直接爬取整个首页然后与服务器里的<code>index.html</code>对比一下，如果不符合就报警，但是跟前端同事说了这个思路之后，前端说服务器上是没有<code>index.html</code>的，因为这个<code>index.html</code>是结合其他的php拼接的。前端说“只要能检测title正常就OK，一般来说title能获取到就证明系统是OK的，如果titleOK但是html内容获取不到就是前段代码的问题，跟系统无关”。于是我就写了这么一个爬虫脚本来获取网站title，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line">#这个脚本的用途是用来爬取商城首页title，然后判断是否正常</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding('utf-8')#不然就会UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128)</span><br><span class="line">r = requests.get('https://www.lechange.com')#这里输入要爬的网站域名</span><br><span class="line">r.encoding = requests.utils.get_encodings_from_content(r.content)[<span class="number">0</span>]</span><br><span class="line">soup = BeautifulSoup(r.text,'lxml')#这一步需要事前pip install lxml</span><br><span class="line">print soup.title.string</span><br></pre></td></tr></table></figure></p><p>说一下，如果在<code>from bs4 import BeautifulSoup</code>爆出<code>ImportError: No module named &#39;bs4&#39;</code>是因为安装的库装错了，应该是<code>pip install beautifulsoup4</code>而不是<code>pip install beautifulsoup</code>。启动脚本效果如下：<br><img src="/images/spider1.png" alt="paradin"></p><h2><span id="编码问题">编码问题</span></h2><p>上面那个脚本里的<code>soup.title.string</code>的类型是<code>bs4.element.NavigableString</code>，如果不用print那么它的形式是<code>unicode</code>的，如图：<br><img src="/images/spider2.png" alt="paradin"></p><p>这种现象并不新鲜，比如<code>list</code>在python2里一直都不是正常输出中文的，如图：<br><img src="/images/spider3.png" alt="paradin"></p><p>可见只有<code>for in</code>的时候才会正常编码，那么这样的情况怎么办？</p><p>最简单的方法，改用python3。不过上面那个脚本是可以直接把中文放到<code>soup.title.string</code>进行判断的。</p><h2><span id="安装python-364">安装python 3.6.4</span></h2><p>首先要先安装相关依赖包<code>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</code>，其中<code>readline-devel</code>这个很重要，他是管方向键的，如果python运行的时候方向键不好使，那么就要<code>yum install readline-devel</code>安装，安装完毕后重新<code>configure</code>和<code>make</code>。</p><p>然后过程如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release#运行这个命令添加epel扩展源</span><br><span class="line">#安装pip</span><br><span class="line">yum install python-pip</span><br><span class="line">pip install wget</span><br><span class="line">wget https:<span class="comment">//www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz</span></span><br><span class="line">#解压</span><br><span class="line">xz -d Python<span class="number">-3.6</span><span class="number">.4</span>.tar.xz</span><br><span class="line">tar -xf Python<span class="number">-3.6</span><span class="number">.4</span>.tar</span><br><span class="line">#进入解压后的目录，依次执行下面命令进行手动编译</span><br><span class="line">./configure prefix=<span class="regexp">/usr/</span>local/python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">#将原来的链接备份</span><br><span class="line">mv /usr/bin/python /usr/bin/python.bak</span><br><span class="line">#添加python3的软链接</span><br><span class="line">ln -s /usr/local/python3/bin/python3<span class="number">.6</span> /usr/bin/python</span><br><span class="line">#测试是否安装成功了</span><br><span class="line">python -V</span><br></pre></td></tr></table></figure></p><p>更改yum配置，因为其要用到python2才能执行，否则会导致yum不能正常使用，需要分别修改<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>这两个文件，把他们的<code>#! /usr/bin/python</code>修改为<code>#! /usr/bin/python2</code>。</p><p>然后还要给python3的pip3做一个软连接: <code>ln -s  /usr/local/python3/bin/pip3 /usr/bin/pip3</code>。</p><p>注意！如果你用了python3那么上面那个脚本就会有很大的变动。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a><br><a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html</a></p>]]></content>
    
    <summary type="html">
    
      对线上业务要有一个敬畏之心，怎么呵护都不为过
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>云服务器的内存竟然少了500M...</title>
    <link href="http://yoursite.com/2018/07/27/%E7%AE%97%E7%AE%97%E5%86%85%E5%AD%98%E7%9A%84%E8%BF%99%E4%B8%80%E7%AC%94%E7%B3%8A%E6%B6%82%E5%B8%90/"/>
    <id>http://yoursite.com/2018/07/27/算算内存的这一笔糊涂帐/</id>
    <published>2018-07-27T07:28:35.000Z</published>
    <updated>2018-08-03T05:54:17.603Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="故障发现">故障发现</span></h2><p>今天发现有一台阿里云线上环境的服务器内存在告急，使用<code>free -m</code>一看，果然剩余的内存不多了，而且<code>buffers</code>和<code>cached</code>也都不高，如图：<br><img src="/images/memcache1.png" alt="paradin"></p><p>用<code>top</code>一看，里面的情况是这样的:<br><img src="/images/memcache2.png" alt="paradin"></p><p>很奇怪，<code>top</code>里的<code>res</code>即物理内存加起来也就2200M多一点，但是<code>free</code>命令里显示已经用掉了几乎3.4个G，那这1.2G的空头内存去哪了？要知道，<code>free</code>命令会把<code>Slab缓存</code>统计到了<code>used memory</code>里，那就看看<code>slab缓存</code>有多少吧。</p><p><code>yum install -y nmon</code>，使用<code>nmon</code>看一下，如图：<br><img src="/images/memcache3.png" alt="paradin"></p><p>发现里面有几乎650MB的slab内存，这样还是少了大约550MB，那么使用<code>slabtop</code>查看细节，如图：<br><img src="/images/memcache5.png" alt="paradin"></p><p>再用<code>cat /proc/meminfo</code>去查看一下内存详细情况，如图：<br><img src="/images/memcache4.png" alt="paradin"></p><p><a href="https://blog.famzah.net/2014/09/22/know-your-linux-memory-usage/" target="_blank" rel="noopener">https://blog.famzah.net/2014/09/22/know-your-linux-memory-usage/</a> 这里提到内存的计算公式：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MemTotal = MemFree + (Buffers + Cached + SwapCached) + AnonPages + (Slab + PageTables + KernelStack)</span><br><span class="line">MemTotal = MemFree + (Active + Inactive) + (Slab + PageTables + KernelStack)</span><br><span class="line">MemTotal = MemFree + (Buffers + Cached + SwapCached) + AnonPages + ((SReclaimable + SUnreclaim) + PageTables + KernelStack)</span><br><span class="line">MemTotal = MemFree + ((“Active(anon)” + “Active(file)”) + (“Inactive(anon)” + “Inactive(file)”)) + ((SReclaimable + SUnreclaim) + PageTables + KernelStack)</span><br></pre></td></tr></table></figure></p><p>虽然作者说他测试的机器内核是3.2的，但是这几个公式对我这个服务器（内核2.6）都可以用，虽然肯定不能严丝合缝但是相差值并不大，我用前两个公式算了一下我这个机器的情况：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MemTotal（<span class="number">3495620</span>） = MemFree（<span class="number">251396</span>） + Buffers（<span class="number">11456</span>） + Cached（<span class="number">292324</span>） + SwapCached（<span class="number">0</span>） + AnonPages（<span class="number">2302484</span>） + Slab（<span class="number">627068</span>） + PageTables（<span class="number">8972</span>） + KernelStack（<span class="number">1920</span>） </span><br><span class="line">MemTotal（<span class="number">3495592</span>） = MemFree（<span class="number">251396</span>） + Active（<span class="number">2450960</span>） + Inactive（<span class="number">155276</span>） + Slab（<span class="number">627068</span>） + PageTables（<span class="number">8972</span>） + KernelStack（<span class="number">1920</span>）</span><br></pre></td></tr></table></figure></p><h2><span id="猜测一下">猜测一下</span></h2><p>我特么的法克，这个memtotal跟3921112差距很远啊！相差了412MB！为什么会少了这么多？会不会这412MB就是那<code>used memory</code>减去slap内存的那部分神秘内存？他为什么没有统计在<code>/proc/meminfo</code>里？</p><p>于是果断给阿里云提工单，截图发锤，让他们给一个完美的解释。</p><p>等待阿里云回复的时间里，我又找了几个其他的机器，各种型号的都算了一下，发现一个现象：凡是装了这个模块的服务器都出现了<code>MemTotal</code>不相符的问题，大约误差值都是400M~500M，而除了这个模块，<code>MemTotal</code>的误差值基本就是50M以内。</p><p>呃…这好像不能怪阿里云了…不过的确<code>MemTotal</code>是有误差的啊！</p><p>找开发了解了一下，这个服务器里用了大量的tcp长连接，而且是https的，使用<code>netstat -na|grep ESTABLISHED|wc -l</code>一看，有95000个左右。</p><p>而在开发环境的机器里查看，<code>MemTotal</code>的相差率很小，而tcp连接数则不到20个。那用排除法可以确定是TCP长连接的锅，于是我猜测<strong>TCP长连接占用掉了一部分内存，而这部分内存又没有在meminfo（SLAB）里体现出来，进而导致free命令与top命令相差过大</strong>。</p><h2><span id="小心求证">小心求证</span></h2><p><strong>未完待续…</strong></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://farll.com/2016/10/high-memory-usage-alarm/#comment-9881" target="_blank" rel="noopener">http://farll.com/2016/10/high-memory-usage-alarm/#comment-9881</a><br><a href="http://lday.me/2017/09/02/0012_a_memory_leak_detection_procedure/" target="_blank" rel="noopener">http://lday.me/2017/09/02/0012_a_memory_leak_detection_procedure/</a> （虽然跟本文没啥关系，但是强力推荐）<br><a href="http://blog.yufeng.info/archives/2456" target="_blank" rel="noopener">http://blog.yufeng.info/archives/2456</a><br><a href="http://lovestblog.cn/blog/2015/08/21/rssxmx/" target="_blank" rel="noopener">http://lovestblog.cn/blog/2015/08/21/rssxmx/</a><br><a href="https://www.mawenbao.com/research/linux-ate-my-memory.html" target="_blank" rel="noopener">https://www.mawenbao.com/research/linux-ate-my-memory.html</a></p>]]></content>
    
    <summary type="html">
    
      拿着计算器算内存，我觉得我成了一个会计...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="内存泄漏" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用tqdm制作下载进度条</title>
    <link href="http://yoursite.com/2018/07/24/%E4%BD%BF%E7%94%A8tqdm%E6%B7%BB%E5%8A%A0%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://yoursite.com/2018/07/24/使用tqdm添加下载的进度条/</id>
    <published>2018-07-24T13:04:48.000Z</published>
    <updated>2018-07-26T05:55:08.481Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="制作进度条">制作进度条</span></h2><p>既然接手了国内专有云，就要写一个“自动化部署脚本”。于是我就把整个部署的安装包放到阿里云的bucket，用脚本去<code>wget</code>这个部署包，然后进行脚本部署。但是由于这个安装包比较大，`于是就打算在脚本里添加一个“下载进度条”，这样就能了解到当前的下载情况。</p><p>google了一下，就发现了<code>tqdm</code>这个库，它声称比老版的progressbar库的单次响应时间提高了10倍以上，安装的方法很简单：<code>pip install tqdm</code>。</p><p>具体的用途和参数可以去看<a href="https://lorexxar.cn/2016/07/21/python-tqdm/" target="_blank" rel="noopener">https://lorexxar.cn/2016/07/21/python-tqdm/</a> 这篇文章。</p><p>从tqdm的几个参数可见要使用tqdm做下载进度条首先需要整个文件的大小。整个文件的大小可以用<code>requests.get</code>方法获取，获取到<code>header</code>里就有目标的大小。在使用<code>requests</code>模块下载大文件/数据时，建议使用使用<code>stream</code>模式。如果是<code>stream=False</code>，它会立即开始下载文件并放到内存中，如果文件过大，有可能导致内存不足。然后就是把目标文件拆成一个一个的小块，逐步的写入一个文件，这样达到了下载文件的目的。整个脚本如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">def downloadFILE(url,name):</span><br><span class="line">    resp = requests.get(url=url,stream=True)</span><br><span class="line">#stream=True的作用是仅让响应头被下载，连接保持打开状态，</span><br><span class="line">    content_size = int(resp.headers['Content-Length'])/1024#确定整个安装包的大小</span><br><span class="line">    <span class="keyword">with</span> open(name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print <span class="string">"安装包整个大小是："</span>,content_size,<span class="string">'k，开始下载...'</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> tqdm(iterable=resp.iter_content(<span class="number">1024</span>),total=content_size,unit=<span class="string">'k'</span>,desc=name):</span><br><span class="line">#调用iter_content，一块一块的遍历要下载的内容，搭配stream=True，此时才开始真正的下载</span><br><span class="line">#iterable：可迭代的进度条 total：总的迭代次数 desc：进度条的前缀</span><br><span class="line">            f.write(data)</span><br><span class="line">        print name + <span class="string">"已经下载完毕！"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"需要下载的文件的地址"</span></span><br><span class="line">    name = url.split('/')[-1]#截取整个url最后一段即文件名</span><br><span class="line">    downloadFILE(url,name)</span><br></pre></td></tr></table></figure></p><p><img src="/images/bpython1.png" alt="paradin" title="脚本执行效果"><br>注意！下载文件所在的bucket要设置成“公有读”而不能是“私有”。</p><h2><span id="补充">补充</span></h2><ol><li>解压缩的脚本： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">filename = <span class="string">'要解压包的路径'</span></span><br><span class="line">fz = zipfile.ZipFile(filename, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> fz.namelist():</span><br><span class="line">    fz.extract(file, path)</span><br></pre></td></tr></table></figure></li></ol><p>这个脚本即使没有unzip命令也可以执行的。</p><ol><li><p>获取本地IP地址的脚本：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def get_local_ip(ifname = <span class="string">'eth0'</span>):</span><br><span class="line">    <span class="keyword">import</span> socket, fcntl, struct</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    inet = fcntl.ioctl(s.fileno(), <span class="number">0x8915</span>, struct.pack(<span class="string">'256s'</span>, ifname[:<span class="number">15</span>]))</span><br><span class="line">    ret = socket.inet_ntoa(inet[<span class="number">20</span>:<span class="number">24</span>])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">print get_local_ip()</span><br></pre></td></tr></table></figure></li><li><p><code>bpython</code>，这是一个好东西，可以在linux环境下实现类似<code>pycharm</code>的提示功能,搭配tab键补全。安装方法就是<code>pip install bpython</code>，然后启动python的时候直接bpython即可。效果如图：<br><img src="/images/bpython.gif" alt="paradin"></p></li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/qq_40666028/article/details/79335961" target="_blank" rel="noopener">https://blog.csdn.net/qq_40666028/article/details/79335961</a><br><a href="http://blog.topspeedsnail.com/archives/9075" target="_blank" rel="noopener">http://blog.topspeedsnail.com/archives/9075</a><br><a href="https://www.168seo.cn/python/24286.html" target="_blank" rel="noopener">https://www.168seo.cn/python/24286.html</a></p>]]></content>
    
    <summary type="html">
    
      当下载大文件的时候，对着一个黑漆漆的屏幕干等，这太不酷了。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="可视化" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>将Redhat的yum更换成免费版本</title>
    <link href="http://yoursite.com/2018/07/20/%E5%B0%86radhat%E7%9A%84yum%E6%9B%B4%E6%8D%A2%E6%88%90%E5%85%8D%E8%B4%B9%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/07/20/将radhat的yum更换成免费版本/</id>
    <published>2018-07-20T06:40:06.000Z</published>
    <updated>2018-07-24T01:38:21.096Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="redhat替换yum源">RedHat替换yum源</span></h2><p>这次给吉林移动做一个项目，他们的服务器必须要用IE浏览器登陆堡垒机进行环境部署。我登陆上去一看，是redhat，在使用yum的时候会有如下报错：<br><img src="/images/yum2.png" alt="akb48"></p><p>这句话的意思是“redhat自带的yum源是需要注册才是更新下载软件的，如果必须注册才能使用”，换而言之就是要收费。卧槽，怎么可能，我们向来是“要钱没有，要命一条”。于是就要用CentOS源来替代yum源，而CentOS源是免费的。</p><p>首先先删除掉redhat自带的yum：<code>rpm -qa | grep yum | xargs rpm -e --nodeps</code>。</p><p>然后用<code>cat /etc/redhat-release</code>命令去查看一下系统版本，我这个机器的版本是<code>Red Hat Enterprise Linux Server release 6.5 (Santiago)</code>，就去<a href="http://mirrors.163.com/centos/6/os/x86_64/Packages/" target="_blank" rel="noopener">http://mirrors.163.com/centos/6/os/x86_64/Packages/</a> 下载如下几个文件：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm</span></span><br><span class="line">http:<span class="comment">//mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-81.el6.centos.noarch.rpm</span></span><br><span class="line">http:<span class="comment">//mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm</span></span><br></pre></td></tr></table></figure></p><p>如果想下载<code>centos 7</code>的就去<a href="http://mirrors.163.com/centos/7/os/x86_64/Packages/" target="_blank" rel="noopener">http://mirrors.163.com/centos/7/os/x86_64/Packages/</a> 这个网站下，文件名字是一样的就是版本号不一样，需要自己找一下。</p><p>然后就是安装这几个包：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh yum-metadata-parser<span class="number">-1.1</span><span class="number">.2</span><span class="number">-16.</span>el6.x86_64.rpm</span><br><span class="line">rpm -ivh yum<span class="number">-3.2</span><span class="number">.29</span><span class="number">-81.</span>el6.centos.noarch.rpm</span><br><span class="line">rpm -ivh yum-plugin-fastestmirror<span class="number">-1.1</span><span class="number">.31</span><span class="number">-45.</span>el7.noarch.rpm</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">wget http:<span class="comment">//mirrors.163.com/.help/CentOS6-Base-163.repo#最好先备份旧文件</span></span><br><span class="line">sed -i <span class="string">'s#$releasever#6#g'</span> ./CentOS6-Base<span class="number">-163.</span>repo</span><br><span class="line">yum clean all#清除原有的缓存</span><br><span class="line">yum makecache#重建缓存</span><br><span class="line">yum update -y#更新系统</span><br></pre></td></tr></table></figure></p><p>大功告成！可以使用免费的yum去装装装了！</p><h2><span id="修复python-urlgrabber版本过低">修复Python-urlgrabber版本过低</span></h2><p>当执行到<code>rpm -ivh yum-3.2.29-81.el6.centos.noarch.rpm</code>这一步的时候，可能会出现一个python的错误：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python-urlgrabber &gt;= <span class="number">3.9</span><span class="number">.1</span><span class="number">-10</span> is needed by yum<span class="number">-3.2</span><span class="number">.29</span><span class="number">-73.</span>el6.centos.noarch</span><br></pre></td></tr></table></figure></p><p>要求<code>python-urlgrabber</code>版本必须大于等于3.9.1-10，而用<code>rpm -qa|grep python</code>查看当前的版本是<code>python-urlgrabber-3.9.1-9.el6.noarch</code>，于是就<code>rpm -e python-urlgrabber-3.9.1-9.el6.noarch</code>卸载掉，<code>wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-urlgrabber-3.9.1-11.el6.noarch.rpm</code>之后，执行<code>rpm -ivh python-urlgrabber-3.9.1-11.el6.noarch.rpm</code>命令安装即可。</p><p>安装完毕，再用<code>rpm -ivh --force yum-*</code>安装后面的内容。如图:<br><img src="/images/yum4.png" alt="akb48"></p><h2><span id="无法解析yum源">无法解析yum源</span></h2><p>如果在<code>yum makecache</code>的时候出现了<code>http://mirrors.163.com/centos/6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 6 - &quot;Couldn&#39;t resolve host &#39;mirrors.163.com&#39;&quot;</code>的错误，如图：<br><img src="/images/yum3.png" alt="akb48"></p><p>就修改一下<code>/etc/resolv.conf</code>，然后在里面添加一句<code>nameserver 8.8.8.8</code>，保存即可。</p><h2><span id="nokey">NOKEY？？？</span></h2><p>如果出现<code>Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</code>，可以使用如下方法解决：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/pki/rpm-gpg/ </span><br><span class="line">wget http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 </span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      自从投入了专有云，就要面对各种各样的甲方爸爸，爸爸们用的系统千奇百怪。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redhat" scheme="http://yoursite.com/tags/redhat/"/>
    
      <category term="yum源" scheme="http://yoursite.com/tags/yum%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Centos7编码安装php7.2和node.js8.11</title>
    <link href="http://yoursite.com/2018/07/17/centos7%E7%BC%96%E7%A0%81%E5%AE%89%E8%A3%85php7-2-7/"/>
    <id>http://yoursite.com/2018/07/17/centos7编码安装php7-2-7/</id>
    <published>2018-07-17T07:47:18.000Z</published>
    <updated>2018-07-19T01:33:59.258Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装php72">安装php7.2</span></h2><p>首先先做准备工作：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libpng libpng-devel</span><br><span class="line">yum install -y bzip2 bzip2-devel</span><br><span class="line">yum install -y curl curl-devel</span><br></pre></td></tr></table></figure></p><p>编译安装步骤在此：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd /root/</span><br><span class="line">wget http:<span class="comment">//101.96.10.64/cn2.php.net/distributions/php-7.2.7.tar.gz</span></span><br><span class="line">tar -zxvf php<span class="number">-7.2</span><span class="number">.7</span>.tar.gz</span><br><span class="line">cd  php<span class="number">-7.2</span><span class="number">.7</span></span><br><span class="line">sudo ./configure /</span><br><span class="line">--prefix=/usr/local/php727 /#PHP7安装的根目录</span><br><span class="line">--with-config-file-path=/usr/local/php727/etc /#PHP7的配置目录</span><br><span class="line">--with-apxs2=/usr/bin/apxs#如果用的是nginx就不要这句话</span><br><span class="line">--with-gd /#PHP gd模块</span><br><span class="line">--with-bz2 /#包含BZip2支持</span><br><span class="line">--with-zlib /#包含ZLIB支持</span><br><span class="line">--with-curl /#包含cURL支持</span><br><span class="line">--enable-mbstring / #启用多字节字符串支持</span><br><span class="line">--enable-zip / #包含Zip读写支持</span><br><span class="line">--enable-fpm / #启用PHP-FPM进程管理</span><br><span class="line">--enable-mysqlnd /#Enable mysqlnd explicitly</span><br><span class="line">--with-mysqli / #包含mysql支持</span><br><span class="line">--with-pdo-mysql/#包含mysql支持</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>如果出现了<code>configure error xml2-config not found. please check your libxml2 installation</code>错误，要执行如下两个：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libxml2</span><br><span class="line">yum install libxml2-devel -y</span><br></pre></td></tr></table></figure></p><p>重新去执行<code>./configure</code>那步和<code>make &amp;&amp; make install</code>，整个编译完成之后，再把原带的<code>php.ini</code>拷贝到源码安装的文件夹里：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /root/php<span class="number">-7.2</span><span class="number">.7</span>/php.ini-development /usr/local/php727/lib/php.ini</span><br></pre></td></tr></table></figure></p><p>设置环境变量，修改<code>/etc/profile</code>文件使其永久性生效，并对所有系统用户生效，在文件末尾加上如下两行代码：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:<span class="regexp">/usr/</span>local/php/bin</span><br><span class="line"><span class="keyword">export</span> PATH</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>设置<code>php-fpm</code>开机自动启动<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line">chkconfig php-fpm on</span><br><span class="line">cp /usr/local/php727/etc/php-fpm.conf.default /usr/local/php727/etc/php-fpm.conf</span><br><span class="line">service php-fpm start</span><br></pre></td></tr></table></figure></p><h2><span id="安装gcc-810">安装gcc 8.1.0</span></h2><p>安装node.js需要先安装gcc，但是这个gcc不能用<code>yum install gcc-c++</code>装，因为centos7的gcc版本太低（4.8.5）不满足，在node.js编译的时候会报错：<code>WARNING: C++ compiler too old, need g++ 4.9.4 or clang++ 3.4.2 (CXX=g++)</code>。所以要去<a href="https://ftp.gnu.org/gnu/gcc/" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/gcc/</a> 下载一个高版本的，我选择了目前最牛逼的<code>8.1.0</code>。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz</span></span><br><span class="line">tar -zxvf gcc<span class="number">-8.1</span><span class="number">.0</span>.tar.gz</span><br><span class="line">cd gcc<span class="number">-8.1</span><span class="number">.0</span></span><br><span class="line">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure></p><p>此时进入漫长的等待，一会就会出现如下的字样，代表成功安装了!<br><img src="/images/gcc1.png" alt="办公室"></p><p>此时进行编译安装：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-checking=release --enable-languages=c,c++ --disable-multilib </span><br><span class="line">make &amp;&amp;　make install</span><br></pre></td></tr></table></figure></p><p>又要进行漫长的等待…这一次非常非常漫长，我当时几乎用了大约2个小时…<br><img src="/images/gcc2.png" alt="办公室"></p><p>然后使用<code>gcc -v</code>检查一下版本：<br><img src="/images/gcc3.png" alt="办公室"></p><h2><span id="安装nodejs-811">安装node.js 8.11</span></h2><p>先去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 下载新的版本包:<br><img src="/images/gcc4.png" alt="办公室"></p><p>直接下载到linux里解压缩，如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz</span></span><br><span class="line">tar zxvf node-v8<span class="number">.11</span><span class="number">.3</span>.tar.gz</span><br><span class="line">cd node-v8<span class="number">.11</span><span class="number">.3</span></span><br><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/node/<span class="number">8.11</span><span class="number">.3</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>此时在make这一步可能会有这样的错误：<br><img src="/images/gcc5.png" alt="办公室"></p><p>这个原因是“升级gcc时，生成的动态库没有替换老版本gcc动态库”，所以要将gcc最新版本的动态库替换系统中老版本的动态库。</p><p>使用<code>find / -name &quot;libstdc++.so*&quot;</code>查找编译gcc时生成的最新动态库，发现最近的动态库是这个：<br><img src="/images/gcc6.png" alt="办公室"></p><p>于是就进行替换并作一个软连接:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp /root/gcc<span class="number">-8.1</span><span class="number">.0</span>/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.25</span> /usr/lib64</span><br><span class="line">cd /usr/lib64</span><br><span class="line">ll libstdc++.so<span class="number">.6</span></span><br><span class="line">lrwxrwxrwx 1 root root 19 Jul 17 09:59 libstdc++.so.6 -&gt; libstdc++.so.6.0.19#把原来的记住，防止有回滚的现象</span><br><span class="line">rm -rf  libstdc++.so<span class="number">.6</span></span><br><span class="line">ln -s libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.25</span> libstdc++.so<span class="number">.6</span></span><br></pre></td></tr></table></figure></p><p>然后重新返回到<code>node-v8.11.3</code>文件夹里去<code>make</code>就OK了！</p><p>设定环境变量，<code>vim /etc/profile</code>，在<code>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</code>一行的上面添加如下内容：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set for nodejs</span><br><span class="line"><span class="keyword">export</span> NODE_HOME=<span class="regexp">/usr/</span>local/node/<span class="number">8.11</span><span class="number">.3</span></span><br><span class="line"><span class="keyword">export</span> PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>保存退出之后，<code>source /etc/profile</code>，再<code>node --version</code>看一下版本是<code>v8.11.3</code>就是OK了！</p>]]></content>
    
    <summary type="html">
    
      久闻php7的速度以及性能那可是比php5系列的任何一版本都要快，今天来试试
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="gc++" scheme="http://yoursite.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>世界杯的一些感悟</title>
    <link href="http://yoursite.com/2018/07/12/%E4%B8%96%E7%95%8C%E6%9D%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2018/07/12/世界杯的一些新感悟/</id>
    <published>2018-07-12T02:21:00.000Z</published>
    <updated>2018-07-16T05:53:43.496Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="传控已死">传控已死？</span></h2><p>今早英格兰加时赛输给了克罗地亚，至此就剩下一名曼城球员还在本届世界杯继续前进了，那就是法国队的边后卫门迪。再加上之前小组出局的德国和1/8赛输球的西班牙，不得让人怀疑是否“传控已死”？</p><p>传控被瓜迪奥拉发扬光大已经10年了，2008年的西班牙也是靠着传控和巴萨的班底拿下两次欧洲杯和一次世界杯。传控虽然在理论上是一个完美的战术，但是战术也需要人来执行，球员水平有高低状态有起伏，裁判的尺度也不一样，这都会影响传控的比赛结果。这几年的传控逐渐被各路教练针对性研究，他们用“高压迫，快速反击，大巴防守”的套路击败传控的经典战役已经屡见不鲜。所以这几年的传控可谓是磕磕绊绊，风光不再。</p><p>传控对中场球员要求很高，一旦球员失去了往前传球的机会，那么就成了无效控球，倒脚来倒脚去时间就走光了。而传统打法对球员的要求相对简单但是对球员身体素质和纪律要求很高，所以更多球队选择了传统打法，而他们也很有针对性的对强队进行了部署，或打高空球或者摆大巴打反击。</p><p>我个人通过今年的世界杯和以往的几次欧冠来得到这样的结论：传控没有死，但是传控在杯赛的统治力已经大幅下滑，仅但在联赛和小型杯赛还有一定的优势。原因很简单，联赛是三十多场比赛，容错率要远大于杯赛，这就是传控的好处—虐菜相对来说比较稳。但是最近的足坛趋势是世界杯/欧洲杯/欧冠最大，拿不到上面几个锦标，球员就很难得到金球奖。所以在成绩的压力下，足坛也会慢慢将传控降温，改走传统打法。</p><p>即使是442也要有能一脚长传功力的中场做炮台，合适的球员搭配合适的战术才会得到胜利。任何战术本身也要自我修复漏洞，现在的传控队伍也开始慢慢放弃无用的控制，讲究定位球破门和远射破门，但是如何破密集防守还是世界教练共同面对的难题。</p><h2><span id="决赛怎么看">决赛怎么看？</span></h2><p>世界杯决赛肯定是防守为主的低比分比赛。法国那边进攻肯定还是“吉鲁吸引炮火，格里兹曼见缝插针，有反击找姆巴佩，角球任意球上大个子”的常规进攻路线。而克罗地亚也是慢节奏抓定位球的方法。我觉得克罗地亚中场并不虚法国，但是莫德里奇这几年没有跟坎特交手过，可以通过这场决赛看看双方谁更技高一筹。法国这批球员相对年轻，虽然这场比赛他们输不起，但是他们已经有了2016年欧洲杯亚军的惨痛经验，而克罗地亚虽然有些球员没有决赛经验，但是他们心态更放松，比较明显的隐患就是克罗地亚的体能是否能支持他们再一次顶得住法国的炮火。</p><p>从2006年至今，三届世界杯都踢了延长赛，所以我个人推荐买常规时间法国赢或者平。</p><p>至于季军赛，我觉得凯恩会进球，但是比利时3：2赢下英超内战。</p><p>世界杯让足彩也跟着热闹起来。我也跟着潮流买了几场比赛，但是我发现凡是“我跟别人说自己没买的”比赛，结果真中了；凡是我“下注买”的比赛都输了，且不用说德国输墨西哥，日本赢哥伦比亚的冷门战，英格兰打哥伦比亚那场的常规时间最后一分钟，米纳进了一个头球，我直接损失100块… </p><p>由此我坚信了，我就不是一个特别有好运气的人，而且也比较害怕成为赌徒，完全符合毛主席对知识分子和小资产阶级的定义，一辈子就是老婆孩子热炕头的命。</p><h2><span id="中国足球怎么办">中国足球怎么办？</span></h2><p>每到这种重大足球赛事，国足就要被当作反面典型来说嘴。前几天黄西发了微博调侃遭到国足及相关人士的狂喷，其实喷来喷去，主题就是一个“国足那些球员拿钱多，成绩却这么烂，如何能提高国足成绩？”</p><p>其实这个主题是老生常谈，每次都说改革但是也没什么进步，哪怕输给泰国1-5，全国上下一片骂，几天之后涛声依旧…</p><p>我个人认为中国足球在20年时间内是不可能强大的，因为这与中国国情有关。</p><p>第一，在中国传统教育里，中高阶级就没有那种“把孩子培养成运动员”的想法，毕竟丁俊晖父亲和张玉宁父亲才是少数，更多的父母希望孩子去当医生当公务员做生意，这不仅仅是大陆家庭，香港家庭和台湾家庭也是如此。只有贫苦家庭才会把孩子送去专门搞体育；</p><p>第二，为什么中产家庭不希望孩子只是把体育当作兴趣爱好而不是职业？首先现在独生子女太多，家长担心吃苦；其次，搞职业体育是从小开始的，万一踢不出来光阴就白白浪费了，而在发达国家，比如日本，贫富差距没有那么大，而且球员素养相对较高，即使不能大红大紫也不至于饿死，而比如南美部分贫困国家，家里不是独生子女，本来很穷上不起学，踢不出来就继续去搬砖，所以这两种国家的足球成绩不会太烂；再其次，足球青训部分教练素质不高，家长担心孩子跟着学坏；</p><p>第三，足球需要青训，而青训需要几代人的时间，但是足协更喜欢速成的方法，这与足球规律相悖，所以搞来搞去钱花了不少却始终原地转圈；</p><p>记得“诗人”贺炜在日本与比利时之战之后，发微博羡慕日本足球的同时也说“不多说了，说多了反动”。的确，如果潜规则少一点，贫富差距均衡一点，或许不止是足球，全中国体育的市场化就会有更加显著的改善了。</p>]]></content>
    
    <summary type="html">
    
      这一个月，说快真快啊！
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="足球" scheme="http://yoursite.com/tags/%E8%B6%B3%E7%90%83/"/>
    
      <category term="世界杯" scheme="http://yoursite.com/tags/%E4%B8%96%E7%95%8C%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Mycat读写分离测试</title>
    <link href="http://yoursite.com/2018/07/10/Mycat%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/07/10/Mycat读写分离简单测试/</id>
    <published>2018-07-10T07:31:47.000Z</published>
    <updated>2018-07-10T08:47:58.913Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="配置文件解析">配置文件解析</span></h2><p>前文说了<code>schema.xml</code>文件的前两块内容，真正与读写分离有关的是第三块<code>dataHost</code>内容：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataHost name=<span class="string">"mycatTEST"</span> maxCon=<span class="string">"1000"</span> minCon=<span class="string">"10"</span> balance=<span class="string">"3"</span> writeType=<span class="string">"0"</span> dbType=<span class="string">"mysql"</span> dbDriver=<span class="string">"native"</span> switchType=<span class="string">"1"</span>  slaveThreshold=<span class="string">"100"</span>&gt;</span><br><span class="line">           &lt;heartbeat&gt;select user()&lt;<span class="regexp">/heartbeat&gt;</span></span><br><span class="line"><span class="regexp">           &lt;writeHost host="hostM1" url="rm-bp1099x0552q92edr.mysql.rds.aliyuncs.com:3306" user="mycat" password="这里是密码"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;readHost host="hostS1" url="rr-bp1x35g0w6r767eu4.mysql.rds.aliyuncs.com:3306" user="mycat" password="这里是密码"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>writeHost&gt;</span><br><span class="line">   &lt;<span class="regexp">/dataHost&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里主要描述的就是逻辑库需要映射的后端真实数据库的情况。某些选项含义如下：</p><ol><li><font color="red">maxCon</font>:指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的<code>writeHost</code>、<code>readHost</code>标签都会使用这个属性的值来实例化出连接池的最大连接数;</li><li><font color="red">minCon</font>:指定每个读写实例连接池的最小连接，初始化连接池的大小;</li><li><font color="red">balance</font>:负载均衡类型，目前的取值有4种：<br> balance=“0”, 所有读操作都发送到当前可用的writeHost上。<br> balance=“1”，所有读操作都随机的发送到readHost。<br> balance=“2”，所有读操作都随机的在writeHost、readhost上分发。<br> balance=”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力</li><li><font color="red">writeType</font>:负载均衡类型，目前的取值有3种：<br> writeType=“0”, 所有满足规则的写操作轮询的发送到可用的writeHost上。<br> writeType=“1”，所有满足规则的写操作随机的发送到readHost。<br> writeType=“2”，所有满足规则的写操作随机的在writeHost、readhost分发。（这一点我很怀疑，写操作怎么在readhost上进行）</li><li><font color="red">dbType</font>:指定后端连接的数据库类型，目前支持二进制的mysql协议，还有其他使用JDBC连接的数据库。例如：mongodb、oracle、 spark等;</li><li><font color="red">dbDriver</font>:指定连接后端数据库使用的Driver，目前可选的值有native和JDBC，当使用JDBC时则可以这么写：<code>jdbc:mysql://mycatTEST:3306/</code>;</li><li><font color="red">switchType</font>:主库切换算法，目前的取值有3种：<br> switchType=”-1”,表示不自动切换<br> switchType=”1”, 默认值，自动切换<br> switchType=”2”, 基于MySQL主从同步的状态决定是否切换,心跳语句为<code>show slave status</code><br> switchType=”3”,基于MySQL galary cluster的切换机制（适合集群）（1.4.1），心跳语句为<code>show status like &#39;wsrep%&#39;</code></li><li><font color="red">heartbeat</font>:这个标签内指明用于和后端数据库进行心跳检查的语句;</li><li><font color="red">writeHost &amp; readHost</font>:这两个标签都指定后端数据库的相关配置给mycat，用于实例化后端连接池。唯一不同的是，writeHost指定写实例、readHost指定读实例，组着这些读写实例来满足系统的要求。在一个dataHost内可以定义多个writeHost和readHost(我这里就配了一对，其实可以配很多对)。但是，如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。</li></ol><h2><span id="demo测试">Demo测试</span></h2><p>先登陆主库，然后<code>show slave status \G;</code>命令看一下状态，重点是<code>Slave_IO_Running</code>、<code>Slave_SQL_Running</code>和<code>Seconds_Behind_Master</code>这三个字段，如图：<br><img src="/images/mycat12.png" alt="akb48"></p><p>关注这三个字段的原因是“Mycat心跳机制通过检测他们来确定当前主从同步的状态”，如果<code>Seconds_Behind_Master</code>的数值大于<code>slaveThreshold</code>，读写分离筛选器会过滤掉此Slave机器，防止读到很久之前的旧数据，而当主节点宕机后，切换逻辑会检查Slave上的<code>Seconds_Behind_Master</code>是否为0，为0时则表示主从同步，可以安全切换，否则不会切换。</p><p>确认完之后，再去<code>log4j2.xml</code>文件把日志级别改成<code>debug</code>。如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;Loggers&gt;</span><br><span class="line">    &lt;asyncRoot level=<span class="string">"debug"</span> includeLocation=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;AppenderRef ref=<span class="string">"Console"</span> /&gt;</span><br><span class="line">        &lt;AppenderRef ref=<span class="string">"RollingFile"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/asyncRoot&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Loggers&gt;</span><br></pre></td></tr></table></figure></p><p>改完之后重启mycat。登陆到8066端口的mycat逻辑库，先创建一个库，再执行一个写的操作：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">`travelrecord`</span> (</span><br><span class="line"> <span class="string">`id`</span> int(<span class="number">11</span>) NOT NULL,</span><br><span class="line"> <span class="string">`name`</span> varchar(<span class="number">255</span>) NOT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">insert into travelrecord (id,name) values(<span class="number">5000010</span>,<span class="string">'bengbeng'</span>);</span><br></pre></td></tr></table></figure></p><p>在日志一看，发现这条记录已经被写入了dn2这个datanode里，如下：<br><img src="/images/mycat14.png" alt="akb48"></p><p>日志的意思是：逻辑库收到了insert命令，然后与真实库连接成功并且执行同步命令，<code>con need syn ,total syn cmd 1 commands</code>，之后发送查询sql，因为插入的那个数据是5000000，按照<code>auto-sharding-long</code>的规则，只会记录到db2的分片里。执行完后，会释放mycat逻辑库与真实Mysql连接也就是<code>release connection MySQLConnection</code>和<code>release channel MySQLConnection</code>。</p><p>再执行一个读的操作，比如<code>SELECT * FROM travelrecord;</code>，日志是这样记录的：<br><img src="/images/mycat13.png" alt="akb48"></p><p>与<code>schema.xml</code>里的<code>readhost</code>字段对比，的确是从hostS1上读取到的，由于balance=”3”，所以只会从读库读取，由于读的操作db1、db2、db3这3个分片都会操作（需要把他们的内容拼接在一起才是完整的内容），于是日志会打印三遍，实验结束。至于其他的更改参数情况，可以去看参考资料里的第二篇文章，说的很详尽了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://valleylord.github.io/post/201601-mycat-log-analysis/" target="_blank" rel="noopener">http://valleylord.github.io/post/201601-mycat-log-analysis/</a><br><a href="http://codingo.xyz/index.php/2018/03/08/mycat2/" target="_blank" rel="noopener">http://codingo.xyz/index.php/2018/03/08/mycat2/</a></p>]]></content>
    
    <summary type="html">
    
      Mycat本身不负责任何数据的同步，具体的数据同步还是依赖Mysql数据库自身的功能
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="数据库中间件" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="mycat" scheme="http://yoursite.com/tags/mycat/"/>
    
  </entry>
  
</feed>
