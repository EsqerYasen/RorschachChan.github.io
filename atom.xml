<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-13T01:48:14.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之八</title>
    <link href="http://yoursite.com/2018/12/10/%E4%BB%8Echeckbox%E9%87%8C%E5%BE%97%E5%88%B0%E4%BC%A0%E5%85%A5%E5%80%BC/"/>
    <id>http://yoursite.com/2018/12/10/从checkbox里得到传入值/</id>
    <published>2018-12-10T12:25:59.000Z</published>
    <updated>2018-12-13T01:48:14.139Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</a></p><h2><span id="需求说明以及实现思路">需求说明以及实现思路</span></h2><p>之前在Django实现了输入文本然后通过ajax传递参数到后端执行脚本并且返回结果的效果。这一次要实现的是“多选框选中对应的选项然后提示确认，最后给后台执行命令”。</p><p>多选框在实际的页面里很常见，这一次要实现的效果如图：<br><img src="/images/django31.gif" alt="akb48"></p><p>要想在django的<code>views.py</code>里获取到<code>checkbox</code>的选择项，如果用表单方法很简单，只要<code>request.POST.getlist</code>就好，我尝试去用ajax去获取，但是得到的data是空值。可能是我道行不够，不过从代码简洁的角度来说还是更推荐用django的方法。</p><p>为了用户体验友好，我们一般都会在页面提交的时候加上提示的对话框，让用户再三确认。这样就要把form表单和<code>confirm()</code>对话框一起用，<font color="red">但是有一个现象要注意</font>：如果把<code>&lt;form&gt;</code>标签写到<code>&lt;button type=&quot;submit&quot;&gt;</code>下面的话，<code>comfirm()</code>时点击了“取消”，<code>return false</code>是会生效的，即停留在本页，但是form表单是无法正常传递到目的地；如果把<code>&lt;form&gt;</code>标签写到<code>&lt;button type=&quot;submit&quot;&gt;</code>上面，现在表单可以正常传递了，但是“取消”功能又不生效了—即使点击取消依旧会跳转到表单的目标地。</p><p>这种现象产生的原因是：如果函数是包含在form的submit中的话，当点击按钮的时候，在弹出<code>confirm()</code>对话框之前，有很多的js需要执行的，而大家都知道在点击按钮的时候，表单会自动提交的；所以就没有等到用户点击“取消”按钮，form表单已经提交了，自然就不会管你有没有点击”取消”了。</p><p>解决方法：只要在按钮的<code>onclick()</code>事件的方法前面加一个<code>return</code>就ok了，这样肯定会先等返回结果在提交表单了，例如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"请点击我！"</span> onclick=<span class="string">"return method()"</span>&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="具体代码">具体代码</span></h2><p><code>ecs_list.html</code>的body部分:<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span>数据库里的ECS数据展示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">ecs_deploy</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> name=prompt(<span class="string">"请输入要执行的命令：1&gt;测试连通；2&gt;部署模块并启动；"</span>,<span class="string">"1"</span>);<span class="comment">//添加一个输入框</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> userids = [];<span class="comment">//配置一个空集</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"input:checkbox[name = ecs]:checked"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;    <span class="comment">//使用循环遍历迭代的方式得到所有被选中的checkbox复选框</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">console</span>.log($(<span class="keyword">this</span>).val());</span></span><br><span class="line"><span class="javascript">                                userids.push( $(<span class="keyword">this</span>).val() ); <span class="comment">//当前被选中checkbox背后对应的值</span></span></span><br><span class="line"><span class="undefined">                                        &#125;)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(confirm(<span class="string">"你确定要对"</span>+userids+<span class="string">"进行"</span>+name+<span class="string">"操作？"</span>))<span class="comment">//让用户再次确认</span></span></span><br><span class="line"><span class="undefined">                                &#123;</span></span><br><span class="line"><span class="javascript">                                location.href=<span class="string">"&#123;% url "</span>run_command<span class="string">" %&#125;"</span>;</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">else</span></span></span><br><span class="line"><span class="undefined">                                &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//停留在本页，没有操作</span></span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"float:left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">create_ecs</span>" %&#125;"&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>返回录入界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/k8s/run_command/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"float:left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">onclick</span>=<span class="string">"return ecs_deploy()"</span> /&gt;</span>选择服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span>//这里添加了return</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>云服务器名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>云服务器ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>内网地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>外网地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>操作系统<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>网络类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>CPU<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>内存<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>外网带宽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        &#123;% for ecs in ecss %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">&#123;&#123;ecs.name&#125;&#125;</span> <span class="attr">name</span>=<span class="string">"ecs"</span>/&gt;</span>&#123;&#123; ecs.id &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.name &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.ecsid &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.inIP &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.outIP &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.osname &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.networktype &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.CPU &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.memory &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.netwidth &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>&#123;&#123; ecs.remark &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>views.py</code>相关部分如下:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@csrf_exempt</span><br><span class="line">def run_command(request):</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">       id = request.POST.getlist(<span class="string">"ecs"</span>)</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(id)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       pass</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>相关部分如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'run_command/'</span>,views.run_command),</span><br></pre></td></tr></table></figure></p><p>启动django后，在<code>ecs_list.html</code>页面如动图点击要操作的选项提交即可看到效果，再配上后台数据库查询+ansible的辅助，我们就可以完成一个运维平台的部署功能啦！</p><h2><span id="点击页面直接选取">点击页面直接选取</span></h2><p>上面说的是复选框选取，如果需要直接点击就能得到值的话，那么就要用<code>click</code>函数搭配<code>this</code>来实现该效果，举个例子：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                          $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//触发一个点击的函数，点击标签范围是p</span></span></span><br><span class="line"><span class="javascript">                                     alert($(<span class="keyword">this</span>).html());<span class="comment">//this的用途就是获取当前的元素</span></span></span><br><span class="line"><span class="undefined">                                    &#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第三个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>页面效果如图：<br><img src="/images/django32.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/4359238/how-do-i-get-multiple-values-from-checkboxes-in-django" target="_blank" rel="noopener">https://stackoverflow.com/questions/4359238/how-do-i-get-multiple-values-from-checkboxes-in-django</a><br><a href="https://stackoverflow.com/questions/14460421/get-the-contents-of-a-table-row-with-a-button-click" target="_blank" rel="noopener">https://stackoverflow.com/questions/14460421/get-the-contents-of-a-table-row-with-a-button-click</a><br><a href="https://blog.csdn.net/stpeace/article/details/50816128" target="_blank" rel="noopener">https://blog.csdn.net/stpeace/article/details/50816128</a><br><a href="http://www.runoob.com/js/js-popup.html" target="_blank" rel="noopener">http://www.runoob.com/js/js-popup.html</a><br><a href="https://blog.csdn.net/qq_36769100/article/details/79173476" target="_blank" rel="noopener">https://blog.csdn.net/qq_36769100/article/details/79173476</a><br><a href="https://blog.csdn.net/qq_24018243/article/details/52316949" target="_blank" rel="noopener">https://blog.csdn.net/qq_24018243/article/details/52316949</a><br><a href="https://bbs.csdn.net/topics/320062312" target="_blank" rel="noopener">https://bbs.csdn.net/topics/320062312</a></p>]]></content>
    
    <summary type="html">
    
      后台得到从checkbox传入的值并加以提示框
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="checkbox" scheme="http://yoursite.com/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>Github如何删除掉一个commit</title>
    <link href="http://yoursite.com/2018/12/06/Github%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%8E%89%E4%B8%80%E4%B8%AAcommit/"/>
    <id>http://yoursite.com/2018/12/06/Github如何删除掉一个commit/</id>
    <published>2018-12-06T06:58:33.000Z</published>
    <updated>2018-12-06T14:34:26.014Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>写完了一个脚本，里面使用了阿里云的api，那自然也有公司的阿里云ak\sk，在调试的时候发现没问题，于是就上传到github上。传完之后一看，发现脚本里忘了删除敏感字段，连通公司的ak\sk一起被提交上去了…<br><img src="/images/github10.png" alt="akb48"></p><p>卧槽，这还得了？要是这个commit被人发现并且拷贝走了，岂不是得到了公司的ak\sk，后果不堪设想啊。但是如何在github远端删除掉一个commit呢？</p><p>先记录下这次commit之前一次正常的版本号，查询版本号也可以通过命令<code>git log -5</code>（查询最近5次提交历史）：<br><img src="/images/github11.png" alt="akb48"></p><p>得到上一次的版本号是<code>051ebceaedd6b64801aada354f921d6ea7ef0622</code>，然后<code>git reset --hard  051ebceaedd6b64801aada354f921d6ea7ef0622</code>。</p><p>然后再<code>git push origin HEAD --force</code>即可。整个过程如下：<br><img src="/images/github12.png" alt="akb48"></p><p>此时再去github上刷新commit的历史页面，发现记录已经回滚到051ebce（版本号前面7位）了，如图：<br><img src="/images/github13.png" alt="akb48"></p><p><font color="red">但是要注意！</font>如果你的代码是两个地方在上传github，比如含敏感词汇的文件是通过windows客户端上传的，但是你在某个linux服务器上进行了删除commit的操作，那么如果windows继续commit的话，是会再次提交所有的commit的(含带有机密字段的commit)，所以要把源头也就是windows里的commit也要用这个方法干掉，这样才算彻底删除。</p><p><img src="/images/unnatural.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      当你把一些不应该出现在公众的东西传到了github上...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之七</title>
    <link href="http://yoursite.com/2018/12/04/Django%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/04/Django制作一个密码生成器/</id>
    <published>2018-12-04T06:23:03.000Z</published>
    <updated>2018-12-05T02:53:51.985Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/</a></p><h2><span id="secrets模块">secrets模块</span></h2><p>这个<code>secrets</code>模块是<code>Python 3.6</code>才有的模块，在说它之前，先看一下<code>string.ascii_letters</code>和<code>string.digits</code>，其中<code>ascii_letters</code>是生成所有字母，即a-z和A-Z,而<code>digits</code>是生成所有数字，即0-9,如下：<br><img src="/images/django28.png" alt="akb48"></p><p>那么他俩搭配<code>secrets</code>模块就可以生成密码，代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> secrets,string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>characters = string.ascii_letters + string.digits + <span class="string">"!@#$%^&amp;*()&#123;&#125;[]~"</span>     <span class="comment">#加入特殊符号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>))    <span class="comment">#生成一个20位的随机字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password</span><br><span class="line"><span class="string">'a%45BW5bxFlN3ylr!!IE'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))     <span class="comment">#生成一个10位的随机字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password</span><br><span class="line"><span class="string">')vqRWYxgxs'</span></span><br></pre></td></tr></table></figure></p><p>看上去<code>secrets.choice</code>和<code>random.choice</code>的效果差不多，但是还是有差别的。因为<code>random</code>模块的官方文档清楚的写着<code>该模块完全不适合用作数据加密</code>，而<code>secrets</code>模块不但可以生成安全随机数还可以生成一个笃定长度的随机字符串—-可用作令牌和安全URL。</p><p>所以与<code>random</code>模块中的默认伪随机数生成器相比，我们应该优先使用<code>secrets</code>模块！</p><h2><span id="后台检验输入值合法">后台检验输入值合法</span></h2><p>之前的文章，曾经写过在django的<code>views.py</code>里判断输入值是否为空的方法，地址是<a href="https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/</a> ，但是那套方法毕竟还太粗糙。这一次我们可以通过<code>jQuery+Ajax</code>获取到值，然后进行一个具体的判断，看一下这个值是否是数字，如果不是数字就直接在页面提示“输入非法”，如果是数字，就不会提示。</p><p>思路就是先获取到前端传来的值，然后在<code>views.py</code>里增加一个定义，如果值满足定义，就不会有动静，如果值不满足，那么就局部刷新一个页面。</p><h2><span id="具体代码">具体代码</span></h2><p>路由文件<code>urls.py</code>部分如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开头略</span><br><span class="line">   path(r<span class="string">'mkpasswd/'</span>,views.make_passwd,name=<span class="string">'mkpasswd'</span>),</span><br><span class="line">   path(r<span class="string">'get_mkpasswd/'</span>,views.get_passwd,name=<span class="string">'get_passwd'</span>),</span><br></pre></td></tr></table></figure></p><p>配置文件<code>views.py</code>相关部分如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">开头略</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">import</span> secrets,string</span><br><span class="line"></span><br><span class="line">def make_passwd(request):</span><br><span class="line">   <span class="keyword">return</span> render(request,<span class="string">'mkpasswd.html'</span>)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def get_passwd(request):</span><br><span class="line">characters = string.ascii_letters + string.digits + <span class="string">"!@#$%^&amp;*()~[]&#123;&#125;=+"</span></span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">       num = request.POST.get('number',20)#这里得到的是str格式</span><br><span class="line">       if str.isdigit(num) is False:#判断是否是数字</span><br><span class="line">           <span class="keyword">return</span>  HttpResponse(<span class="string">"输入值不合法！必须是数字！"</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           result = <span class="string">''</span>.join(secrets.choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> range(int(num)))</span><br><span class="line">           <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       pass</span><br></pre></td></tr></table></figure></p><p>前端页面<code>mkpasswd.html</code>如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">'base.html'</span> %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        创建密码</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &lt;h2&gt;创建密码&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h3&gt;默认密码是20位，并且带有特殊符号&lt;/</span>h3&gt;</span><br><span class="line">                密码长度：&lt;input type=<span class="string">"text"</span> id=<span class="string">"number"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>生成密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;script&gt;</span><br><span class="line">                        $(document).ready(function()&#123;</span><br><span class="line">                                $("button").click(function()&#123;  </span><br><span class="line">                                var word=document.getElementById('number').value //获取输入框的值</span><br><span class="line">                                        $.ajax(&#123;</span><br><span class="line">                                        type:"POST",</span><br><span class="line">                                        url:"&#123;% url "get_passwd" %&#125;",              </span><br><span class="line">                                        data:&#123;number:word&#125;,         //传递参数</span><br><span class="line">                                        success:function(result)&#123;$("#ask").html(result);&#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure></p><p>最后整个的过程执行效果如下：<br><img src="/images/django29.gif" alt="akb48"></p><h2><span id="前端检验输入值合法">前端检验输入值合法</span></h2><p>俗话说得好，人生不折腾不舒服斯基。为了更好的体验，现在改一下方略：在用户输入的时候，页面要随时的判断输入值，有错误就直接提醒，这样就不用在提交的时候才告诉用户“输入值非法”了，但是这样的需求就需要更改判断逻辑—-把判断的任务交给<code>jQuery</code>而不是后台，<code>jQuery</code>判断成功了，再把值提交到后台。</p><p>要在输入的时候随时判断，那么就要使用<code>jQuery</code>的<code>keydown</code>功能，然后再配上<code>each</code>功能进行遍历。<code>each</code>的用法是<code>$(selector).each(function(index,element))</code>，这里<code>index</code>是选择器的<code>index</code>位置,而<code>element</code>是当前的元素，这两个元素都是必须的！</p><p>那么只需要更改的是<code>mkpasswd.html</code>，内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                &lt;h2 style=<span class="string">"text-align:center;"</span>&gt;创建密码&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock %&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#123;% block content %&#125;</span></span><br><span class="line"><span class="regexp">                &#123;% csrf_token %&#125;</span></span><br><span class="line"><span class="regexp">&lt;div style="text-align:center;"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h2&gt;创建密码&lt;/</span>h2&gt;<span class="comment">//增加了居中效果</span></span><br><span class="line">                &lt;h3&gt;默认密码是<span class="number">20</span>位，并且带有特殊符号&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;密码长度：&lt;input style="margin: 5px; padding: 10px;" type="text" id="number" /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>//调整输入框的长宽</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">id</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>//这里是警告出现的位置</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> &gt;</span>生成密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//这里是结果出现的位置</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;script&gt;</span><br><span class="line">                        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                $(<span class="string">"#number"</span>).bind(<span class="string">'keydown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//输入就开始检查</span></span><br><span class="line">                                $(<span class="string">'input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,n</span>)</span>&#123;<span class="comment">//进行遍历</span></span><br><span class="line">                                        <span class="keyword">var</span> isnum = n.value.match(<span class="regexp">/^\d+$/g</span>);<span class="comment">//匹配正则表达式，是否是数字</span></span><br><span class="line">                                        <span class="keyword">if</span>(<span class="literal">null</span> != isnum)&#123;                                                </span><br><span class="line">$(n).css(<span class="string">'border'</span>,<span class="string">'2px solid green'</span>);   <span class="comment">//是数字，边框变为绿色</span></span><br><span class="line">                                                <span class="built_in">document</span>.getElementById(<span class="string">"error"</span>).innerText=<span class="string">""</span>;</span><br><span class="line">                                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                                $(n).css(<span class="string">'border'</span>,<span class="string">'2px solid red'</span>);     <span class="comment">//不是数字，边框变为红色作为警告                                           </span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"error"</span>).innerText=<span class="string">"输入值必须是数字！"</span>;</span><br><span class="line">                                                &#125; </span><br><span class="line">                                                &#125;);</span><br><span class="line">                                               &#125;);</span><br><span class="line">                                $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//配置点击动作</span></span><br><span class="line">                                <span class="keyword">var</span> word=<span class="built_in">document</span>.getElementById(<span class="string">'number'</span>).value <span class="comment">//获取输入框的值</span></span><br><span class="line">                                        $.ajax(&#123;</span><br><span class="line">                                        type:<span class="string">"POST"</span>,</span><br><span class="line">                                        url:<span class="string">"&#123;% url "</span>get_passwd<span class="string">" %&#125;"</span>,              </span><br><span class="line">                                        data:&#123;<span class="attr">number</span>:word&#125;,         <span class="comment">//传递参数！！！！ </span></span><br><span class="line">                                        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;$(<span class="string">"#ask"</span>).html(result);&#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure></p><p>整改之后的效果如下：<br><img src="/images/django30.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/" target="_blank" rel="noopener">http://www.blog.pythonlibrary.org/2017/02/16/pythons-new-secrets-module/</a><br><a href="https://www.cnblogs.com/yyds/p/7072492.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyds/p/7072492.html</a><br><a href="http://qindongliang.iteye.com/blog/2147336" target="_blank" rel="noopener">http://qindongliang.iteye.com/blog/2147336</a><br><a href="https://segmentfault.com/q/1010000002760528" target="_blank" rel="noopener">https://segmentfault.com/q/1010000002760528</a></p>]]></content>
    
    <summary type="html">
    
      开启随时检查，制作一个更加友好的密码生成器页面
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之六</title>
    <link href="http://yoursite.com/2018/12/03/%E9%A1%B5%E9%9D%A2%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%BE%97%E5%88%B0AES%E5%8A%A0%E5%AF%86%E5%80%BC/"/>
    <id>http://yoursite.com/2018/12/03/页面局部刷新得到AES加密值/</id>
    <published>2018-12-03T02:08:14.000Z</published>
    <updated>2018-12-04T06:21:17.937Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/11/29/Django%E4%B8%8EJquery%E3%80%81Ajax%E7%9A%84%E8%81%94%E5%90%88%E8%BF%90%E7%94%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/11/29/Django%E4%B8%8EJquery%E3%80%81Ajax%E7%9A%84%E8%81%94%E5%90%88%E8%BF%90%E7%94%A8/</a></p><h2><span id="需求说明以及实现思路">需求说明以及实现思路</span></h2><p>原来通过前端输入值到后台脚本执行结果再反回页面是这样的：<br><img src="/images/django24.gif" alt="akb48"></p><p>现在接触了<code>jQuery+ajax</code>，那么就可以使用<code>局部刷新</code>来让界面变的更加友好。</p><p>我们在页面里配置了<code>ajax</code>，也要在<code>views.py</code>里配置<code>request.POST.get</code>，但是要注意，执行顺序是先执行<code>ajax</code>后执行<code>request.POST.get</code>，也就是说<code>request.POST.get</code>得到的是<code>ajax</code>加工过的值。如果是json字符串，就加一个<code>dataType:&#39;json&#39;</code>说明一下。</p><p>如果是一般的form表单形式，那么ajax的data部分可以这么写：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: &#123;</span><br><span class="line">        limit: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    type: 'post',</span><br><span class="line">    dataType: 'json'</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>如果是直接发送一个json字符串到服务器，那么就要这么写：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: JSON.stringify(&#123;</span><br><span class="line">        limit: 10</span><br><span class="line">    &#125;),</span><br><span class="line">    type: 'post',</span><br><span class="line">    dataType: 'json',</span><br><span class="line">    contentType: 'text/plain'</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>更多的使用方法可以去<a href="https://www.haorooms.com/post/jquery_ajax_wg" target="_blank" rel="noopener">https://www.haorooms.com/post/jquery_ajax_wg</a> 观摩一番。</p><h2><span id="具体代码">具体代码</span></h2><p>前端文件<code>encrypt.html</code>内容如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        AES加密</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>AES加密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>//将原来的form都取消了</span><br><span class="line">                要加密的字段：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'word'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>查询加密结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ask"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这里是结果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//设定id=ask，那么下面也要说明ask的div是要被局部刷新的</span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> keyword=<span class="built_in">document</span>.getElementById(<span class="string">'word'</span>).value <span class="comment">//获取输入框的值，即name</span></span></span><br><span class="line"><span class="javascript">                                        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                                        type:<span class="string">"POST"</span>,<span class="comment">//指定方法是POST，如果不说明就是GET</span></span></span><br><span class="line"><span class="javascript">                                        url:<span class="string">"&#123;% url "</span>get_encrypt<span class="string">" %&#125;"</span>,   <span class="comment">//目标url就是get_encrypt函数结果          </span></span></span><br><span class="line"><span class="javascript">                                        data:&#123;<span class="attr">word</span>:keyword&#125;,         <span class="comment">//规定name等于上面那个id，然后传递参数给django的views.py </span></span></span><br><span class="line"><span class="javascript">                                        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;$(<span class="string">"#ask"</span>).html(result);&#125;<span class="comment">//返回get_encrypt函数结果</span></span></span><br><span class="line"><span class="undefined">                                        &#125;);</span></span><br><span class="line"><span class="undefined">                                &#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>对应的部分如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(r<span class="string">'encrypt/'</span>,views.encrypt,name=<span class="string">'encrypt'</span>),</span><br><span class="line">path(r'get_encrypt/',views.get_encrypt,name='get_encrypt'),#这个是展示结果对应的函数</span><br></pre></td></tr></table></figure></p><p><code>views.py</code>对应的部分如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">默认部分略</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">'encrypt.html'</span>)<span class="comment">#请求encrypt就是展示encrypt.html页面</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt#POST不检查csrf，正式环境不要这么用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_encrypt</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        word = request.POST.get(<span class="string">'word'</span>)<span class="comment">#获取到name值，这个name是ajax加工过的</span></span><br><span class="line">        result = (<span class="string">"加密的结果是："</span>+list(subprocess.getstatusoutput(<span class="string">"java -jar /yunwei/AES/aesEncrpt.jar "</span>+ word))[<span class="number">1</span>].split(<span class="string">"="</span>)[<span class="number">1</span>])<span class="comment">#这里执行java的命令得到结果</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>启动django之后，打开对应的页面，效果如下：<br><img src="/images/django26.gif" alt="akb48"></p><p>而<code>Request Headers</code>部分如下：<br><img src="/images/django27.png" alt="akb48"></p><h2><span id="input标签id与name的区别">input标签id与name的区别</span></h2><p>最简单的说明：id就像是一个人的身份证号码，而name就像是他的名字，id显然是唯一的，而name是可以重复的，checkbox和radio都可以用name。id要符合标识的要求，比如大小写敏感，最好不要包含下划线（因为不兼容CSS）。而name基本上没有什么要求，甚至可以用数字。</p><p>如果在<code>reset</code>便签里这么写的话，重置功能将不会生效，因为<code>id=&quot;reset&quot; name=&quot;reset&quot;</code>，所以请极力避免用reset作为关键词。<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"reset"</span> id=<span class="string">"reset"</span> name=<span class="string">"reset"</span> value=<span class="string">"Reset"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>更多的区别可以看<a href="https://stackoverflow.com/questions/7470268/html-input-name-vs-id" target="_blank" rel="noopener">https://stackoverflow.com/questions/7470268/html-input-name-vs-id</a> 。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/mingliangniwo/article/details/45533201" target="_blank" rel="noopener">https://blog.csdn.net/mingliangniwo/article/details/45533201</a><br><a href="https://thief.one/2017/09/14/3/" target="_blank" rel="noopener">https://thief.one/2017/09/14/3/</a><br><a href="https://www.haorooms.com/post/jquery_ajax_wg" target="_blank" rel="noopener">https://www.haorooms.com/post/jquery_ajax_wg</a><br><a href="http://www.cnblogs.com/birdshome/archive/2005/01/31/99562.html" target="_blank" rel="noopener">http://www.cnblogs.com/birdshome/archive/2005/01/31/99562.html</a></p>]]></content>
    
    <summary type="html">
    
      实现页面的局部刷新
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之五</title>
    <link href="http://yoursite.com/2018/11/29/Django%E4%B8%8EJquery%E3%80%81Ajax%E7%9A%84%E8%81%94%E5%90%88%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/29/Django与Jquery、Ajax的联合运用/</id>
    <published>2018-11-29T10:50:39.000Z</published>
    <updated>2018-12-04T06:22:13.210Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/11/24/Django%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%8F%8D%E9%A6%88%E5%88%B0%E5%89%8D%E7%AB%AF%E8%BE%93%E5%87%BA/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/11/24/Django%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%8F%8D%E9%A6%88%E5%88%B0%E5%89%8D%E7%AB%AF%E8%BE%93%E5%87%BA/</a></p><h2><span id="需求说明以及实现思路">需求说明以及实现思路</span></h2><p>之前Django已经实现了点击按钮把值传入到后台脚本，同时把结果反馈到页面的效果了。但是那个逻辑太挫了:得把前端的变量存到本地去，然后后台的python脚本要去读取本地文件取的变量值执行任务。如果想用更加优雅的方法实现我们的目的那就要用<code>jQuery+Ajax</code>技术—-把目标反馈值包装成function调用，修改内置参数的方法，更容易上手，适合新手入门。</p><p>jQuery和Ajax的定义这里就不多说了，说直白点它们的作用就是不用离开当前的页面，而是在当前的页面加载出我们想要的结果，这就叫做<code>异步刷新</code>，这种刷新方法比较友好，而且可以少写一些html。</p><p>本次试验的目的就是在<code>test111.html</code>里随机输入内容，然后把数字“666”在当前页展示。效果如图：<br><img src="/images/django25.gif" alt="akb48"></p><p>这里我先使用<code>POST</code>方法，因为它无论是安全还是输入字符长度都要比<code>GET</code>方法优秀。但是要注意！如果代码中没有指明方法，那么默认就是<code>GET</code>方法。</p><h2><span id="具体代码">具体代码</span></h2><p>前端页面<code>test111.html</code>的内容如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>TEST PAGE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 这里引用jquery.min.js</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//元素加载完成之后，绑定事件</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#AJAX_post"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//这里的AJAX_post与按钮的id一致，并且配置了点击click动作</span></span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> someth =  $(<span class="string">"#someth"</span>).val();<span class="comment">// 获取输入框的值</span></span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> data = &#123;<span class="string">"someth"</span>: someth&#125;;<span class="comment">// 打包成get请求发送的数据</span></span></span><br><span class="line"><span class="javascript">alert_text = <span class="string">'666即将出现！'</span>;</span></span><br><span class="line"><span class="undefined">                                alert(alert_text);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                                $.post(<span class="comment">// post 方法请求服务器</span></span></span><br><span class="line"><span class="javascript">                                        <span class="string">'&#123;% url '</span>test111<span class="string">' %&#125;'</span>,<span class="comment">// 请求的url</span></span></span><br><span class="line"><span class="javascript">                                data,<span class="comment">// 这个data就是上面打包的数据</span></span></span><br><span class="line"><span class="javascript">                                <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 回调函数，其中ret是返回的JSON </span></span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">var</span> someth = ret[<span class="string">'someth'</span>];</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">var</span> num = ret[<span class="string">'num'</span>];</span></span><br><span class="line"><span class="javascript">                                        <span class="comment">// 这里把得到的两个值ret成查询结果</span></span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">"#result"</span>).text(num);</span></span><br><span class="line"><span class="javascript"><span class="comment">// result就是输出到网页上的值，格式是text，如果是text(someth)，那么就会出现的是你随机输入的那段字符</span></span></span><br><span class="line"><span class="undefined">                                &#125;)</span></span><br><span class="line"><span class="undefined">                        &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>请随便输入：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"someth"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里出现666：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"AJAX_post"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>ajax post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>ajax那部分虽然有注释，但是还是要多说一点：</p><ol><li><code>$(document).ready(function(){}</code>:等待{}中涉及到的元素全部加载完，就按照function具体内容给它们绑定特殊事件;</li><li><code>$(&quot;button&quot;).click(function(){}</code>:<code>$(&quot;AJAX_post&quot;)</code>是Jquery的选择器，表示页面的“按钮”，<code>.click(function(){}</code>为前面选中的元素，绑定一个鼠标点击的事件，具体事件是function()里面；</li><li><code>$.post</code>：表示调用了post方法，里面有三个元素，用逗号隔开，分别是<code>URL</code>,<code>data（可省略）</code>和<code>callback（可省略</code>，其中URL可以就是要局部刷新后展示的那个页面；</li><li>如果想把变量以字符串的形式输入，那么就是<code>var id=document.getElementById(&#39;name&#39;).value</code>，如果单独使用<code>request.GET.get</code>，得到的数据类型是<code>&#39;NoneType&#39;</code>;</li></ol><p>而对应的<code>views.py</code>那部分函数的内容如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line"></span><br><span class="line">@csrf_exempt#取消CSRF保护，线上环境请不要这样</span><br><span class="line">def test(request):</span><br><span class="line">    if request.method == 'POST':</span><br><span class="line">        someth = request.POST.get('someth')#从前端获取name值</span><br><span class="line">        num = "666"#已经定义好了666，然后会被ret得到</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        data['someth'] = someth</span><br><span class="line">        data['num'] = num</span><br><span class="line">        print (data)</span><br><span class="line">        return JsonResponse(data)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,'test111.html')</span><br></pre></td></tr></table></figure></p><p>对应的<code>urls.py</code>内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(r<span class="string">'test111'</span>,views.test,name=<span class="string">'test111'</span>),</span><br></pre></td></tr></table></figure></p><p>保存之后，启动django，在<code>test111.html</code>页面即可达到效果。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.runoob.com/jquery/jquery-ajax-get-post.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ajax-get-post.html</a><br><a href="https://zhuanlan.zhihu.com/p/27665172" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27665172</a><br><a href="https://my.oschina.net/esdn/blog/814094" target="_blank" rel="noopener">https://my.oschina.net/esdn/blog/814094</a><br><a href="https://www.jianshu.com/p/26cd9f442a13" target="_blank" rel="noopener">https://www.jianshu.com/p/26cd9f442a13</a><br><a href="https://segmentfault.com/a/1190000009938183" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009938183</a> （rel=noopener的问题）<br><img src="/images/Doncic.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      把jQuery和Ajax引入到Django里
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>服务器被入侵了</title>
    <link href="http://yoursite.com/2018/11/27/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E5%85%A5%E4%BE%B5%E4%BA%86/"/>
    <id>http://yoursite.com/2018/11/27/服务器被入侵了/</id>
    <published>2018-11-27T03:20:04.000Z</published>
    <updated>2018-12-12T12:13:15.373Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="情况描述">情况描述</span></h2><p>今天上班，甲方爸爸在微信里叫“设备直播无法播放”，登录到zabbix发现，播放模块的服务器的<code>zabbix-agent</code>已经脱落，而且这个服务器可以ping通但是不能ssh通。</p><p>让机房的人去重启了一下服务器，登录之后发现里面有一个很奇怪的进程<code>watchbog</code>：<br><img src="/images/pastebin2.png" alt="办公室"></p><p>这个进程不应该出现的，同时查看<code>crontab -l</code>的内容也已经变了：<br><img src="/images/pastebin1.png" alt="办公室"></p><p>我登录了一下<code>https://pastebin.com</code>，发现这个是一个提供类似便签记事的网站，黑客应该就是现在这个网站里输入了远程的脚本，然后让这台肉鸡去curl这个网站的网页达到下载脚本然后启动了watchbog进程的目的。</p><p>于是我就<code>find / -name \* -type f -print | xargs grep &quot;pastebin&quot;</code>，看一下系统里都有哪些文件里含有<code>pastebin</code>这个关键词。于是乎先发现<code>/usr/bin</code>里有几个不应该存在的命令：<br><img src="/images/pastebin3.png" alt="办公室"></p><p>然后顺藤的发现几乎所有的crontab文件都已经被污染了：<br><img src="/images/pastebin4.png" alt="办公室"></p><p>把以上所有被污染的文件全部删光内容，将watchbog进程彻底杀死。观察了一会，貌似没有复现问题。</p><h2><span id="后续解决方案">后续解决方案</span></h2><ol><li>在zabbix监控上添加对watchbog进程的监控，如果出现直接通知负责人；</li><li>将ssh的22端口更改成33664端口，规定只有堡垒机可以登录；</li><li>与开发商议，确认此服务器的外网权限可以撤掉，于是撤掉外网IP；</li></ol><p>PS. <a href="http://www.4usky.com/" target="_blank" rel="noopener">http://www.4usky.com/</a> <a href="https://www.shutterstock.com/zh/" target="_blank" rel="noopener">https://www.shutterstock.com/zh/</a>  这俩是很不错的壁纸网站~</p>]]></content>
    
    <summary type="html">
    
      其实最简单的方法还是彻底格式化重装完事
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="centos 6.5" scheme="http://yoursite.com/tags/centos-6-5/"/>
    
      <category term="后门软件" scheme="http://yoursite.com/tags/%E5%90%8E%E9%97%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之四</title>
    <link href="http://yoursite.com/2018/11/24/Django%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%8F%8D%E9%A6%88%E5%88%B0%E5%89%8D%E7%AB%AF%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2018/11/24/Django后台执行脚本反馈到前端输出/</id>
    <published>2018-11-24T02:16:58.000Z</published>
    <updated>2018-11-29T13:41:53.356Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/</a></p><h2><span id="需求说明">需求说明</span></h2><p>之前我们已经达到了“页面判断输入值是否合法”，“页面输入值录入数据库”这两个目的，现在就到了重头戏–网页上点击按钮，然后调用后台python脚本，并且把脚本的结果反馈到网页端。</p><p>我们本次使用一个加密的python脚本<code>encrypt.py</code>，它主要得作用是输入某个字段，然后进行AES256加密，然后把加密结果返回给界面，整个脚本内容如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">AESWord = input(<span class="string">"输入字段："</span>)</span><br><span class="line">result = list(subprocess.getstatusoutput(<span class="string">"java -jar /yunwei/AES/aesEncrpt.jar "</span>+AESWord))[<span class="number">1</span>].split(<span class="string">"="</span>)[<span class="number">1</span>]</span><br><span class="line">print (AESWord+ <span class="string">"的加密结果是："</span>+(result))</span><br></pre></td></tr></table></figure></p><p>脚本执行效果如下：<br><img src="/images/django23.png" alt="akb48"></p><h2><span id="笨方法解决">笨方法解决</span></h2><p>前端的页面内容如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;#这部分是引入base.html这个模板</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">        AES加密</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">                &lt;form action=&quot;/k8s/encrypt/&quot; method=&quot;post&quot; name=&apos;encrypt&apos;&gt;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                要加密的字段：&lt;input type=&quot;text&quot; name=&quot;AESWord&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                &lt;input type=&quot;reset&quot; value=&quot;清除所有&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;submit&quot; value=&quot;查询解析&quot; /&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>目前已知<code>views.py</code>里使用<code>request.POST.get()</code>方法是可以捕获到前端输入值，但是这个输入值怎么传递给<code>encrypt.py</code>呢？这一点非常的复杂。</p><p>可能这个时候很多人会想使用“外部脚本引入django系统”的方法，但是那个方法可以引用到数据库，但是无法引用<code>views.py</code>里的函数的变量。于是只能用一个笨招：<strong>先把前端输入值记录到本地某个文件里，然后<code>encrypt.py</code>去读取这个文件，这样达到获取变量的方法。</strong></p><p>于是<code>views.py</code>里的相关部分就是这样：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">前面略</span><br><span class="line">def encrypt(request):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        AESWord = request.POST.get(<span class="string">'AESWord'</span>)</span><br><span class="line">        with open('/yunwei/AES/AESWord.txt','w') as f:#把前端获取到的值记录到本地的AESWord.txt文件里</span><br><span class="line">            f.write(AESWord+<span class="string">"\n"</span>)</span><br><span class="line">        child = subprocess.Popen(<span class="string">'python /yunwei/AES/Encrypt.py'</span>,stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True)</span><br><span class="line">        stdout, stderr = child.communicate()</span><br><span class="line">        result = str(stdout,encoding='utf-8')#将脚本反馈的结果输入result</span><br><span class="line">        return HttpResponse(result)#页面展示result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'encrypt.html'</span>)</span><br></pre></td></tr></table></figure></p><p>而<code>encrypt.py</code>内容改成如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">import linecache,subprocess</span><br><span class="line">AESWord = linecache.getline(&apos;/yunwei/AES/AESWord.txt&apos;,1).strip(&apos;\n&apos;)#在这里读取前端的变量</span><br><span class="line">result = list(subprocess.getstatusoutput(&quot;java -jar /yunwei/AES/aesEncrpt.jar &quot;+AESWord))[1].split(&quot;=&quot;)[1]</span><br><span class="line">print (AESWord+ &quot;的加密结果是：&quot;+(result))</span><br></pre></td></tr></table></figure></p><p>执行效果如下：<br><img src="/images/django24.gif" alt="akb48"></p><p>这样的操作达到了目的！后期就是把<code>result</code>使用<code>render</code>加工映射到某个网页，页面就好看很多了。</p><h2><span id="jsajax方法解决">js+ajax方法解决</span></h2><p>上面的方法虽然可以达到我们想要的目的，但是其实是十分不推荐的：一是因为网页调用本地程序的权限正在被取消，二是因为真不如JS写直接，三是只能在自己本地调用。</p><p>所以还是用前端来解决更专业更优雅，那么就要使用js+ajax。</p><p>具体内容下次补充…</p><h2><span id="补充">补充</span></h2><p>在外部脚本引入django系统的方法就是在外部脚本的开头加上下面的内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">#coding=utf-8</span><br><span class="line"><span class="keyword">import</span> os,sys,django</span><br><span class="line">sys.path.append('/django/Kubernetes/') # 将项目路径添加到系统搜寻路径当中</span><br><span class="line">os.environ['DJANGO_SETTINGS_MODULE'] = 'Kubernetes.settings' # 设置项目的配置文件</span><br><span class="line"></span><br><span class="line">django.setup()</span><br><span class="line">from createyaml.models import parameter#这样就可以引入models.py文件里的parameter这个类</span><br></pre></td></tr></table></figure></p><p>但是上面说过，这个方法可以引入数据库<code>models.py</code>文件，并不能引入<code>views.py</code>文件。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/15151133/execute-a-python-script-on-button-click" target="_blank" rel="noopener">https://stackoverflow.com/questions/15151133/execute-a-python-script-on-button-click</a><br><a href="https://blog.csdn.net/yzy_1996/article/details/80223053" target="_blank" rel="noopener">https://blog.csdn.net/yzy_1996/article/details/80223053</a><br><a href="https://simpleisbetterthancomplex.com/tutorial/2016/08/29/how-to-work-with-ajax-request-with-django.html" target="_blank" rel="noopener">https://simpleisbetterthancomplex.com/tutorial/2016/08/29/how-to-work-with-ajax-request-with-django.html</a><br><a href="https://www.candypapi.com/2017/11/02/Python-external-script-calls-the-Django-project-model-table/" target="_blank" rel="noopener">https://www.candypapi.com/2017/11/02/Python-external-script-calls-the-Django-project-model-table/</a><br><a href="https://segmentfault.com/q/1010000005096919" target="_blank" rel="noopener">https://segmentfault.com/q/1010000005096919</a></p>]]></content>
    
    <summary type="html">
    
      Django后台执行脚本反馈到前端输出
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git clone的几个错误</title>
    <link href="http://yoursite.com/2018/11/12/Git-clone%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%95%85%E9%9A%9C/"/>
    <id>http://yoursite.com/2018/11/12/Git-clone的几个小故障/</id>
    <published>2018-11-12T04:12:20.000Z</published>
    <updated>2018-11-12T08:27:05.563Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Git clone的时候可能会出现<code>fatal: HTTP request failed</code>的错误，如图：<br><img src="/images/ksyunsdk.png" alt="akb48"></p><p>一般来说这样的情况多半就是git版本太低，&lt;=1.7的版本经常出现这样的错误，解决问题的办法就是使用最新的git，安装git 1.9的方法在这里：<a href="https://rorschachchan.github.io/2018/06/13/Centos6%E5%AE%89%E8%A3%85git1-9%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/06/13/Centos6%E5%AE%89%E8%A3%85git1-9%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</a> 。</p><p>更新到1.9之后重新去git clone，这一次换成了<code>SSL connect error</code>错误：<br><img src="/images/ksyunsdk2.png" alt="akb48"></p><p>此时就需要执行一下<code>yum update -y nss curl libcurl</code>，这样才能顺利的git clone。</p><p>如果出现了<code>easy_install command not found</code>，可以使用<code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python</code> 解决，有了easy_install就可以安装pip了。</p><p>以上的操作是在python2.7下进行的。</p>]]></content>
    
    <summary type="html">
    
      金山云的api真心看的人有种精神分裂的感觉
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="Python 2.7" scheme="http://yoursite.com/tags/Python-2-7/"/>
    
  </entry>
  
  <entry>
    <title>通过调整Css让界面美观一点</title>
    <link href="http://yoursite.com/2018/11/05/%E9%80%9A%E8%BF%87%E8%B0%83%E6%95%B4Css%E8%AE%A9%E7%95%8C%E9%9D%A2%E7%BE%8E%E8%A7%82%E4%B8%80%E7%82%B9/"/>
    <id>http://yoursite.com/2018/11/05/通过调整Css让界面美观一点/</id>
    <published>2018-11-05T06:07:43.000Z</published>
    <updated>2018-11-05T08:23:44.725Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>数据可视化肯定需要前端知识，同时也要美化前端，让用户的体验更好，这时候就需要接触到css技术。</p><p>css简单来说就是先给你需要修饰的部分设定变量，然后针对不同的变量做不同的声明，达到修改界面的目的。css规则由两个主要的部分构成：选择器，以及一条或多条声明，格式是：<code>selector {declaration1; declaration2; ... declarationN }</code>。</p><p>在html文本里添加一个style标签，比如：<code>&lt;style type=&quot;test/css&quot;&gt; &lt;/style&gt;</code>。这个标签可以放到<code>&lt;body&gt;</code>最尾处也可以放到<code>&lt;head&gt;</code>最尾处。不过一般来说都是放到<code>&lt;body&gt;</code>里。</p><p>在调整css的时候，可以搭配chrome的F12键直接修改，然后将修改的内容拷贝粘贴到html文件里。</p><p>比如我现在的页面是如下这个样子的：<br><img src="/images/css3.png" alt="akb48"></p><p>这个结构可以看出使用最直白的html语言编写，为了美观大方，我们需要把它改成如下的样子：<br><img src="/images/css4.png" alt="akb48"></p><p>原来的代码如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">                &lt;a href=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span><br><span class="line">                        &lt;h2&gt;Homepage&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>a&gt;</span><br><span class="line">                &lt;a href=<span class="string">"&#123;% url 'blog_list' %&#125;"</span>&gt;List&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                &lt;a href="http:/</span><span class="regexp">/www.baidu.com"&gt;跳往百度&lt;/</span>a&gt;</span><br><span class="line">                &lt;a href=<span class="string">"http://www.lechange.com"</span>&gt;跳往乐橙&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &#123;% block content %&#125; &#123;% endblock %&#125;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>更改后的代码如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div  <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav"</span>&gt;</span><br><span class="line">&lt;!-- 给这个div标签添加一个<span class="class"><span class="keyword">class</span>叫<span class="title">nav</span> --&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">a</span> <span class="title">class</span></span>=<span class="string">"logo"</span> href=<span class="string">"&#123;% url 'home' %&#125;"</span>&gt;</span><br><span class="line">&lt;!-- 给这个div下的这个a标签添加一个<span class="class"><span class="keyword">class</span>叫<span class="title">logo</span> --&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">h2</span>&gt;<span class="title">Homepage</span>&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">a</span> <span class="title">href</span></span>=<span class="string">"&#123;% url 'blog_list' %&#125;"</span>&gt;List&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                &lt;a href="http:/</span><span class="regexp">/www.baidu.com"&gt;跳往百度&lt;/</span>a&gt;</span><br><span class="line">                &lt;a href=<span class="string">"http://www.lechange.com"</span>&gt;跳往乐橙&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &#123;% block content %&#125; &#123;% endblock %&#125;</span><br><span class="line">        &lt;style type=<span class="string">'text/css'</span>&gt;</span><br><span class="line">body&#123;</span><br><span class="line">                       margin: <span class="number">0</span>;</span><br><span class="line">                       padding: <span class="number">0</span>;</span><br><span class="line">&lt;!-- 这是对整个body标签进行声明，外边距和内边距都是<span class="number">0</span> --&gt;</span><br><span class="line">                &#125;</span><br><span class="line">                div.nav&#123;</span><br><span class="line">                       background-color: #eee;</span><br><span class="line">border-bottom: <span class="number">2</span>px solid blue;</span><br><span class="line">padding: <span class="number">5</span>px <span class="number">10</span>px;</span><br><span class="line">&lt;!-- 这是对整个nav的div标签进行声明：颜色灰色 --&gt;</span><br><span class="line">&lt;!-- 增加一条底线取代&lt;hr&gt;，设定宽是<span class="number">2</span>px，实线，颜色是蓝色 --&gt;</span><br><span class="line">&lt;!-- 设定上下边距<span class="number">5</span>px,左右边距<span class="number">10</span>px --&gt;</span><br><span class="line">               &#125;</span><br><span class="line">div.nav a&#123;</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: #000;</span><br><span class="line">&lt;!-- 这是对整个nav的div标签里的所有a标签说明：取消下划线，并且规定为黑色 --&gt;</span><br><span class="line">&#125;</span><br><span class="line">                div.nav a.logo &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">color: green;</span><br><span class="line">font-size:<span class="number">120</span>%;</span><br><span class="line">&lt;!-- 在这里对nav的div标签里那个叫logo的a标签进行单独的说明：缩进，并且规定为绿色 --&gt;</span><br><span class="line">&lt;!-- 字体大小是原来的<span class="number">120</span>% --&gt;</span><br><span class="line">                &#125;</span><br><span class="line">        &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>调整css是一个很繁琐很麻烦的事情，需要耐心。至于如何整合css样式到一个文件然后统一配置的内容，请去看：<a href="https://rorschachchan.github.io/2018/05/12/%E5%8A%A0%E8%BD%BDcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/05/12/%E5%8A%A0%E8%BD%BDcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%B9%E6%B3%95/</a> 。</p>]]></content>
    
    <summary type="html">
    
      从这里，开始往bootstrap发展
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用模板嵌套来精简html代码</title>
    <link href="http://yoursite.com/2018/11/02/%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%A0%87%E7%AD%BE%E6%9D%A5%E7%B2%BE%E7%AE%80html%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/11/02/使用模板标签来精简html代码/</id>
    <published>2018-11-02T02:41:19.000Z</published>
    <updated>2018-11-02T08:10:36.070Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在编写django的时候，前端html文件里经常会遇到很多有大量重复代码的情况出现，为了代码精简好看以及后期维护的方便，就需要把那些重复的代码统一放到一个文件里去，不重复的部分自然保留，文件到时直接调用重复模板就好，不同的部分对应填充。</p><p>举个例子，有一个代码是<code>templates/aaa.html</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&apos;UTF-8&apos;&gt;</span><br><span class="line">        &lt;title&gt;&#123;&#123; blog.title &#125;&#125;&lt;/title&gt;&lt;!-- blog.title就是文章标题，从数据库中提取，使用vender映射出来 --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">                &lt;a href=&quot;&#123;% url &apos;home&apos; %&#125;&quot;&gt;</span><br><span class="line">                        &lt;h2&gt;BACK TO HOMEPAGE&lt;/h2&gt;&lt;!-- 这部分是重复的 --&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; blog.title &#125;&#125;&lt;/h3&gt;&lt;!-- 这一部分也是同样用vender映射，展现每一篇文章对应的作者和内容 --&gt;</span><br><span class="line">        &lt;p&gt;作者：&#123;&#123; blog.author &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;分类：</span><br><span class="line">                &lt;a href=&quot;&#123;% url &apos;blogs_with_type&apos; blog.blog_type.pk %&#125;&quot;&gt;</span><br><span class="line">                        &#123;&#123; blog.blog_type &#125;&#125;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt; &#123;&#123; blog.blog_type.pk &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;发表时间：&#123;&#123; blog.created_time|date:&quot;Y-m-d H:i:s&quot;&#125;&#125;&lt;/p&gt;  &lt;!-- 这里规定了时间格式 --&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; blog.content &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>假设<code>aaa.html</code>里”BACK TO HOMEPAGE”这个部分是重复的，即每一个页面都有返回主页的点击。既然都有这个功能，那么就单独做一个<code>base.html</code>文件当框架，把重复的部分写进去：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&apos;UTF-8&apos;&gt;</span><br><span class="line">        &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;&lt;!--这里加入了一个block(块），块的名字叫title--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">                &lt;a href=&quot;&#123;% url &apos;home&apos; %&#125;&quot;&gt;</span><br><span class="line">                        &lt;h2&gt;BACK TO HOMEPAGE&lt;/h2&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &#123;% block content%&#125; &#123;% endblock %&#125;&lt;!--这里又加入了一个block，块的名字叫content--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>现在的<code>base.html</code>就是一个框架，里面有了两个block，这两个块有各自的名称，因为这两个块的内容是变化的。再把<code>aaa.html</code>里需要对应配置的部分定义成对应的变量，并且引入这个<code>base.html</code>即可。重新修理后的<code>aaa.html</code>就长这个样子了：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;&lt;!--首先引入同目录下的base.html--&gt;</span><br><span class="line"></span><br><span class="line">&#123;% block title%&#125;</span><br><span class="line">        &#123;&#123; blog.title &#125;&#125;&lt;!--这部分就是title块的内容--&gt;</span><br><span class="line">&#123;% endblock%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;  &lt;!--这一段就是content块的内容--&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; blog.title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;作者：&#123;&#123; blog.author &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;分类：</span><br><span class="line">                &lt;a href=&quot;&#123;% url &apos;blogs_with_type&apos; blog.blog_type.pk %&#125;&quot;&gt;</span><br><span class="line">                        &#123;&#123; blog.blog_type &#125;&#125;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt; &#123;&#123; blog.blog_type.pk &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;发表时间：&#123;&#123; blog.created_time|date:&quot;Y-m-d H:i:s&quot;&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; blog.content &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>将<code>aaa.html</code>保存之后，刷新对应的页面，会发现依旧可以成功读取而且界面没有任何的变化。</p><p>可是在实际操作中也会出现这样的需求：多个不同的django APP可能会要访问同一个模板文件（即base.html），那么就要每一个app都复制一遍base.html吗？其实大可不必。这里可以修改一下<code>setting.py</code>，在里面设置一下公共的模板文件路径。</p><p>首先我们现在project根目录下建立一个base文件夹，把<code>base.html</code>复制进去，然后修改一下<code>setting.py</code>如下的字段：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">   &#123;</span><br><span class="line">       &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class="line">       &apos;DIRS&apos;: [</span><br><span class="line">           os.path.join(BASE_DIR，&apos;base&apos;),#BASE_DIR是在文件最开始定义的，即project的根目录</span><br><span class="line">           ],</span><br><span class="line">       &apos;APP_DIRS&apos;: True,#这句话的意思是templates文件夹里所有的文件都可以访问</span><br><span class="line">       &apos;OPTIONS&apos;: &#123;</span><br><span class="line">           &apos;context_processors&apos;: [</span><br><span class="line">               &apos;django.template.context_processors.debug&apos;,</span><br><span class="line">               &apos;django.template.context_processors.request&apos;,</span><br><span class="line">               &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class="line">               &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class="line">           ],</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>保存之后，再次刷新界面，发现界面没变化。这里django在寻找页面的时候，就会去project的路径/base下先找对应的文件，如果没有，会再去自己应用下的templates文件夹里找。如果两个都没有，那就会报错<code>base.html is not exist</code>。</p>]]></content>
    
    <summary type="html">
    
      模板文件如果已经指定了样式，那么变量文件代码里就不要重复写样式了，这一点要注意。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置IP白名单</title>
    <link href="http://yoursite.com/2018/10/31/Nginx%E9%85%8D%E7%BD%AEIP%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    <id>http://yoursite.com/2018/10/31/Nginx配置IP白名单/</id>
    <published>2018-10-31T08:47:57.000Z</published>
    <updated>2018-11-01T12:02:21.646Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="环境交代">环境交代</span></h2><p>Nginx配置IP白名单是非常基础的工作，这次试验就是配置某网页可以正常被部分IP访问，而其他网页访问将是403。目标网页地址是<code>http://xxdtq.lechange.com/test/test.html</code>，内容如下：<br><img src="/images/nginxV3.png" alt="akb48"></p><p>本机的外网IP地址是<code>115.205.2.28</code>，如图：<br><img src="/images/nginxV4.png" alt="akb48"></p><p>首先先<code>nginx.conf</code>里的日志配置格式如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  access &apos;$http_x_forwarded_for - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                &apos;&quot;$http_user_agent&quot; $remote_addr $request_time $upstream_response_time $http_host&apos;;</span><br></pre></td></tr></table></figure></p><p>Nginx的转发文件<code>default.conf</code>如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name xxdtq.lechange.com;#如果浏览器输入的是xxdtq.lechange.com，那么就跳转到82端口</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:82;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name xhssf.lechange.com;#如果浏览器输入的是xhssf.lechange.com，那么就跳转到82端口</span><br><span class="line">       location / &#123;</span><br><span class="line">               proxy_pass http://localhost:83;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="配置步骤">配置步骤</span></h2><p>现在配置<code>xxdtq.conf</code>文件内容如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123; </span><br><span class="line">    listen       82 default;#82端口</span><br><span class="line">    server_name  xxdtq.lechange.com;</span><br><span class="line">    root  /mnt/xiuxiudetiequan/;#根目录是/mnet/xiuxiudetiequan/</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    add_header                  Set-Cookie &quot;HttpOnly&quot;;</span><br><span class="line">    add_header                  Set-Cookie &quot;Secure&quot;;</span><br><span class="line">    add_header          X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;</span><br><span class="line"></span><br><span class="line">location = /test/test.html &#123;#如果remote_addr是125.205.2.28来访问/test/test.html，那么就返回403</span><br><span class="line">       if ($remote_addr = 115.205.2.28) &#123;</span><br><span class="line">               return 403;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/xxdtq/access.log access;</span><br><span class="line">    error_log /var/log/nginx/xxdtq/error.log error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行了<code>nginx -s reload</code>后，刷新一下界面，却发现页面没变，并不是预期中的403，打开nginx的日志一看，发现获取到的<code>$remote_addr</code>是<code>127.0.0.1</code>！如下：<br><img src="/images/nginxV5.png" alt="akb48"></p><p>为什么是127.0.0.1？因为我们这个nginx做了一个80到82端口的转发呀，所以到80的地址是真实的外界IP，而80转发到82就是本机IP了。那这样的情况怎么办？就需要在<code>default.conf</code>里添加一句<code>proxy_set_header x-forwarded-for  $remote_addr;</code>，如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name xxdtq.lechange.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:82;</span><br><span class="line">                proxy_set_header x-forwarded-for  $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启一波nginx，发现<code>http_x_forwarded_for</code>正是远程访问的IP地址<code>115.205.2.28</code>，于是将xxdtq.conf判断IP改成如下内容：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location = /test/test.html &#123;</span><br><span class="line">    if ($http_x_forwarded_for = 115.205.2.28) &#123;#改用http_x_forwarded_for</span><br><span class="line">            return 403;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>重启nginx之后，果然页面是403，如图：<br><img src="/images/nginxV6.png" alt="akb48"></p><p>然后用其他的IP地址，比如用手机连接4G去打开<a href="http://xxdtq.lechange.com/test/test.html" target="_blank" rel="noopener">http://xxdtq.lechange.com/test/test.html</a> ，发现是正常读取的，试验成功！<br><img src="/images/nginxV7.png" alt="akb48"></p><p>如果是要整个/test/目录都不让访问的话，就要改成如下内容：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /test/ &#123;</span><br><span class="line">   if ($http_x_forwarded_for = 115.205.2.28) &#123;# =是精确匹配</span><br><span class="line">           return 403;</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>如果要配置多个IP地址，就要改成如下内容：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/shopadmin &#123;</span><br><span class="line">    if ($remote_addr ~* &quot;第一个IP|第二个IP|第三个IP&quot;) &#123;#这里改成~*</span><br><span class="line">    return  403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="elk里提取http_x_forwarded_for">elk里提取http_x_forwarded_for</span></h2><p>nginx日志中的<code>http_x_forwarded_for</code>字段会有多个IP。使用自定义的模板<code>，grok</code>常用表达式的IPORHOST匹配<code>http_x_forwarded_for</code>该字段，获取的IP值是最后一个，如何取第一个IP值？</p><p>答案是：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">      split =&gt; [&quot;http_x_forwarded_for&quot;,&quot;,&quot;]</span><br><span class="line">      add_field =&gt; [&quot;real_remote_addr&quot;,&quot;%&#123;http_x_forwarded_for[0]&#125;&quot;]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>IPORHOST这些变量匹配不到所有IP，只能通过自定义正则来匹配到所有IP；再通过以上方法截取第一个IP值。正则表达式写法是：<code>[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\,\s]*</code></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a><br><a href="https://zhuanlan.zhihu.com/p/21354318" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21354318</a><br><a href="http://blog.pengqi.me/2013/04/20/remote-addr-and-x-forwarded-for/" target="_blank" rel="noopener">http://blog.pengqi.me/2013/04/20/remote-addr-and-x-forwarded-for/</a><br><a href="http://gong1208.iteye.com/blog/1559835" target="_blank" rel="noopener">http://gong1208.iteye.com/blog/1559835</a><br><a href="https://my.oschina.net/moooofly/blog/295853" target="_blank" rel="noopener">https://my.oschina.net/moooofly/blog/295853</a></p>]]></content>
    
    <summary type="html">
    
      浏览器插件很容易修改http header，给用户自己伪造自己的地域提供了便利，这时候就只能用remote address来判断了，remote_address是不可能伪造的
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>两个Zabbix_get问题记录</title>
    <link href="http://yoursite.com/2018/10/30/Zabbix-get%E5%8F%8D%E9%A6%88%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AFcontacting/"/>
    <id>http://yoursite.com/2018/10/30/Zabbix-get反馈的结果是contacting/</id>
    <published>2018-10-30T10:56:56.000Z</published>
    <updated>2018-11-20T09:11:21.229Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="zabbix_get的结果是contacting">Zabbix_get的结果是contacting</span></h2><p>在监控zookeeper的时候，我写了一个简单的脚本<code>checkZKrole.sh</code>来获取当前的角色，如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zookeeper1 ~]# cat checkZKrole.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">role=$(sh /usr/zookeeper/bin/zkServer.sh status| cut -d&quot; &quot; -f2)</span><br><span class="line">echo $role</span><br></pre></td></tr></table></figure></p><p>执行效果如下：<br><img src="/images/monitorzk.png" alt="akb48"></p><p>本地执行没问题，然后在<code>zabbix-agentd.conf</code>里也把这个脚本添加到自定义监控项里：<br><img src="/images/monitorzk2.png" alt="akb48"></p><p>重启了<code>zabbix-agent</code>后，发现一个很奇怪的现象，在zabbix-server里使用<code>zabbix-get</code>去拿值的时候拿到的是<code>contacting</code>，如图：<br><img src="/images/monitorzk3.png" alt="akb48"></p><p>从上图可见，同样在127.1.1.28里取值，<code>proc.num</code>没问题，而且是秒取，但是这个自定义项就取不到。</p><p>我怀疑是脚本的问题，于是我改成一个单纯的<code>echo</code>，如下:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zookeeper1 ~]# cat checkZKrole.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">role=$(sh /usr/zookeeper/bin/zkServer.sh status| cut -d&quot; &quot; -f2)</span><br><span class="line">#echo $role</span><br><span class="line">echo woshinibaba</span><br></pre></td></tr></table></figure></p><p>这一次的返回值是正常的，可见不是脚本的问题：<br><img src="/images/monitorzk4.png" alt="akb48"></p><p>那是他妈的什么问题，真是见了鬼了…后来想干脆写一个crontab，让crontab把角色写到本地，然后再用cut命令切开把结果当做zabbix_get的目标。但是在这里发现了问题所在，当我的crontab是<code>* * * * * cd /usr/zookeeper/bin/; ./zkServer.sh status &gt; /tmp/role.txt &gt; /dev/null 2&gt;&amp;1</code>，发现<code>/tmp/role.txt</code>里根本没有值，应该是crontab在执行有参数的命令的时候出现了问题。</p><p>后来发现了，原来是sudo搞得鬼，如果是由于zookeeper是root用户启动的，所以只有root用户能成功访问，如果是sudo的话，那么就会返回“Error contacting service. It is probably not running.”，所以截取出来的部分就是contacting，如图：<br><img src="/images/monitorzk8.png" alt="akb48"></p><h2><span id="zabbix_get执行脚本超时">zabbix_get执行脚本超时</span></h2><p>在监控mq队列时候，同样也需要到了自定义监控项，我写了几个简单的脚本如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@dahuatech zabbix]# cat monitor_mq.sh </span><br><span class="line">#!/bin/sh</span><br><span class="line">ip=$1</span><br><span class="line">queuename=$2</span><br><span class="line">type=$3</span><br><span class="line"></span><br><span class="line">case $&#123;type&#125; in</span><br><span class="line">Pending)</span><br><span class="line">curl -s -u &apos;admin:admin&apos;  &quot;http://$&#123;ip&#125;:8161/admin/queues.jsp&quot;|grep &quot;$&#123;queuename&#125;&lt;/a&gt;&lt;/td&gt;&quot; -A 5|sed -n &apos;2p&apos;|egrep -o &apos;[0-9]+&apos;</span><br><span class="line">;;</span><br><span class="line">Enqueued)</span><br><span class="line">curl -s -u &apos;admin:admin&apos;  &quot;http://$&#123;ip&#125;:8161/admin/queues.jsp&quot;|grep &quot;$&#123;queuename&#125;&lt;/a&gt;&lt;/td&gt;&quot; -A 5|sed -n &apos;4p&apos;|egrep -o &apos;[0-9]+&apos;</span><br><span class="line">;;</span><br><span class="line">Dequeued)</span><br><span class="line">curl -s -u &apos;admin:admin&apos;  &quot;http://$&#123;ip&#125;:8161/admin/queues.jsp&quot;|grep &quot;$&#123;queuename&#125;&lt;/a&gt;&lt;/td&gt;&quot; -A 5|sed -n &apos;5p&apos;|egrep -o &apos;[0-9]+&apos;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>配置了<code>UserParameter=activemq.check[*],sh /etc/zabbix/monitor_mq.sh $1 $2 $3</code>放到<code>zabbix-agentd.conf</code>里，重启了zabbix-agent。在zabbix-server配置了对应的item，如图：<br><img src="/images/monitorzk5.png" alt="akb48"></p><p>然后在本地执行这个脚本，发现回值秒取，但是同样在zabbix-get里使用，就是timeout：<br><img src="/images/monitorzk6.png" alt="akb48"></p><p>后来发现原来自己摆了一个乌龙，在zabbix-get的时候不能使用<code>{HOST.IP}</code>，因为<code>zabbix-get</code>不识别他，但是<code>zabbix-server</code>是识别的，所以在脚本里把<code>ip=$1</code>改成ip=真实的IP地址即可。<br><img src="/images/monitorzk7.png" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      金庸大师，一路走好。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Mysql主从同步的几个要点总结</title>
    <link href="http://yoursite.com/2018/10/23/Mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/23/Mysql主从同步的几个要点总结/</id>
    <published>2018-10-23T07:42:04.000Z</published>
    <updated>2018-10-24T01:31:27.944Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="同步原理">同步原理</span></h2><p>主从同步是Mysql非常常见的一个应用，也是非常重要的监控之处，这里简单总结在配置Mysql时候的几个要点，防止以后自己踩坑。</p><p>先说一下主从同步的原理，就是主数据库在数据库更新的时候会更新自己的<code>binlog</code>，同时也会向读数据库（一个或多个）传递这个<code>binlog</code>，此时从库开始一个<code>io_thread</code>这个线程用来接收这个<code>binlog</code>，然后把binlog写入到自己的<code>relaylog</code>，当<code>relaylog</code>发现有数据更新了，就开始一个<code>sql_thread</code>来按照主库更新自己的库，这样达到了“主库读库一致”的效果。图示如下：<br><img src="/images/mysql-sock2.png" alt="paradin"></p><p>上述过程：<br>主从延迟：「步骤2」开始，到「步骤7」执行结束。<br>步骤 2：存储引擎处理，时间极短<br>步骤 3：文件更新通知，磁盘读取延迟<br>步骤 4：Bin Log 文件更新的传输延迟，单线程<br>步骤 5：磁盘写入延迟<br>步骤 6：文件更新通知，磁盘读取延迟<br>步骤 7：SQL 执行时长</p><p>要监控主从同步是否出现异常，可以通过<code>show slave status\G</code>里的<code>Seconds_Behind_Master</code>字段来查看，如图：<br><img src="/images/mysql-sock3.png" alt="paradin"></p><p>但是要注意！<code>Seconds_Behind_Master</code>是有前提的，那就是主库跟读库之间的网络情况要良好，因为这个字段是从属服务器SQL线程和从属服务器I/O线程之间的时间差距，（即比较<code>binlog</code>和<code>relaylog</code>执行sql的timestamp时间差），单位是秒。如果主服务器和从属服务器之间的网络连接较快，则从属服务器I/O线程会非常接近主服务器，所以本字段能够十分近似地指示，从属服务器SQL线程比主服务器落后多少。如果网络较慢，则这种指示不准确；从属SQL线程经常会赶上读取速度较慢地从属服务器I/O线程，因此，<code>Seconds_Behind_Master</code>经常显示值为0。即使I/O线程落后于主服务器时，也是如此。换句话说，本列只对速度快的网络有用。</p><h2><span id="要点总结">要点总结</span></h2><ol><li>主库和读库的mysql版本保持一致，硬件情况也保持一致；</li><li><code>binlog</code>文件在生产系统中不易过大，建议小于500m，不然容易拖慢数据库性能；</li><li>设置slave前先检查一下设置的账号能不能远程登陆；</li><li>在设置多个库同步时，一个<code>binlog-do-db</code>参数对应一个库，不能一行写多个库；</li><li>如果出现了<code>Slave_IO_Running: No</code>这个状态，去主库上<code>show master status\G</code>，查看一下是否file跟从库的file是不是对不上；</li><li>代码里避免出现“查询读库后马上到主库操作”的字段，由于主从同步有延迟，这样很有可能会出现前端多次请求，而从库一致无法从主库得到最新的数据消息，所以sql被执行了好几次的错误，这样的情况可以考虑加入“可以用唯一索引限制”或者用<code>insert … select … where not exist</code>这种方式；</li><li>主库的慢sql太多的话，也会影响主从同步；</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://dba.stackexchange.com/questions/24793/mysql-replication-slave-is-continuously-lagging-behind-master" target="_blank" rel="noopener">https://dba.stackexchange.com/questions/24793/mysql-replication-slave-is-continuously-lagging-behind-master</a><br><a href="http://ningg.top/inside-mysql-master-slave-delay/" target="_blank" rel="noopener">http://ningg.top/inside-mysql-master-slave-delay/</a><br><a href="http://database.51cto.com/art/201108/287653.htm" target="_blank" rel="noopener">http://database.51cto.com/art/201108/287653.htm</a><br><a href="https://zhuanlan.zhihu.com/p/28554242" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28554242</a></p><p><img src="/images/roseisback.gif" alt="paradin" title="罗斯许久不见的大幅度变相接折叠上篮"></p>]]></content>
    
    <summary type="html">
    
      虽然100%的时间都是在用云厂商的服务，但是也要了解一下底层
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockbix监控进程</title>
    <link href="http://yoursite.com/2018/10/15/%E4%BD%BF%E7%94%A8dockbix%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/15/使用dockbix监控进程/</id>
    <published>2018-10-15T12:07:11.000Z</published>
    <updated>2018-10-15T16:23:43.254Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>之前在<a href="https://rorschachchan.github.io/2018/05/17/%E4%BD%BF%E7%94%A8zabbix%E5%8E%BB%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/05/17/%E4%BD%BF%E7%94%A8zabbix%E5%8E%BB%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8/</a> 介绍了如何使用dockbix去自动监控容器的cpu、mem和端口等值。而本文的内容就是讲述如何使用dockbix监控进程。</p><p>服务器情况如下：<br>172.31.0.77，普通模式安装zabbix-server；<br>172.16.0.194，服务器里有两个容器，一个是dockbix，另一个是具体的服务，里面是一个centos 7跑着nginx和php两个进程，如图：<br><img src="/images/dockbix1.png" alt="paradin"></p><p>如果你启动dockbix的语句是这样的话:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name=dockbix-agent-xxl \</span><br><span class="line">  --net=host \</span><br><span class="line">  --privileged \</span><br><span class="line">  -v /:<span class="regexp">/rootfs \</span></span><br><span class="line"><span class="regexp">  -v /</span><span class="keyword">var</span>/run:<span class="regexp">/var/</span>run \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  -e <span class="string">"ZA_Server=zabbix-server的IP地址"</span> \</span><br><span class="line">  -e <span class="string">"ZA_ServerActive=zabbix-server的IP地址"</span> \</span><br><span class="line">  -d monitoringartist/dockbix-agent-xxl-limited:latest</span><br></pre></td></tr></table></figure></p><p>那么发现监控进程是失败的，如图：<br><img src="/images/dockbix2.png" alt="paradin"></p><p>原因就是dockbix和具体服务之间是两个独立的进程，所以dockbix无法访问到另一个容器的进程情况，这样就要干掉原有的dockbix，并且更改一下dockbix的启动语句：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name=dockbix-agent-xxl \</span><br><span class="line">  --net=host \</span><br><span class="line">  --pid=host \#增加这句话</span><br><span class="line">  --privileged \</span><br><span class="line">  -v /:<span class="regexp">/rootfs \</span></span><br><span class="line"><span class="regexp">  -v /</span><span class="keyword">var</span>/run:<span class="regexp">/var/</span>run \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  -e <span class="string">"ZA_Server=172.31.0.77"</span> \</span><br><span class="line">  -e <span class="string">"ZA_ServerActive=172.31.0.77"</span> \</span><br><span class="line">  -d monitoringartist/dockbix-agent-xxl-limited:latest</span><br></pre></td></tr></table></figure></p><p>然后再去重新使用<code>zabbix-get</code>命令，就可以获取到进程了！<br><img src="/images/dockbix3.png" alt="paradin"></p><p>默认下，所有的容器都启用了PID命名空间。PID命名空间提供了进程的分离。PID命名空间删除系统进程视图，允许进程ID可重用，包括pid 1。<code>docker run</code>的时候添加了<code>--pid=host</code>就是允许容器内的进程可以查看主机的所有进程。</p><p>如果是不要看所有主机的进程，而只是看某一个容器的进程，其他进程pid不看怎么设置呢？<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-redis -d redis#假设你启动了一个名叫my-redis的容器</span><br><span class="line">docker run -it --pid=container:my-redis my_strace_docker_image bash#在建立一个my_strace_docker_imag容器，只与my-redis共享pid</span><br></pre></td></tr></table></figure></p><p>如果zabbix-server发现容器内的某个服务死了，要进入容器里重启服务怎么办？答曰：<code>docker exec 容器ID /bin/bash -c &quot;启动服务命令&quot;</code></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/monitoringartist/dockbix-agent-xxl/issues/42" target="_blank" rel="noopener">https://github.com/monitoringartist/dockbix-agent-xxl/issues/42</a><br><a href="https://www.zabbix.com/documentation/3.4/zh/manual/appendix/items/proc_mem_num_notes" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/zh/manual/appendix/items/proc_mem_num_notes</a><br><a href="https://docs.docker.com/engine/reference/run/#imagetag" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/run/#imagetag</a></p>]]></content>
    
    <summary type="html">
    
      这一下就不怕容器里面跑多个进程了！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Mysql.sock没了怎么办？</title>
    <link href="http://yoursite.com/2018/10/15/Mysql-sock%E6%B2%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/10/15/Mysql-sock没了怎么办？/</id>
    <published>2018-10-15T03:33:55.000Z</published>
    <updated>2018-10-15T09:52:36.756Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在调整jumpserver堡垒机资产用户的时候，在点击“更新”的时候，爆出127.0.0.1:3306无法被访问，于是登录到服务器里一看，发现mysql进程挂了。先检查服务器存储空间，发现还很富裕，于是就启动mysql，爆出来如下错误：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lcshop-jumpserver ~]# mysql</span><br><span class="line">ERROR <span class="number">2002</span> (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/<span class="keyword">var</span>/lib/mysql/mysql.sock<span class="string">' (111)</span></span><br></pre></td></tr></table></figure></p><p>然后来到<code>/var/lib/mysql/</code>里，瞅着这个紫了吧唧的<code>mysql.sock</code>，脑子一抽，把它删了…</p><p>删了…</p><p>这尼玛，再次启动mysql，错误码从111变成2：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lcshop-jumpserver mysql]# mysql</span><br><span class="line">ERROR <span class="number">2002</span> (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/<span class="keyword">var</span>/lib/mysql/mysql.sock<span class="string">' (2)</span></span><br></pre></td></tr></table></figure></p><p>这一下就尴尬了，<code>mysql.sock</code>没了怎么生成？有人说“重启服务器可以生成”，事实证明这就是纯粹的扯淡。真实的方法是：<code>mysqld_safe &amp;</code>。<br><img src="/images/mysql-sock.png" alt="akb48"></p><p>如果<code>mysqld_safe &amp;</code>命令失败了，就要去查看一下mysql的日志，多半是某个文件权限不对，要改成mysql用户。</p><p>补充一句其他的问题：<code>ImportError: libxslt.so.0: cannot open shared object file: No such file or directory</code>，遇到这个问题怎么办？ <code>yum install  libxslt-devel -y</code><br><img src="/images/shaq.gif" alt="akb48" title="鲨鱼哥的拉杆上篮"></p>]]></content>
    
    <summary type="html">
    
      不蒜子网站计数网站从dn-lbstatics.qbox.me/改成busuanzi.ibruce.info/
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="jumpserver堡垒机" scheme="http://yoursite.com/tags/jumpserver%E5%A0%A1%E5%9E%92%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署的几个tips</title>
    <link href="http://yoursite.com/2018/10/10/Docker%E9%83%A8%E7%BD%B2%E7%9A%84%E5%87%A0%E4%B8%AAtips/"/>
    <id>http://yoursite.com/2018/10/10/Docker部署的几个tips/</id>
    <published>2018-10-10T06:17:58.000Z</published>
    <updated>2018-10-12T08:58:29.741Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>公司的电商平台使用的是阿里云VPC网络，整个交换机和云服务器都是部署在D区。今天在部署测试环境的时候，发现无法购买服务器，在钉钉上与阿里云售后交涉后，接到噩耗—D区已经不再出售服务器了，如图：<br><img src="/images/docker14.png" alt="akb48"></p><p>没办法，只能把现有的服务器调高配置，在里面安装docker，尽可能的让各进程的环境彼此之间不受干扰。由于事发仓促，整个架构都要重新调整，镜像就先选用<code>centos：latest</code>，生成容器后在里面装环境以及<code>git  pull</code>代码，把容器当做虚拟机来用了。</p><h2><span id="几个小提示">几个小提示</span></h2><ol><li><p>如果要<code>pecl install swoole</code>的话，要先<code>yum install -y glibc-headers gcc-c++ kernel-headers gcc openssl pcre-devel</code>和<code>yum install -y openssl-devel</code>；</p></li><li><p><code>centos:latest</code>镜像目前是7.5版本，如果要查看的话需要先安装lsb命令：<code>yum install redhat-lsb -y</code>；</p></li><li><p>如果容器里使用yum下载爆’Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds’，用<code>yum -y install wget</code>解决；</p></li><li><p>容器需要php7.2的环境的话，就要用最新的源：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">rpm -Uvh https:<span class="comment">//mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></span><br></pre></td></tr></table></figure></li><li><p>别忘了开机自启动docker进程：<code>systemctl enable docker</code>；</p></li><li><p><code>yum install node npm</code>之前要</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">curl --silent --location https:<span class="comment">//rpm.nodesource.com/setup_8.x | bash -</span></span><br><span class="line">yum install -y nodejs#这样版本是8.12,npm的版本是6.4.1</span><br></pre></td></tr></table></figure></li><li><p>在容器里查看端口情况就要安装netstat命令：<code>yum install -y net-tools</code>；</p></li><li><p>将一个运行中的容器做成镜像的命令：<code>docker commit 容器ID号 镜像名称</code>；</p></li><li><p>进入容器最好不要用<code>docker attach 容器ID</code>的方式，而是用<code>docker exec -it 容器ID /bin/bash</code>，离开容器的时候也不要用<code>exit</code>或者<code>ctrl + D</code>，这样会将容器停止，而是用<code>ctrl + P</code>、<code>ctrl + Q</code> 或者<code>ctrl + Q + P</code>组合键退出，这样就不会终止容器运行；</p></li><li><p>容器默认的时间与宿主机的时间相差8个小时，可以在<code>docker run</code>的时候使用-v挂载的方法挂载宿主机的时间文件，比如：<code>docker run --name 容器名 -v /etc/localtime:/etc/localtime:ro ...</code>，或者在dockerfile里添加“设定时区”的语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置时区</span><br><span class="line">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">    &amp;&amp; echo <span class="string">'Asia/Shanghai'</span> &gt;<span class="regexp">/etc/</span>timezone \</span><br></pre></td></tr></table></figure></li><li><p>容器映射默认情况下是tcp6的，这是正常的现象，如果telnet不通，请先去检查容器内的服务是否正常，比如在容器里<code>curl 127.0.0.1 端口号</code>；</p></li><li><p>使用<code>docker top 容器id</code>命令能获取的PID是容器内进程在宿主机上的pid，ppid是容器内进程在宿主机上的父进程pid；</p></li><li><p>如果多个容器要挂载一样的数据就是用<code>-volumes-from</code>，比如<code>docker run --volume-from 容器ID号</code>； </p></li><li><p>在容器外启动容器内部进程的方法是：<code>docker exec 容器ID /bin/bash -c &quot;对应的命令&quot;</code>，在zabbix监控docker发现进程死了后，就可以用这个方法拉起来；<br><img src="/images/docker17.png" alt="akb48" title="在容器外面启动并且关闭apache"></p></li><li><p>接上一条的说，docker跟虚拟机不同，它启动的时候是不会运行<code>/etc/rc.d/rc.local</code>的，如果想要Docker在启动后就自动运行<code>/etc/rc.d/rc.local</code>，请看<a href="https://github.com/johnnian/Blog/issues/13" target="_blank" rel="noopener">https://github.com/johnnian/Blog/issues/13</a> 里面说的方法；</p></li><li><p>容器内的进程是会映射到宿主机上的，举个例子，比如容器里运行了swoole，如图：<br><img src="/images/docker15.png" alt="akb48"></p></li></ol><p>在宿主机上看也是能看到这个进程的：<br><img src="/images/docker16.png" alt="akb48" title="容器与宿主机时差相差8小时"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.sina.com.cn/s/blog_5ff8e0a00102wmti.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_5ff8e0a00102wmti.html</a><br><a href="https://outmanzzq.github.io/2018/01/11/docker-exit-without-stop/" target="_blank" rel="noopener">https://outmanzzq.github.io/2018/01/11/docker-exit-without-stop/</a><br><a href="http://dockone.io/article/128" target="_blank" rel="noopener">http://dockone.io/article/128</a><br><a href="https://blog.csdn.net/halcyonbaby/article/details/46884605" target="_blank" rel="noopener">https://blog.csdn.net/halcyonbaby/article/details/46884605</a><br><a href="https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec" target="_blank" rel="noopener">https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec</a><br><a href="https://www.binss.me/blog/learn-docker-with-me-about-volume/" target="_blank" rel="noopener">https://www.binss.me/blog/learn-docker-with-me-about-volume/</a></p>]]></content>
    
    <summary type="html">
    
      更加优雅的使用容器
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>容器报错：rpc error: code = 14 desc = grpc: the connection is unavailable</title>
    <link href="http://yoursite.com/2018/09/29/%E5%AE%B9%E5%99%A8%E6%8A%A5%E9%94%99%EF%BC%9Arpc-error-code-14-desc-grpc-the-connection-is-unavailable/"/>
    <id>http://yoursite.com/2018/09/29/容器报错：rpc-error-code-14-desc-grpc-the-connection-is-unavailable/</id>
    <published>2018-09-29T06:14:52.000Z</published>
    <updated>2018-10-11T09:06:42.385Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>开发同学反馈某一个开发环境的机器卡的要命，我登录一看，内存已经被耗的差不多，但是一看top又看不出来哪个进程占用了很多的内存，如图：<br><img src="/images/docker8.png" alt="akb48"></p><p>换<code>ps -e -o &#39;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#39; |  sort -nrk5</code>看也没看出来个之乎者也。</p><p>发现这个服务器里有两个容器，但是很奇怪，用docker stats却无法获得他们的基础值：<br><img src="/images/docker9.png" alt="akb48"></p><p>明明容器都是up状态啊，于是我就尝试链接到其中一台，发现报错：<code>rpc error: code = 14 desc = grpc: the connection is unavailable</code>，而且不能restart和kill,如图：<br><img src="/images/docker10.png" alt="akb48"></p><p>使用<code>docker-containerd -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --shim docker-containerd-shim --runtime docker-runc --debug</code>，发现里面是这样：<br><img src="/images/docker11.png" alt="akb48"></p><p>后来在<a href="https://github.com/moby/moby/issues/30984" target="_blank" rel="noopener">https://github.com/moby/moby/issues/30984</a> 这个文章下面找到了一个跟我情况差不多的哥们，也是<code>docker stats</code>命令失效。解决方法是重启docker进程：<code>systemctl restart docker.service</code>，果然，重启之后在手动启动上面两个容器，容器就可以正常访问了：<br><img src="/images/docker12.png" alt="akb48"></p><p>服务器的内存情况也得到了一定的缓解：<br><img src="/images/docker13.png" alt="akb48"></p><p>后来跟开发复盘，原来是这个机器上一次死机了，没法关闭容器，只能直接在阿里云控制台重启，而正常的流程应该是先关闭容器再重启的。<br><img src="/images/hazard.gif" alt="akb48" title="扎球王横扫红军防线"></p>]]></content>
    
    <summary type="html">
    
      一次服务器重启引起的小故障
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之三</title>
    <link href="http://yoursite.com/2018/09/26/Django%E4%BD%BF%E7%94%A8form%E8%A1%A8%E5%8D%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E5%80%BC%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/26/Django使用form表单判断输入值是否合法/</id>
    <published>2018-09-26T07:08:24.000Z</published>
    <updated>2018-11-29T13:42:15.351Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/09/18/Django%E9%80%9A%E8%BF%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E5%B0%86%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E5%BA%94%E8%BE%93%E5%87%BA/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/18/Django%E9%80%9A%E8%BF%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E5%B0%86%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E5%BA%94%E8%BE%93%E5%87%BA/</a></p><h2><span id="需求与解决思路">需求与解决思路</span></h2><p>对于表单而言，<strong>检查用户输入的信息是否合法</strong>是必然项。检查合法一般来说都是用<code>JavaScript</code>或<code>JQuery</code>。不过我是一个前端白痴，<code>JavaScript</code>对我来说就是天书。但是Django非常的贴心，在form表单里就准备了“验证输入内容”这个功能。</p><p>如果使用这个功能，首先先在app的<code>views.py</code>里导入form模块：<code>from django import forms</code>。</p><p>导入模块之后，设定一个类，这个类就是要在前端html页面中生成form表单中的<code>input</code>标签的，比如：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class YamlInfo(forms.Form):   #定义的django表单</span><br><span class="line">    name = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;,)#自定义错误信息</span><br><span class="line">    replicas = forms.DecimalField(max_digits=2,error_messages=&#123;&apos;required&apos;: u&apos;副本个数不能大于100&apos;&#125;) #最大只有2位数</span><br><span class="line">    labels_app = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)    </span><br><span class="line">containers_name = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)</span><br><span class="line">    containers_image = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>表单上输入的东西可能会有很多，根据实际情况哪些字段不能为空就把那些字段写到这个class里，在上面那个<code>YamlInfo</code>里把这五项配置对应的Django表单字段，比如<code>replicas</code>，这个字节代表的是<code>容器副本个数</code>，所以它只能是数字，而且我们不要求它大于100，就设定max为2。</p><p>创建完类之后，需要在html页面里根据类的对象创建html标签，然后再提交的时候，需要后台<code>views.py</code>把前端页面提交的数据封装到一个对象里：<code>obj = YamlInfo(request.POST)</code>。由于每个Django表单的实例都有一个内置的<code>is_valid()</code>方法，用来验证接收的数据是否合法。如果所有数据都合法，那么该方法将返回<code>True</code>，并将所有的表单数据转存到它的一个叫做<code>cleaned_data</code>的属性中，该属性是以个字典类型数据，然后对这组数据进行展示或者保存到数据库就随你便了；如果有一个数据是非法的，就可以return一个别的结果。</p><h2><span id="实际代码">实际代码</span></h2><p>理论到此结束，先看<code>views.py</code>:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render,render_to_response</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from .models import parameter#引入数据库里的类</span><br><span class="line">from django import forms#引入模块</span><br><span class="line"></span><br><span class="line">class YamlInfo(forms.Form):   #定义的django表单</span><br><span class="line">    name = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;,)</span><br><span class="line">    replicas = forms.DecimalField(max_digits=2,error_messages=&#123;&apos;required&apos;: u&apos;副本个数不能大于100&apos;&#125;) #最大只有2位数</span><br><span class="line">    labels_app = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)   </span><br><span class="line">containers_name = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)</span><br><span class="line">    containers_image = forms.CharField(error_messages=&#123;&apos;required&apos;: u&apos;此节点不能为空&apos;&#125;)</span><br><span class="line"></span><br><span class="line">#create_yaml就是用来展示输入的页面而已</span><br><span class="line">def create_yaml(request):</span><br><span class="line">    obj = YamlInfo()#创建form的对象</span><br><span class="line">    return render(request,&apos;create_yaml.html&apos;,&#123;&apos;obj&apos;:obj&#125;)#返回create_yaml这个模板，模板里的内容其实都是空的</span><br><span class="line"></span><br><span class="line">#yaml_list就是展示所有的输入情况</span><br><span class="line">def yaml_list(request):</span><br><span class="line">    obj = YamlInfo()#创建form的对象</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        input_obj = YamlInfo(request.POST)#request.POST为提交过来的所有数据</span><br><span class="line">        if input_obj.is_valid():</span><br><span class="line">            data = input_obj.clean()#用clean()函数获取提交的数据</span><br><span class="line">            apiVersion = request.POST.get(&apos;apiVersion&apos;,&apos;v1&apos;)#POST.get方法获取到非form的对象</span><br><span class="line">            kind = request.POST.get(&apos;kind&apos;,&apos;RC&apos;)</span><br><span class="line">            name = data[&apos;name&apos;]#用data字典来获取form的对象</span><br><span class="line">            replicas = data[&apos;replicas&apos;]</span><br><span class="line">            labels_app = data[&apos;labels_app&apos;]</span><br><span class="line">            containers_name = data[&apos;containers_name&apos;]</span><br><span class="line">            containers_image = data[&apos;containers_image&apos;]</span><br><span class="line">            containerPort1 = request.POST.get(&apos;containerPort1&apos;,None)</span><br><span class="line">            containerPort2 = request.POST.get(&apos;containerPort2&apos;,None)</span><br><span class="line">            containers_name2 = request.POST.get(&apos;containers_name2&apos;,None)</span><br><span class="line">            containers_image2 = request.POST.get(&apos;containers_image2&apos;,None)</span><br><span class="line">            containerPort2_1 = request.POST.get(&apos;containerPort2_1&apos;,None)</span><br><span class="line">            containerPort2_2 = request.POST.get(&apos;containerPort2_2&apos;,None)</span><br><span class="line">            print (data)#可以在后台看到整个data的内容</span><br><span class="line">        else:#如果输入不合法，返回错误信息</span><br><span class="line">            error_msg = input_obj.errors#errors为错误信息</span><br><span class="line">            return  render(request,&apos;create_yaml.html&apos;,&#123;&apos;obj&apos;:input_obj,&apos;errors&apos;:error_msg&#125;)#将错误信息直接返回到前端页面去展示,刚刚输入的非法字段也保留</span><br><span class="line">    else:#如果不是post提交，那么就是展示数据里的情况</span><br><span class="line">        yamls = parameter.objects.all().order_by(&apos;-id&apos;)#以倒数展示，即新加的在上面</span><br><span class="line">        context = &#123;&#125;</span><br><span class="line">        context[&apos;yamls&apos;] = yamls</span><br><span class="line">return render_to_response(&apos;yaml_list.html&apos;,context)#返回yaml_list.html，里面有数据库的所有数据</span><br><span class="line"></span><br><span class="line">    Parameter = parameter()#将数据库的类实例化</span><br><span class="line">    Parameter.apiVersion = apiVersion</span><br><span class="line">    Parameter.kind = kind</span><br><span class="line">    Parameter.name = name</span><br><span class="line">    Parameter.replicas = replicas</span><br><span class="line">    Parameter.labels_app = labels_app</span><br><span class="line">    Parameter.containers_name = containers_name</span><br><span class="line">    Parameter.containers_image = containers_image</span><br><span class="line">    Parameter.containerPort1 = containerPort1</span><br><span class="line">    Parameter.containerPort2 = containerPort2</span><br><span class="line">    Parameter.containers_name2 = containers_name2</span><br><span class="line">    Parameter.containers_image2 = containers_image2</span><br><span class="line">    Parameter.containerPort2_1 = containerPort2_1</span><br><span class="line">    Parameter.containerPort2_2 = containerPort2_2</span><br><span class="line">    Parameter.save()        #保存这些到数据库里</span><br><span class="line"></span><br><span class="line">    yamls = parameter.objects.all().order_by(&apos;-id&apos;)</span><br><span class="line">    context = &#123;&#125;</span><br><span class="line">    context[&apos;yamls&apos;] = yamls</span><br><span class="line">    return render_to_response(&apos;yaml_list.html&apos;,context)</span><br></pre></td></tr></table></figure></p><p>配置一下<code>urls.py</code>:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from createyaml import views#将app的views.py文件引入</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),#每个页面对应各自在views.py里的函数</span><br><span class="line">    path(r&apos;create_yaml/&apos;, views.create_yaml),</span><br><span class="line">    path(r&apos;yaml_list/&apos;, views.yaml_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>配置一下用户输入的界面—<code>create_yaml.html</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">                &lt;title&gt;生成K8S所用的YAML文件&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;用户输入&lt;/h1&gt;</span><br><span class="line">                &lt;h2&gt;请注意！大小写敏感！！！&lt;/h2&gt;</span><br><span class="line">                &lt;form action=&quot;/yaml_list/&quot; method=&quot;post&quot; name=&apos;yamllist&apos;&gt;</span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                API版本：</span><br><span class="line">                &lt;select name=&apos;apiVersion&apos;&gt;</span><br><span class="line">                        &lt;option value=&quot;v1&quot; selected&gt;v1&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;extensions/v1beta1&quot;&gt;beta1&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;&lt;br /&gt;</span><br><span class="line">                任务类型：</span><br><span class="line">                &lt;select name=&apos;kind&apos;&gt;</span><br><span class="line">                        &lt;option value=&quot;Pod&quot; selected&gt;Pod&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;Service&quot;&gt;Service&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;Deployment&quot;&gt;Deployment&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;ReplicationController&quot;&gt;ReplicationController&lt;/option&gt;</span><br><span class="line">                &lt;/select&gt;&lt;br /&gt;</span><br><span class="line">                &lt;p&gt;任务名称：&#123;&#123; obj.name &#125;&#125; &lt;span&gt;&#123;&#123; errors.name &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;任务数量：&#123;&#123; obj.replicas &#125;&#125; &lt;span&gt;&#123;&#123; errors.replicas &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;APP名称：&#123;&#123; obj.labels_app &#125;&#125; &lt;span&gt;&#123;&#123; errors.labels_app &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;容器1名称：&#123;&#123; obj.containers_name &#125;&#125; &lt;span&gt;&#123;&#123; errors.containers_name &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;容器1镜像：&#123;&#123; obj.containers_image &#125;&#125; &lt;span&gt;&#123;&#123; errors.containers_image &#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">                容器1开放端口1：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort1&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器1开放端口2：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2名称：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containers_name2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2镜像：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containers_image2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2开放端口1：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2_1&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                容器2开放端口2：&lt;input type=&quot;text&quot; placeholder=&quot;没有可以不填&quot; name=&quot;containerPort2_2&quot; /&gt;&lt;br /&gt;</span><br><span class="line">                &lt;input type=&quot;reset&quot; value=&quot;清除所有&quot; /&gt;</span><br><span class="line">                &lt;input type=&quot;submit&quot; value=&quot;生成yaml文件&quot; /&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>而跳转后的<code>yaml_list.html</code>就是这样：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;yaml文件展示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;数据库里的yaml数据展示&lt;/h1&gt;</span><br><span class="line">                &lt;table width=&quot;100%&quot; border=&quot;1&quot;&gt;</span><br><span class="line">                        &lt;thead&gt;</span><br><span class="line">                                &lt;a href=&quot;http://121.41.37.251:33664/create_yaml/&quot;&gt;&lt;button&gt;返回&lt;/button&gt;&lt;/a&gt;</span><br><span class="line">                                &lt;!--插入按钮 开始--&gt;</span><br><span class="line">                                &lt;input type=&quot;button&quot; value=&quot;执行&quot; onclick=&quot;MsgBox()&quot; /&gt;</span><br><span class="line">                                &lt;!--插入按钮 结束--&gt;</span><br><span class="line">                                &lt;!--引用JS代码以达到弹出对话框目的 开始--&gt;</span><br><span class="line">                                &lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">                                        function MsgBox() //声明标识符</span><br><span class="line">                                        &#123;</span><br><span class="line">                                        confirm(&quot;确定要执行后台脚本么？&quot;); //弹出对话框</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &lt;/script&gt;</span><br><span class="line">                                &lt;!--引用JS代码以达到弹出对话框目的 结束--&gt;</span><br><span class="line">                                &lt;br&gt;</span><br><span class="line">                        &lt;form&gt;</span><br><span class="line">                                &lt;tr&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;任务序号&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;yaml名称&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;api版本&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;任务类型&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;任务数量&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;对应应用&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;使用的第一个镜像名称&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;镜像1的第一个端口&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;镜像1的第二个端口&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;使用的第二个镜像名称&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;镜像2的第一个端口&lt;/td&gt;</span><br><span class="line">                                &lt;td align=&quot;center&quot;&gt;镜像2的第二个端口&lt;/td&gt;</span><br><span class="line">                                &lt;/tr&gt;</span><br><span class="line">                        &lt;/thead&gt;</span><br><span class="line">                        &lt;tbody&gt;</span><br><span class="line">                                &#123;% for yaml in yamls %&#125;</span><br><span class="line">                                &lt;tr&gt;</span><br><span class="line">                                        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;id&quot; checked=&quot;checked&quot;/&gt;&#123;&#123; yaml.id &#125;&#125; &lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.name &#125;&#125; &lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.apiVersion &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.kind &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.replicas &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.labels_app &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containers_image &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containerPort1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containerPort2 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containers_image2 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containerPort2_1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                        &lt;td align=&quot;center&quot;&gt;&#123;&#123; yaml.containerPort2_2 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                                &lt;/tr&gt;</span><br><span class="line">                                &#123;% endfor %&#125;</span><br><span class="line">                        &lt;/tbody&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>启动django，我们来看一下效果！<br><img src="/images/django20.gif" alt="paradin" title="提示某些项目必须填写"></p><p><img src="/images/django21.gif" alt="paradin" title="如果副本数大于100的错误提示"><br>不过说实话，对于用户来说，肯定选择题的感觉要比填空题好。所以到时候我们可以把阿里云容器仓库里的所有的镜像做成一个数据库，到时候映射到这个页面，让用户去在里面做选择而不是填空。而且django的form检查相比较JavaScript而言还是很粗糙的，如果是处女座的话，还是要搞JavaScript，而且两者也并不冲突，一个是对前端用户而言，一个是后台检查录入数据库的。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://docs.djangoproject.com/en/2.1/topics/forms/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.1/topics/forms/</a>    （官方文档）<br><a href="http://www.liujiangblog.com/course/django/152" target="_blank" rel="noopener">http://www.liujiangblog.com/course/django/152</a><br><a href="https://www.cnblogs.com/chenchao1990/p/5284237.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenchao1990/p/5284237.html</a><br><a href="http://dokelung-blog.logdown.com/posts/221431-django-notes-8-form-validation-and-modeling" target="_blank" rel="noopener">http://dokelung-blog.logdown.com/posts/221431-django-notes-8-form-validation-and-modeling</a><br><a href="https://www.jb51.net/article/103135.htm" target="_blank" rel="noopener">https://www.jb51.net/article/103135.htm</a></p>]]></content>
    
    <summary type="html">
    
      Django使用form表单判断输入值是否合法
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django将某个数据库字段给多个app使用</title>
    <link href="http://yoursite.com/2018/09/25/Django%E5%B0%86%E6%9F%90%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%BB%99%E5%A4%9A%E4%B8%AAapp%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/25/Django将某个数据库字段给多个app使用/</id>
    <published>2018-09-25T06:48:20.000Z</published>
    <updated>2018-09-25T12:23:46.890Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>Django里经常会有这样的一个需求—-同样的一组数据要给很多个app使用。比如一个运维系统，运维人员的名单就既要给“项目部署”这个APP用又要给“责任负责人”这个APP用。如果每次都要去跨应用去<code>from XXX.models import xxx</code>的话，代码感觉很不友好。那么要解决这个问题，就要用到django自带的<code>ContentTypes</code>框架。以下是所用软件版本：<br>Django:<code>2.1.1</code><br>Python:<code>3.6.4</code><br>old app:<code>Articles</code><br>new app:<code>read_stats</code></p><h2><span id="原始状态与前期配置">原始状态与前期配置</span></h2><p>目前在django的控制台页面的情况是这样的：<br><img src="/images/django14.png" alt="paradin"></p><p>可见里面就一个叫<code>Articles</code>的app，点开之后，发现对应的项目也很简单，只有<code>id</code>和<code>title</code>这两个字段而已：<br><img src="/images/django15.png" alt="paradin"></p><p>本次试验的目的就是<strong>新建立一个文章统计计数的app，在里面配置数据库，然后让原来的blog这个app能够使用得到新app的数据项</strong>。</p><p>首先先建立一个专门用来计数的app，比如就叫<code>read_stat</code>。那么就在django项目路径下<code>python manage.py startapp read_stats</code>，再把这个新的app名称添加到<code>settings.py</code>里：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;article&apos;,#先加载django自身的app，然后是第三方app，最后是自己开发的app</span><br><span class="line">    &apos;read_stats&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>编辑一下<code>read_stats</code>里的<code>models.py</code>，创建模型先：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.contenttypes.fields import GenericForeignKey#这句话是固定的，引用类型</span><br><span class="line">from django.contrib.contenttypes.models import ContentType#这句话是固定的，引用类型</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class ReadNum(models.Model):</span><br><span class="line">    read_num = models.IntegerField(default=0)#设定read_num就是一个普通的数字</span><br><span class="line">    content_type = models.ForeignKey(ContentType,on_delete=models.DO_NOTHING)#说明这是一个外键，即关联的模型，加上后面的话的意思是：即使删除了这个字段也不会影响其他数据</span><br><span class="line">    object_id = models.PositiveIntegerField()#这里是一个主键，即pk</span><br><span class="line">    content_object = GenericForeignKey(&quot;content_type&quot;,&quot;object_id&quot;)#通过上面两个变量，配置成一个通用的外键</span><br></pre></td></tr></table></figure></p><p>通过使用一个<code>content_type</code>属性代替了实际的<code>model</code>（如Post，Picture），而<code>object_id</code>则代表了实际model中的一个实例的主键，其中，<code>content_type</code>和<code>object_id</code>的字段命名都是作为字符串参数传进<code>content_object</code>的。</p><p>配置了数据库，肯定需要<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>：<br><img src="/images/django16.png" alt="paradin"></p><p>数据更新完毕之后，修改一下负责后台展示的<code>admin.py</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import ReadNum#引用ReadNum这个模型</span><br><span class="line"># Register your models here.</span><br><span class="line"></span><br><span class="line">@admin.register(ReadNum)   #装饰器</span><br><span class="line">class ReadNumAdmin(admin.ModelAdmin):</span><br><span class="line">        list_display = (&apos;read_num&apos;,&apos;content_object&apos;)</span><br></pre></td></tr></table></figure></p><p>此时刷新一下django页面就看到read_stats这个app已经注册成功了：<br><img src="/images/django17.png" alt="paradin"></p><p>由于是新的，所以里面空空如也，点击一下<code>ADD</code>，就可以输入值了：<code>Read num</code>就是设定的“阅读次数”，<code>Content type</code>这个数据是一个选择项，选择需要对应的数据库模型，即Article这个app里的<code>models.py</code>的类—<code>Article</code>，而<code>Object id</code>就<code>Articles</code>对应的文章编号：<br><img src="/images/django18.png" alt="paradin"></p><p>这样达到了后台配置“将Article应用里的第2篇文章的阅读次数上调到了99次”。</p><h2><span id="数据库的跨app配置">数据库的跨app配置</span></h2><p>刚才手动在后台配置完毕，但是目前这个<code>read_num</code>数据只能是在<code>read_stats</code>这个app里自嗨。要给让<code>Article</code>能够得到这个<code>read_num</code>的话，就需要通过模型获取到具体数值，这里要用到<code>ContentType.objects.get_for_model</code>方法。首先要配置<code>Article</code>下的<code>models.py</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.db.models.fields import exceptions#引入错误给try...except使用</span><br><span class="line">from django.contrib.contenttypes.models import ContentType#引入ContentType</span><br><span class="line">from read_stats.models import ReadNum      #从另一个app里引入类</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">class Article(models.Model):</span><br><span class="line">    title = models.CharField(max_length=30)</span><br><span class="line">    content = models.TextField()#这是它原来的数据库内容</span><br><span class="line">    </span><br><span class="line">    #添加一个方法给admin.py使用，如果有就直接返回值（字符串），如果没有object就返回一个0</span><br><span class="line">    def get_read_num(self):</span><br><span class="line">        try:</span><br><span class="line">            ct = ContentType.objects.get_for_model(self)#确定ContentType</span><br><span class="line">            readnum = ReadNum.objects.get(content_type=ct,object_id=self.pk)#每个readnum都是content_type和object_id对应的QuerySet</span><br><span class="line">            return readnum.read_num#这样返回就是一个具体的值，不然只是一个数据</span><br><span class="line">        except exceptions.ObjectDoesNotExist:</span><br><span class="line">            return 0</span><br></pre></td></tr></table></figure></p><p>再修改<code>Article</code>下的<code>admin.py</code>，让后台可以体现出来<code>read_num</code>：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Article</span><br><span class="line"># Register your models here.</span><br><span class="line"></span><br><span class="line">@admin.register(Article)</span><br><span class="line">class Article(admin.ModelAdmin):</span><br><span class="line">        list_display = (&apos;id&apos;,&apos;title&apos;,&apos;get_read_num&apos;)#这里新加上刚才的那个方法</span><br></pre></td></tr></table></figure></p><p>由于<code>admin.py</code>里返回的必须是字段，所以我们才在<code>models.py</code>里添加了一个方法去生成字段。</p><p>刷新一下Django后台页面，就看到效果了：<br><img src="/images/django19.png" alt="paradin"></p><p>至此，这个<code>read_num</code>数据就同时被两个APP关联分享了。至于再把<code>read_num</code>通过一定的处理方法之后映射到html前端就很简单了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://docs.djangoproject.com/en/2.1/ref/contrib/contenttypes/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.1/ref/contrib/contenttypes/</a>    （官方文档）</p>]]></content>
    
    <summary type="html">
    
      本文是杨世航大佬在Bilibili的第19讲，我这里只是做一个自己理解的复述而已
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django前端输入变量通过内部脚本加工返回前端展示之二</title>
    <link href="http://yoursite.com/2018/09/18/Django%E9%80%9A%E8%BF%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E5%B0%86%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E5%BA%94%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2018/09/18/Django通过唯一标识符将后台数据库对应输出/</id>
    <published>2018-09-18T11:18:51.000Z</published>
    <updated>2018-11-29T13:42:26.465Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景说明">背景说明</span></h2><p>python：<code>3.6.5</code><br>Django：<code>2.1.1</code><br>Project：<code>Kubernetes</code>，文件夹路径就是<code>/django/Kubernetes/</code><br>App：<code>createyaml</code>，文件夹路径就是<code>/django/Kubernetes/createyaml</code><br>前文地址：<a href="https://rorschachchan.github.io/2018/09/13/Django%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6%E4%B9%8B%E6%94%B9%E8%BF%9B%E7%89%88/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/09/13/Django%E5%88%B6%E4%BD%9C%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90yaml%E6%96%87%E4%BB%B6%E4%B9%8B%E6%94%B9%E8%BF%9B%E7%89%88/</a></p><h2><span id="sqlite3的用法">sqlite3的用法</span></h2><p><code>sqlite</code>是django默认的数据库，如果只是存一点简单的数据，那么它是足够胜任的。如果在django的APP文件夹里配置了<code>models.py</code>而且执行了<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>的话，那么在project的文件夹里是会生成<code>db.sqlite3</code>这个文件的。至于如何命令行操作sqlite和python调用sqlite，请去看：<a href="http://blog.51cto.com/zengestudy/1904680" target="_blank" rel="noopener">http://blog.51cto.com/zengestudy/1904680</a> ，里面说的已经很清楚了。</p><p>不过要注意的是<code>execute</code>方法得到的是一个对象，是看不到具体的sql结果。还需要<code>fetchall</code>方法进一步的解析，这样得到的是一个列表，然后取其中的具体元素，如图：<br><img src="/images/django12.png" alt="paradin"></p><h2><span id="使用唯一标识符">使用唯一标识符</span></h2><p>由于yaml的参数是从前端传入的，如果同时有多个人传入数据，那么后端脚本在取参数就会出现错误：<strong>多个人在传入不同的数据之后得到的结果却是一样的，即服务器接收到的最后那个数据返回的结果</strong>。为了不出现这样的混乱，所以我们就要引入唯一标识符保证每个人得到都是他们的结果。</p><p>在数据库里是有一个主键的也就是<code>id</code>，它是django生成数据库的时候自带的<code>private key</code>，每一个id都是唯一的，既然唯一那肯定就是我们选做唯一标识符的首选。至于怎么用它，其实就是在原有的<code>views.py</code>上做一点小手脚。如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">from .models import parameter#引入同级的modes.py里的parameter类</span><br><span class="line"></span><br><span class="line">def create_yaml(request):</span><br><span class="line">    return render(request,'create_yaml.html')#这个页面是用来输入各值</span><br><span class="line"></span><br><span class="line">def get_yaml(request):</span><br><span class="line">    if request.method == 'POST':#如果是post传参，那么就记录下来</span><br><span class="line">        apiVersion = request.POST.get(<span class="string">'apiVersion'</span>,<span class="string">'v1'</span>)</span><br><span class="line">        kind = request.POST.get(<span class="string">'kind'</span>,<span class="string">'RC'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        replicas = request.POST.get(<span class="string">'replicas'</span>,<span class="string">'1'</span>)</span><br><span class="line">        labels_app = request.POST.get(<span class="string">'labels_app'</span>,None)</span><br><span class="line">containers_name = request.POST.get(<span class="string">'containers_name'</span>,None)</span><br><span class="line">containers_image = request.POST.get(<span class="string">'containers_image'</span>,None)</span><br><span class="line">containerPort1 = request.POST.get(<span class="string">'containerPort1'</span>,None)</span><br><span class="line">containerPort2 = request.POST.get(<span class="string">'containerPort2'</span>,None)</span><br><span class="line">       containers_name2 = request.POST.get(<span class="string">'containers_name2'</span>,None)</span><br><span class="line">       containers_image2 = request.POST.get(<span class="string">'containers_image2'</span>,None)</span><br><span class="line">       containerPort2_1 = request.POST.get(<span class="string">'containerPort2_1'</span>,None)</span><br><span class="line">       containerPort2_2 = request.POST.get(<span class="string">'containerPort2_2'</span>,None)</span><br><span class="line">       signer = request.POST.get(<span class="string">'signer'</span>, <span class="string">'Micheal Jackson'</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">'404'</span>)</span><br><span class="line"></span><br><span class="line">   Parameter = parameter()#将parameter实例化</span><br><span class="line">   Parameter.apiVersion = apiVersion#把刚刚从前端得到的值对应赋值</span><br><span class="line">   Parameter.kind = kind</span><br><span class="line">   Parameter.name = name</span><br><span class="line">   Parameter.replicas = replicas</span><br><span class="line">   Parameter.labels_app = labels_app</span><br><span class="line">   Parameter.containers_name = containers_name</span><br><span class="line">   Parameter.containers_image = containers_image</span><br><span class="line">   Parameter.containerPort1 = containerPort1</span><br><span class="line">   Parameter.containerPort2 = containerPort2</span><br><span class="line">   Parameter.containers_name2 = containers_name2</span><br><span class="line">   Parameter.containers_image2 = containers_image2</span><br><span class="line">   Parameter.containerPort2_1 = containerPort2_1</span><br><span class="line">   Parameter.containerPort2_2 = containerPort2_2</span><br><span class="line">   Parameter.save()        #保存修改</span><br><span class="line"></span><br><span class="line">   yaml = parameter.objects.get(id=Parameter.id)#通过object.get方法是得到保存的所有值，但是我们只要本次的值，也就是id与private key一致的</span><br><span class="line">   return HttpResponse('api版本:%s yaml类型:%s yaml名称:%s 副本数量:%s yaml所属APP:%s 容器名称:%s 容器镜像名:%s'  % (yaml.apiVersion,yaml.kind,yaml.name,yaml.replicas,yaml.labels_app,yaml.containers_name,yaml.containers_image)))#输出部分刚输入的值到页面，检查一下是否正确</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>如下：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> createyaml <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(r<span class="string">'create_yaml/'</span>, views.create_yaml),</span><br><span class="line">    path(r<span class="string">'get_yaml/'</span>, views.get_yaml),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动django，在前端页面测试一下看看是否得到的结果就是本次输入的结果，如图：<br><img src="/images/django13.gif" alt="paradin"></p><p>可以看到，返回的页面正确的输出了本次各个参数！剩下还有三部分：</p><ol><li>做一个python脚本，把脚本加工的结果返回到前端；</li><li>用css/js把界面加工一下；</li><li>加入javascript，在前端输入的时候判断输入值是否合法；</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.51cto.com/lannyma/1735751" target="_blank" rel="noopener">http://blog.51cto.com/lannyma/1735751</a><br><a href="http://www.liujiangblog.com/course/django/152" target="_blank" rel="noopener">http://www.liujiangblog.com/course/django/152</a><br><a href="https://www.jianshu.com/p/46188b39eae5" target="_blank" rel="noopener">https://www.jianshu.com/p/46188b39eae5</a></p>]]></content>
    
    <summary type="html">
    
      使用唯一标识符将后台数据库对应输出
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
