<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-06T12:04:50.168Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mycat配置文件解析与读写分离测试</title>
    <link href="http://yoursite.com/2018/07/06/Mycat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/07/06/Mycat配置文件解析与读写分离测试/</id>
    <published>2018-07-06T11:51:18.000Z</published>
    <updated>2018-07-06T12:04:50.168Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Mycat的一些常见问题请看这里：<a href="https://blog.csdn.net/wangshuang1631/article/details/62898469" target="_blank" rel="noopener">https://blog.csdn.net/wangshuang1631/article/details/62898469</a> 。</p><p>前文说了，mycat主要有两个配置文件，分别是<code>schema.xml</code>和<code>server.xml</code>，<code>server.xml</code>就是配置虚拟数据库的账号密码的地方，很简单没什么好说的，主要说说<code>schema.xml</code>。</p><p>去除掉注释的<code>schema.xml</code>文件是这样的：<br><img src="/images/mycat4.png" alt="akb48"></p><p>可以看到整个配置文件分为三大块，第一块是schema，这里面有tables和childtables，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;Mycat的一些常见问题请看这里：&lt;a href=&quot;https://blog.csdn.net/wangshuang1631/article/details/62898469
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mycat 1.6.5的部署与启动</title>
    <link href="http://yoursite.com/2018/07/05/Mycat%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/07/05/Mycat的部署与简单测试/</id>
    <published>2018-07-05T03:19:29.000Z</published>
    <updated>2018-07-09T01:58:23.805Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="准备工作">准备工作</span></h2><p>先说一下硬件：</p><ol><li>mycat服务器:阿里云ECS,centos7.4,2核2G1M带宽,外网带宽主要是为了yum安装方便；</li><li>数据库主库:阿里云RDS;</li><li>数据库读库:阿里云RDS只读实例;</li></ol><p>登陆阿里云ECS之后，首先先进行如下操作：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz #下载1.6.5版本</span></span><br><span class="line">yum install java-1.8.0-openjdk* -y #安装java 1.8</span><br><span class="line">yum install -y mysql #安装mysql客户端</span><br><span class="line">useradd mycat#创建mycat用户</span><br><span class="line">passwd mycat#更改这个用户的密码</span><br><span class="line">tar -zxvf Mycat-server-1.6.5-release-20180122220033-linux.tar.gz -C /usr/local#解压缩/usr/local</span><br><span class="line">cd /usr/local/</span><br><span class="line">chown -R mycat.mycat /usr/local/mycat/#设置mycat目录的属主和属组</span><br></pre></td></tr></table></figure></p><p>然后登陆到阿里云RDS读库和写库，看一下大小写是否是“不敏感”,否则可能会发生表找不到的问题，阿里云的RDS默认是不敏感的：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show global variables like <span class="string">'%lower_case%'</span>;</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| lower_case_file_system | OFF   |#这个是“当前系统文件是否大小写敏感”，只读参数，无法修改</span><br><span class="line">| lower_case_table_names | 1     |#这个是“表名是否大小写敏感”，可以修改，改完了重启生效</span><br><span class="line">+------------------------+-------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><h2><span id="mycat原理和文件结构">Mycat原理和文件结构</span></h2><p>Mycat的原理跟Atlas查不多，都是用一个虚拟的数据库作为前端，后面是挂上真实的写库和读库。如图：<br><img src="/images/mycat1.png" alt="akb48"></p><p>mycat文件夹的文件结构很简单：</p><ol><li>conf：配置文件；</li><li>lib：服务依赖的一些jar文件.；</li><li>logs：日志存储文件夹；</li><li>bin：可执行命令的地方：</li></ol><p>mycat的配置文件主要在<code>/usr/local/mycat/conf</code>文件夹里，里面有很多文件，但是主要的配置文件是如下几个：</p><ol><li><code>server.xml</code>用来配置虚拟数据库的信息；</li><li><code>schema.xml</code>用来配置真实读库写库的信息；</li><li><code>rule.xml</code>是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件；<br>注意！在这个目录下，配置文件修改，需要重启Mycat或者通过9066端口reload才会生效。</li></ol><p>首先在打开<code>server.xml</code>，在如下的地方做修改:<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;user name=<span class="string">"root"</span> defaultAccount=<span class="string">"true"</span>&gt;&lt;!-- 这里是给虚拟库设定一个账号叫root，并且作为默认账号 --&gt;</span><br><span class="line">        &lt;property name="password"&gt;chenx1242&lt;/property&gt;&lt;!-- 账号root的密码 --&gt;</span><br><span class="line">        &lt;property name="schemas"&gt;TESTDB&lt;/property&gt;&lt;!-- 账号root对应的虚拟库,这个库保持默认比较好 --&gt;</span><br><span class="line">&lt;/user&gt;</span><br><span class="line">&lt;user name=<span class="string">"test"</span>&gt;&lt;!-- 这里是给虚拟库设定一个账号叫test，并且作为默认账号 --&gt;</span><br><span class="line">        &lt;property name="password"&gt;26e9p69r&lt;/property&gt;&lt;!-- 账号test的密码 --&gt;</span><br><span class="line">        &lt;property name="schemas"&gt;TESTDB&lt;/property&gt;&lt;!-- 账号test对应的虚拟库,这个库保持默认比较好 --&gt;</span><br><span class="line">        &lt;property name="readOnly"&gt;true&lt;/property&gt;&lt;!-- 说明这个账号是只读账号 --&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开<code>schema.xml</code>，编辑如下地方：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataHost name=<span class="string">"localhost1"</span> maxCon=<span class="string">"1000"</span> minCon=<span class="string">"10"</span> balance=<span class="string">"0"</span> writeType=<span class="string">"0"</span> dbType=<span class="string">"mysql"</span> dbDriver=<span class="string">"native"</span> switchType=<span class="string">"1"</span>  slaveThreshold=<span class="string">"100"</span>&gt;</span><br><span class="line">               &lt;heartbeat&gt;select user()&lt;<span class="regexp">/heartbeat&gt;</span></span><br><span class="line"><span class="regexp">               &lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line"><span class="regexp">               &lt;writeHost host="hostM1" url="阿里云RDS:3306" user="账号"   password="对应密码"&gt;</span></span><br><span class="line"><span class="regexp">                       &lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line"><span class="regexp">               &lt;readHost host="hostS1" url="阿里云只读RDS:3306" user="账号"   password="对应密码"/</span>&gt;</span><br><span class="line">               &lt;<span class="regexp">/writeHost&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- &lt;writeHost host="hostS2" url="localhost:3316" user="root" password="123456"/</span>&gt; --&gt;</span><br><span class="line">               &lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="root" password="123456"/&gt; --&gt;</span><br><span class="line">   &lt;/dataHost&gt;</span><br></pre></td></tr></table></figure></p><p>检查好格式并保存之后，就到mycat目录下的/bin/里<code>./mycat start</code>就启动mycat了。启动成功之后，8066和9066都是被监听的，如图：<br><img src="/images/mycat2.png" alt="akb48"></p><p><img src="/images/mycat3.png" alt="akb48"></p><h2><span id="启动故障排错">启动故障排错</span></h2><p>如果启动mycat失败，可以去logs文件夹里看日志，这里举例几个有代表性的错误：</p><ol><li><p><code>wrapper.log</code>日志：<code>Caused by: io.mycat.config.util.ConfigException: SelfCheck###  schema mycat refered by user test is not exist!</code><br><code>server.xml</code>里schema最好选择默认的TESTDB，而不是错误里的自己起名的mycat。</p></li><li><p><code>wrapper.log</code>日志：<code>org.xml.sax.SAXParseException; lineNumber: 23; columnNumber: 3; The content of elements must consist of well-formed character data or markup</code><br>去检查一下<code>server.xml</code>的第23行，看一下是不是多了一个’&lt;’或者’&gt;’。</p></li><li><p><code>wrapper.log</code>日志：<code>Caused by: io.mycat.config.util.ConfigException: user root duplicated!</code><br><code>server.xml</code>里普通账号root，只读账号也叫root，冲突了。</p></li><li><p><code>wrapper.log</code>日志：<code>Caused by: org.xml.sax.SAXParseException; lineNumber: 16; columnNumber: 101; Element type &quot;WriteHost&quot; must be declared.</code><br><code>schema.xml</code>配置中writeHost写成了WriteHost导致报错。</p></li><li><p><code>mycat.log</code>日志如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-06</span> <span class="number">15</span>:<span class="number">53</span>:<span class="number">22.894</span>  WARN [$_NIOREACTOR<span class="number">-8</span>-RW] (io.mycat.backend.mysql.nio.MySQLConnectionAuthenticator.handle(MySQLConnectionAuthenticator.java:<span class="number">91</span>)) - can<span class="string">'t connect to mysql server ,errmsg:Access denied for user '</span>数据库账号<span class="string">'@'</span>本地IP<span class="string">' (using password: YES) MySQLConnection [id=8, lastTime=1530863602566, user=数据库账号, schema=db3, old shema=db3, borrowed=false, fromSlaveDB=false, threadId=4555911, charset=utf8, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=阿里云写库地址, port=3306, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]</span></span><br></pre></td></tr></table></figure></li></ol><p><code>schema.xml</code>里把真实库的配置写错了。</p><ol><li><code>mycat.log</code>日志：<code>(io.mycat.net.NIOConnector.finishConnect(NIOConnector.java:155)) - error: java.net.ConnectException: Connection refused</code><br><code>schema.xml</code>的<code>&lt;dataHost&gt;</code>字段是否写入了多余的数据库。</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="http://valleylord.github.io/post/201601-mycat-install/" target="_blank" rel="noopener">http://valleylord.github.io/post/201601-mycat-install/</a><br><a href="https://www.jianshu.com/p/f15d64fcb2f3" target="_blank" rel="noopener">https://www.jianshu.com/p/f15d64fcb2f3</a></p>]]></content>
    
    <summary type="html">
    
      MyCAT模拟了一个虚拟Mysql数据库，并通过简单的配置文件配置，将虚拟数据库中的表映射到实际数据库中
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库中间件" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="mycat" scheme="http://yoursite.com/tags/mycat/"/>
    
  </entry>
  
  <entry>
    <title>写在阿根廷出局之后</title>
    <link href="http://yoursite.com/2018/07/03/%E5%86%99%E5%9C%A8%E9%98%BF%E6%A0%B9%E5%BB%B7%E5%87%BA%E5%B1%80%E4%B9%8B%E5%90%8E/"/>
    <id>http://yoursite.com/2018/07/03/写在阿根廷出局之后/</id>
    <published>2018-07-03T01:49:33.000Z</published>
    <updated>2018-07-03T02:15:20.886Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="桑保利的无奈">桑保利的无奈</span></h2><p>阿根廷在俄罗斯世界杯的征程结束了，3:4输给法国看上去好像不那么糟糕，但是在姆巴佩下半场的2球时间里，阿根廷的后防线的的确确崩溃了。</p><p>一天之后的凌晨，俄罗斯靠点球大战送西班牙回家。很多阿根廷的球迷说阿根廷应该效仿俄罗斯，跟法国摆大巴，靠着偷鸡或者点球胜利。</p><p>我个人认为，此方法不可取。虽然阿根廷2014年是靠防守进了决赛，但是这支阿根廷老人更老，新人不牛，而且整支队伍缺乏磨合，纪律性也不够。桑保利深知阿根廷无法保持90分钟的高质量大巴，最多三十分钟。而且大巴阵需要一个高点去压迫对方的后卫，比如穆里尼奥的德罗巴、科斯塔、卢卡库，至少也得有一个能跳又壮的C罗在禁区里搅合，但是伊卡尔迪这次没来，所以桑保利无论是防守还是进攻都无法选择大巴。</p><p>所以说，“攻出去”是桑保利无奈的选择，至少这样能死的还壮烈一点。当然，桑保利换上法齐奥是一个败笔，但是最根本的原因还是阿根廷人才断档造成的阵容畸形。</p><h2><span id="梅西的困局">梅西的困局</span></h2><p>梅西在国家队是不是过得不爽？这是必然的。因为他在巴萨得到的支持远大于他在国家队得到的支持，但是这种支持差以肉眼可见的速度缩小。而且阿根廷的媒体对梅西也是比较苛刻，这就吃了没有好公关团队的亏。</p><p>让梅西去踢中场是很暴殄天物的行为，但是现在中场式微，梅西不得不去后撤拿球，甚至还要在边路拿球。我曾经说过，梅西后撤拿球就是慢性自杀，首先他不靠近禁区就无法高质量的射门，其次后撤拿球会让对手更多的容错率去包夹他进而消耗他的体力。这样下来不仅场面不好看，梅西的数据更难看，难免被人黑。不过我还是不明白为什么迪巴拉与梅西无法共存，他俩是位置冲突没错，但是梅西可以踢边路，让迪巴拉去踢前腰/影锋，这个从理论上来说是可行的。</p><p>反正在俱乐部解决梅西的问题很简单，砸钱买人即可，但是在国家队，估计要费桑保利的脑细胞了（前提是他不下课），所以说足球是和平年代的战争，表面拼的是场上比分，实际拼的是场下准备。</p><p>很多球迷反应说梅西在世界杯上没什么笑容，这让我想起来中日甲午战争的时候，中国船上的洋水手回忆说“中国的海员战斗前摩拳擦掌跃跃欲试，但是中国的军官则是一脸忧虑、若有所思”。事实说明，其实军官是更了解敌我实力差距的，梅西也是如此。但是没有办法，他必须要做打一个很难打赢的战争。</p><h2><span id="梅罗之争">梅罗之争</span></h2><p>可以说这两个人在俄罗斯的表现都是他们各自在俱乐部七层左右的功力（C罗要高一点），但是这两个人都踢飞了点球，而那个点球原本都可以把他们队伍带到下半区去面对较弱对队伍从而提高晋级的概率，可以说国家队过早出局跟他们有直接关系。</p><p>梅西在淘汰赛表现还可以但是在0:3输克罗地亚那一场太过失常，但是C罗这一边也是“高开低走”，不过同样四届世界杯，梅西世界杯6球3助攻，C罗是7球1助攻，大家都没有在淘汰赛进球，的确很巧合。</p><p>不过皇马三连冠外加葡萄牙拿到了欧洲杯冠军，让C罗的生涯看起来比梅西完美了很多。明年是巴西美洲杯，现在美洲杯的竞争完全不逊于欧洲杯，小马哥离开的阿根廷想夺冠并不乐观，梅西估计注定无法作为领袖为阿根廷带来一个洲际冠军了。</p><p>这两个人都是超级射手，而且不可否认的是他们都需要优秀的中场作为火力支持，以前梅西有“哈白布”大杀四方，而C罗现在有了“克卡莫”也逆转了金球奖总数，所以作为球迷，要认识到这一点：现代足球单打一场或许可以，连续独斗五场以上就是天神下凡了。</p><p>不过客观的说，除非内马尔等人能拿到世界杯，不然今年的金球奖还是C罗的，梅西和巴萨需要尽快加油，而加油最有效的方法就是补强中场，加强控制。</p>]]></content>
    
    <summary type="html">
    
      四年之后，一个轮回
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="足球" scheme="http://yoursite.com/tags/%E8%B6%B3%E7%90%83/"/>
    
      <category term="世界杯" scheme="http://yoursite.com/tags/%E4%B8%96%E7%95%8C%E6%9D%AF/"/>
    
      <category term="阿根廷" scheme="http://yoursite.com/tags/%E9%98%BF%E6%A0%B9%E5%BB%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用xshell做代理查看无公网服务器的WEB界面</title>
    <link href="http://yoursite.com/2018/06/30/%E4%BD%BF%E7%94%A8xshell%E5%81%9A%E4%BB%A3%E7%90%86%E6%9F%A5%E7%9C%8B%E6%97%A0%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84WEB%E7%95%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2018/06/30/使用xshell做代理查看无公网服务器的WEB界面/</id>
    <published>2018-06-30T09:28:56.000Z</published>
    <updated>2018-07-02T02:17:55.474Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在工作中经常有一些服务器是高机密的，那么这样的服务器就要与外网隔离。但是没有公网的服务器如果也没有连入到局域网的话，按常理来说是无法打开程序的Web界面。这里则分享一个黑科技—使用xshell做代理然后用浏览器去查看Web界面。</p><p>首先要在Xshell顶端菜单栏选择<code>查看</code>—<code>隧道窗格</code>。如图：<br><img src="/images/xshell1.png" alt="paradin"></p><p>此时Xshell的底端就出来一个窗口，然后选择<code>转移规则</code>，如图：<br><img src="/images/xshell2.png" alt="paradin"></p><p>在<code>转移规则</code>右键，选择<code>添加</code>，在添加的窗口里，<code>类型(方向）</code>选择<code>Dynamic(SOCKS4/5)</code>，端口就用默认的1080，备注爱写不写，如图：<br><img src="/images/xshell3.png" alt="paradin"></p><p>来到windows桌面，点击<code>我的电脑</code>—<code>控制面板</code>—<code>Internet选项</code>，打开<code>连接</code>这个标签页，选择下面的<code>局域网设置</code>。如图：<br><img src="/images/xshell4.png" alt="paradin"></p><p>在<code>局域网（LAN）设置</code>里，先在<code>为LAN使用代理服务器</code>前面打勾，然后点击<code>高级</code>，在套接字那里输入<code>127.0.0.1</code>，端口就是刚刚默认的1080，点击确定保存，如图：<br><img src="/images/xshell5.png" alt="paradin"></p><p>此时在浏览器里输入内网的IP地址就能打开这个服务器里Web界面了，比如我公司内部的云存储界面：<br><img src="/images/xshell6.png" alt="paradin"></p><p>不过此时你是完全属于LAN环境，公网是无法访问的。如果要恢复访问公网，那么就要返回到<code>局域网（LAN）设置</code>里，把<code>为LAN使用代理服务器</code>前面的勾点掉就OK。<br><img src="/images/大岛优子.gif" alt="paradin" title="优叔赛高！！！"></p>]]></content>
    
    <summary type="html">
    
      这个方法可以用来登陆MQ，kafka，kibana等无公网环境的界面...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="xshell" scheme="http://yoursite.com/tags/xshell/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置防盗链</title>
    <link href="http://yoursite.com/2018/06/27/Nginx%E9%85%8D%E7%BD%AE%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    <id>http://yoursite.com/2018/06/27/Nginx配置防盗链/</id>
    <published>2018-06-27T06:08:04.000Z</published>
    <updated>2018-06-27T06:43:49.662Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="为什么网站们都要限制流量">为什么网站们都要限制流量？</span></h2><p>无论是网站服务器亦或是游戏服务器还是邮件服务器，说穿了也是一台电脑，也有CPU和内存。只不过服务器的CPU功能比个人电脑的CPU功能强大，比如个人电脑的CPU一秒钟能算1亿个数，那么服务器的CPU一秒钟就能算十亿个数。毕竟个人电脑只针对个人，但是服务器是要“接客”的，有了强大的硬件做后盾，网页/游戏/邮箱才不会那么轻易的Down掉。</p><p>但是CPU不是人类大脑，人脑是越用越聪明，CPU是越用越磨损，毕竟始终在连电的环境下。于是乎，没有必要的运算能省就省，一个人省一次，十万个人就省十万次，一千万个人就省一千万次，这样达到积少成多的目的。</p><p>CPU计算的是各种数据，而这些数据也叫作流量。有用的流量、有价值的流量通过CPU计算无可厚非，但是出现了没有用的流量或者是别人盗用我们的资源，那么这种情况能避免都要避免。什么叫盗用我们的资源，比如自己网站（网站A）上的图片或者视频，被其他人直接复制网站然后粘贴到他们的主页（网站B）上，其他用户登录了B网站，然后点击了那个图片和视频，由于是网址重链接，里外里提供数据的还是我们的服务器。也就是说B网站就是一个中介，而真正提供服务的是网站A，但是广告费和点击率都要网站B赚走了，这事儿实在是叔可忍婶不可忍。</p><h2><span id="什么是盗链如何发现被盗链">什么是盗链？如何发现被盗链？</span></h2><p>什么叫盗链，上面已经说的差不多了，如果上面的文字没有看懂的话，举个例子，如果您看到了这两个图片，证明这个网站就是在盗链。<br><img src="/images/fangdaolian1.jpg" alt="paradin"></p><p><img src="/images/fangdaolian2.jpg" alt="paradin"></p><p>这两个就是一个盗取的是QQ空间的图片，另一个就是百度的图片。用其他网站的图片这事儿本身是无所谓的，只要不涉及版权问题，都希望自己的作品能广泛传播，但是请不要直接通过网址重定向，厚道一点的行为应该是：“图片另存为”，然后到目标网站上去重新上传一下。</p><p>这里再多说一点网站的基础知识。</p><ol><li><p>PV值：PV=page view，网站是有少则一个网页多则N多网页组成的一个整体，PV值就是统计用户访问网站的总页数。比如www.JQK.com这个网站，今天有100个用户登录，平均每个用户翻阅了里面5个网页。那么这个网站的PV值就是500。若一个IP地址，对一个页面刷新10000次，PV值也是1.要查询网站的PV值登陆<a href="http://www.alexa.cn就行。" target="_blank" rel="noopener">http://www.alexa.cn就行。</a></p></li><li><p>Hit值：这个就是对网页里每个元素的点击量，一个网页里的图片就是一个元素，一个flv文件也是一个元素，一首歌曲也是一个元素。这些的总量就是hit值，hit值越高就证明这个网站被人查看的情况越高，那么也证明网站的高人气，那么自然广告也会卖出去很多钱。</p></li></ol><p>因为建网站这事儿关心到了金钱利益，网站越被人关注，自然价值也越大。于是会有一个公式来评判网站的“每日贡献”：<code>总流量=访问流量+下载流量= Page view值 x 页面大小+下载文件大小 x 下载次数</code>。</p><p>作为管理者，每天观察一下自己一亩三分地儿的网站数据情况是本职工作。但是有时候也会遇到网站流量很惊人的情况，一般来说，网站流量过大（CPU运转很多）的原因如下：</p><ol><li><p>网站是一个很大的网站：比如说淘宝，京东，网易，youtube，facebook那种大网站，里面成万上亿的网页，而且每天又有那么多人登陆，自然浏览量很大。虽然这些大集团的服务器也是少则几千，多则上万，甚至在不同地区也会有不少的服务器集群，但是这几万台服务器需要提供的数据会很多也是不争的事实。这种现象是正常的。</p></li><li><p>网页内容太大：可能本身网站是一个小网站，加起来也就十页二十页的内容，但是每一天的流量依旧很惊人，那么很有可能是单页或者某几页的字节太大。比如网页里有太多的图片，太多的视频，太多的其他链接，也有可能是前端码农们给这个网页的规划不合理。导致这个网页每一次被点击都要大费周折（hit值和PV值不高，但是日流量很高），长此以往不仅会耽误用户的整体体验，对服务器也是一个重大伤害。</p></li><li><p>搜索引擎产生了大量的数据流量：网站需要推广，于是就在各种搜索引擎上打广告，也有自己网站的很多图片用于外部调用。这样的结果就是本身来观摩网站的人很少，但是“借着引擎经过”的人很多，所以就会有PV值不高，但是Hit值和日流量很高的现象出现。</p></li><li><p>图片或者其他元素被盗链：第一部分就说过了，别人拿我们的图片去吸引别人关注，然后别人想要深入了解，还要来使用我们的服务器去提供详细数据。这种“用我们的牌子住我们的房，吃我们的饭却不给我们钱”的现象实在应该被弄死。这种现象的特征也是PV值不高（没人真正点击网站），但是Hit值和日流量很大（自己服务器的数据都给别的网站提供了）。</p></li><li><p>网站被DDos攻击了：被一些恶意的IP地址频繁登陆，来回的刷流量。这样迫使CPU做出运算的行为其实就是在远程的破坏服务器的硬件CPU，遇到这种现象，之前Nginx文章里有写，要么通过access.log找到这些IP封掉，要么就在配置文件里加上限制（<code>limit-rate</code>)。</p></li></ol><h2><span id="服务器是如何知道图片是从站外而来的呢">服务器是如何知道图片是从站外而来的呢？</span></h2><p>在http协议里有一个重要的选项叫<code>refer</code>，这个选项的内容就是该元素的来源地址。如果这个元素是服务器自己提供的，那么头文件里是没有refer这个选项的。通过refer这个信息，我们也可以知道登陆网站的客户是从哪个网站点击链接而来的。这样方便进行一个统计和规划。</p><p>假如，我在QQ空间里面发现一个图，然后右键图片，选择<code>在新标签栏里打开图片</code>，这时候通过浏览器<code>审查元素</code>的功能，能查查看请求头信息和响应头信息，发现响应头信息里多了一个refer，里面的内容就是图片的源地址：<br><img src="/images/fangdaolian3.jpg" alt="paradin"></p><p>我在QQ空间里看腾讯的照片自然是可以的，但是如果我在别的网站里看腾讯的照片，加重了腾讯服务器的负担，自然腾讯公司会不满意。于是腾讯服务器发现当前要引用这个图片的地址与refer头信息不是一个来源之后，就不会把这个图片的数据传送过来，于是就看到那个<code>此图片来自QQ空间，未经准许不可饮用</code>的警告图片。</p><p>既然知道了服务器是如何判断文件是否盗链，那么只要伪装一个refer就可以欺骗服务器达到“反防盗链”的目的了。至于这部分，可以自己单独研究。</p><h2><span id="如何使用nginx反盗链">如何使用Nginx反盗链？</span></h2><p>同样的使用<code>Nginx.conf</code>，在http的大括号下面，新建一个<code>location</code>，加入如下信息：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location</span><br><span class="line"> ~ .*\.(wma|wmv|asf|mp3|mmf|zip|rar|jpg|gif|png|swf|flv)$ &#123;</span><br><span class="line">#指定对以上几种类型的文件建立防盗链</span><br><span class="line">     valid_referers</span><br><span class="line"> none blocked *.alala.com alala.com;</span><br><span class="line">#盗链的范围不包括alala.com和alala.com下的二级网站，</span><br><span class="line">     if</span><br><span class="line">($invalid_referer)</span><br><span class="line"> &#123;</span><br><span class="line">     #rewrite</span><br><span class="line"> ^/ http://www.alala.com/error.html;</span><br><span class="line">     return</span><br><span class="line">403;</span><br><span class="line">#如果发现有引用以上文件的地址与refer头信息不符的情况，直接重定向成error.html这个网页，服务器返回403，forbidden。</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用第三方模块<code>ngx_http_accesskey_module</code>实现Nginx防盗链。实现方法如下：</p><ol><li>下载<code>NginxHttpAccessKeyModule</code>模块文件：<a href="http://wiki.nginx.org/File:Nginx-accesskey-2.0.3.tar.gz；" target="_blank" rel="noopener">http://wiki.nginx.org/File:Nginx-accesskey-2.0.3.tar.gz；</a></li><li>解压此文件后，找到<code>nginx-accesskey-2.0.3</code>下的config文件。编辑此文件：替换其中的<code>$HTTP_ACCESSKEY_MODULE</code>为<code>ngx_http_accesskey_module</code>；</li><li>用一下参数重新编译nginx：<code>./configure --add-module=Nginx目录/to/nginx-accesskey</code>,然后执行:<code>make &amp;&amp; make install</code>;</li><li>修改<code>nginx.conf</code>文件，添加以下几行： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">  accesskey on;</span><br><span class="line">  accesskey_hashmethod md5;</span><br><span class="line">  accesskey_arg &quot;key&quot;;</span><br><span class="line">  accesskey_signature &quot;mypass$remote_addr&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中：<br>accesskey为模块开关；<br>accesskey_hashmethod为加密方式MD5或者SHA-1；<br>accesskey_arg为url中的关键字参数；<br>accesskey_signature为加密值，此处为mypass和访问IP构成的字符串。</p>]]></content>
    
    <summary type="html">
    
      要是阿里云的服务，直接可以通过OSS里的“防盗链”配置即可
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="防盗链" scheme="http://yoursite.com/tags/%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>给非root开放tcpdump命令权限</title>
    <link href="http://yoursite.com/2018/06/22/%E7%BB%99%E9%9D%9Eroot%E5%BC%80%E6%94%BEtcpdump%E5%91%BD%E4%BB%A4%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2018/06/22/给非root开放tcpdump命令权限/</id>
    <published>2018-06-22T08:24:11.000Z</published>
    <updated>2018-06-22T08:37:43.473Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这周给开发们上了堡垒机，使用的是开源的<code>jumpserver</code>，官网是<a href="http://www.jumpserver.org/" target="_blank" rel="noopener">http://www.jumpserver.org/</a> 。</p><p>注册了账号下发给各位开发之后，开发反馈了一个问题：无法用<code>tcpdump</code>抓包。因为<code>tcpdump</code>默认是只能被root调用的，如果是非root用户使用就会报错：<code>You don&#39;t have permission to capture on that device</code>。</p><p>如果要让普通用户也能顺利用上<code>tcpdump</code>，方法很简单，就是对tcpdump这个文件修改成<code>u+s</code>即可。整个过程如下图：<br><img src="/images/tcpdump1.png" alt="akb48"></p><p>在堡垒机的web界面试一下：<br><img src="/images/tcpdump2.png" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      甲沟炎真是疼死我了~
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Centos6安装git1.9安装过程</title>
    <link href="http://yoursite.com/2018/06/13/Centos6%E5%AE%89%E8%A3%85git1-9%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/06/13/Centos6安装git1-9安装过程/</id>
    <published>2018-06-13T11:57:55.000Z</published>
    <updated>2018-06-19T01:35:50.329Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装过程">安装过程</span></h2><p>Centos 6.x用yum安装git的话，默认是<code>1.7.1</code>。它在执行<code>git push</code>的时候会报错:<code>error: The requested URL returned error: 401 Unauthorized while accessing</code>。这种情况升级git可破。</p><p>具体的升级方法如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel#先准备一下环境</span><br><span class="line">cd /root</span><br><span class="line">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/git-core/git-1.9.0.tar.gz#下载1.9的包</span><br><span class="line">tar -zvxf git-1.9.0.tar.gz</span><br><span class="line">cd git-1.9.0</span><br><span class="line">make prefix=/usr/local/git all#安装到/usr/local里</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line">ln -s /usr/local/git/bin/* /usr/bin/#建立软连接</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></p><h2><span id="常用命令">常用命令</span></h2><p>随便列举几个常用命令：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://xxxxxxx#将后面那个网址作为remote的源站</span><br><span class="line">git remote rm origin#将刚刚建立的那个源站删了 </span><br><span class="line">git pull origin master#把remote的master分支的内容down到本地</span><br><span class="line">git reset --hard HEAD #撤销未提交的文件</span><br><span class="line">git fetch -p #更新最新的远程分支，如果远程分支已删除，则删除本地对应标记的远程分支</span><br><span class="line">git branch -a #查看所有分支</span><br><span class="line">git checkout -b  feature/test origin/feature/test  #在本地新增对应的远程分支并切换到 新增的分支上</span><br><span class="line">git branch -D feature/test #删除本地feature/test分支  这个命令慎用，生产环境后期一般留个4,5个版本的release开头的分支,可以通过此命令删除一些早期版本的分支</span><br><span class="line">git branch checkout feature/test   #通过此命令可以来回切换本地分支，当存在线上代码需要回滚的时候，可以进行次命令切换到之前的release分支</span><br></pre></td></tr></table></figure></p><p><img src="/images/gakki1.gif" alt="akb48" title="元气满满的刚巴得~~~"></p>]]></content>
    
    <summary type="html">
    
      1.7版本的git就是一个坑
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins搭配ansible部署</title>
    <link href="http://yoursite.com/2018/06/12/Jenkins%E6%90%AD%E9%85%8Dansible%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/06/12/Jenkins搭配ansible部署/</id>
    <published>2018-06-12T08:19:00.000Z</published>
    <updated>2018-06-13T11:45:10.917Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="架构流程">架构流程</span></h2><p>现在运维组工具里加入了gitlab这个版本控制工具，再加上原有的jenkins和ansible，整个代码模块部署流程如下：<br>1.在代码服务器上push更改的代码到gitlab；<br>2.gitlab通过webhook推送事件到jenkins,触发构建任务；<br>3.jenkins从gitlab将最新代码拉取下来；<br>4.jenkins通过ansible将最新的代码部署到应用服务器；<br>5.推送构建状态到gitlab；</p><h2><span id="安装ansible">安装ansible</span></h2><p>jenkins虽然支持ansible，但是前提是jenkins所在的主机上要有ansible程序，安装ansible的方法如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install paramiko PyYAML Jinja2 httplib2 six</span><br><span class="line">pip install ansible#安装的是2.5.4版本</span><br></pre></td></tr></table></figure></p><p>然后需要jenkins服务器与代码服务器之间建立ssh免密码登陆的关系，这里就不说细节了，可以去看一下<a href="http://blog.51cto.com/chenx1242/1763978" target="_blank" rel="noopener">http://blog.51cto.com/chenx1242/1763978</a> 这个文章。</p><p>再去<code>/etc/ansible/hosts</code>手动输入一下授信服务器的IP地址，启动一下ansible看效果：<br><img src="/images/jenkinsansible2.png" alt="akb48"></p><p>如果在启动ansible的时候出现了如下的错误：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/python2.7/site-packages/requests/__init__.py:80: RequestsDependencyWarning: urllib3 (1.21.1) or chardet (2.2.1) doesn&apos;t match a supported version!</span><br><span class="line">  RequestsDependencyWarning)</span><br></pre></td></tr></table></figure></p><p>那就是python库中<code>urllib3 (1.21.1)</code> or <code>chardet (2.2.1)</code>的版本不兼容，解决办法如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall urllib3</span><br><span class="line">pip uninstall chardet</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure></p><h2><span id="安装插件">安装插件</span></h2><p>登陆jenkins的web页面，选择<code>系统管理</code>—&gt;<code>管理插件</code>，安装如下三个插件：<code>Ansible plugin</code>、<code>Ansible Tower Plugin</code>、<code>AnsiColor</code>。如图：<br><img src="/images/jenkinsansible1.png" alt="akb48"></p><p>安装插件并且重启了ansible之后，还是<code>系统管理-</code>–&gt;<code>全局工具配置</code>，找到<code>ansible安装</code>，分别把ansible的路径根据实际情况填写进去，如图：<br><img src="/images/jenkinsansible3.png" alt="akb48"></p><p>填写完毕之后保存即可。</p><h2><span id="配置工程">配置工程</span></h2><p>打开某一个project，就用之前在<a href="https://rorschachchan.github.io/2018/05/25/Gitlab-Jenkins搭建持续集成系统/" target="_blank" rel="noopener">https://rorschachchan.github.io/2018/05/25/Gitlab-Jenkins搭建持续集成系统/</a> 这个文章里用到的jicheng-test，因为它已经跟gitlab集成了，所以只要gitlab有commit变化，就会webhook到jenkins进行操作。</p><p>配置jicheng-test，选择<code>构建</code>这个标签页。在<code>增加构建步骤</code>选择<code>Invoke Ansible Ad-Hoc Command</code>，这里我为了做实验随便写了一点命令，如图：<br><img src="/images/jenkinsansible4.png" alt="akb48"></p><p>上面的配置就是先让jenkins输出<code>这个是来自jenkins机器的信息！！</code>，然后启动ansible，对<code>/etc/ansible/hosts</code>里的所有ip机器执行<code>hostname</code>和<code>cd /mnt ; echo &quot;我是你大爷！&quot; &gt;&gt; 321.txt</code>这两个命令。</p><h2><span id="测试结果">测试结果</span></h2><p>前文说了，这个jicheng-test已经做了<code>gitlab+jenkins</code>的配置，所以只要在代码服务器的git文件夹里，执行commit，代码被push到gitlab服务器上的同时也会触发jenkins打包。</p><p>于是操作如图：<br><img src="/images/jenkinsansible5.png" alt="akb48"></p><p>在gitlab的网页端查看代码已经上传：<br><img src="/images/jenkinsansible6.png" alt="akb48"></p><p>再去jenkins里确认是否被成功触发了：<br><img src="/images/jenkinsansible7.png" alt="akb48"></p><p>这次操作显示蓝灯，就是OK，点击选择控制台输出，查看一下执行细节：<br><img src="/images/jenkinsansible8.png" alt="akb48"></p><p>效果达到！试验成功！</p><p>如果需要回滚，就在jenkins新建一个与gitlab相连的project，切换gitlab的分支，然后重新commit，触发jenkins打包并且ansible部署即可。</p><h2><span id="故障排错">故障排错</span></h2><p>可能在jenkins集成的时候出现如下错误:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码服务器ip| UNREACHABLE! =&gt; &#123;</span><br><span class="line">   &quot;changed&quot;: false, </span><br><span class="line">   &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Host key verification failed.\r\n&quot;, </span><br><span class="line">   &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是因为jenkins在执行ansible是通过jenkins用户去操作的，虽然我们在安装ansible那一步的时候已经构建了服务器之间的ssh关系，但是那只是root用户的，所以如果没配置jenkins用户的ssh免密码登录，那么<code>sudo su -s /bin/bash jenkins</code>切换到jenkins用户在<code>ssh jenkins@目标IP</code>这一步的时候，会出现如下的提示：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;目标IP(目标IP)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:Nerx/EZH+ul0/qeb21+ii5EctQ0mO8hijIDlAWEGje8.</span><br><span class="line">ECDSA key fingerprint is MD5:6e:d8:6d:17:ca:79:9c:5e:bc:7e:9e:e6:33:41:08:25.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>因为ansible不会主动帮你输入yes，所以还需要在jenkins用户下把<code>id_dsa.pub</code>文件添加到代码服务器的<code>authorized_keys</code>里，制作一个ssh免密码登录。如果这时候你手动执行一下<code>ssh jenkins@目标IP</code>并且输入yes之后，再重新构建这个project就会发现错误变样了：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码服务器ip | UNREACHABLE! =&gt; &#123;</span><br><span class="line">   &quot;changed&quot;: false, </span><br><span class="line">   &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, </span><br><span class="line">   &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原因还是上面的话，由于目标机器上是没有jenkins这个用户的，所以自然也不会存在登录密码，即使用了jenkins用户制作了<code>authorized_keys</code>也是没用，所以需要指定ssh到目标IP的用户，如果是ansible的命令就是<code>ansible all -i /etc/ansible/hosts -u root -m shell -a &quot;具体的shell命令&quot;</code>，但是jenkins里配置root的地方很难找，所以就可以在<code>/etc/ansible/hosts</code>里更改一下，改成如下的样子：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目标ip地址 ansible_ssh_user=root#指定用root用户登录到目标IP，</span><br></pre></td></tr></table></figure></p><p>这样执行命令就没有障碍了，不过root用户权限过大，实际生产环境还是建立一个更加保险的账号最佳。</p>]]></content>
    
    <summary type="html">
    
      gitlab提交版本信息，触发jenkins打包，然后ansible直接部署，三位合一，滚也好滚
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="jenkins" scheme="http://yoursite.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>阿里云centos7升级内核到4.17过程</title>
    <link href="http://yoursite.com/2018/06/11/%E9%98%BF%E9%87%8C%E4%BA%91centos7%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/06/11/阿里云centos7升级内核过程/</id>
    <published>2018-06-11T02:25:59.000Z</published>
    <updated>2018-06-11T05:55:05.645Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>docker对内核的支持要求很高，详情可以看：<a href="https://www.szyhf.org/2017/01/07/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8Ecentos%E5%86%85%E6%A0%B8%E9%97%AE%E9%A2%98/#comment-54" target="_blank" rel="noopener">https://www.szyhf.org/2017/01/07/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8Ecentos%E5%86%85%E6%A0%B8%E9%97%AE%E9%A2%98/#comment-54</a> 。文中也有阿里云容器的工程师亲自回复的升级内核的方法，不过他那套是升级内核到<code>4.4</code>，现在已经是<code>4.17</code>了，这里写一下如何升级到最新内核的过程。</p><p>而阿里云默认的centos7的内核是3.10的，如图：<br><img src="/images/neihe1.png" alt="paradin"></p><p>首先，安装elrepo的yum源，命令如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ23pg8sy5bZ ~]#rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">[root@iZ23pg8sy5bZ ~]#rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm                                                                                                   </span><br><span class="line">Retrieving http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br><span class="line">Retrieving http:<span class="comment">//elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span></span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:elrepo-release-7.0-3.el7.elrepo  ################################# [100%]</span><br></pre></td></tr></table></figure></p><p>其次是安装最新的主线稳定内核，命令是<code>yum -y --enablerepo=elrepo-kernel install kernel-ml</code>，在一顿噼里啪啦之后，就会出现如下的字样，提示我们已经安装了4.17的kernel内核了：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Downloading packages:</span><br><span class="line">kernel-ml-4.17.0-1.el7.elrepo.x86_64.rpm                                                                                                                                   |  45 MB  00:00:03     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">Warning: RPMDB altered outside of yum.</span><br><span class="line">  Installing : kernel-ml-4.17.0-1.el7.elrepo.x86_64                                                                                                                                           1/1 </span><br><span class="line"> Verifying  : kernel-ml-4.17.0-1.el7.elrepo.x86_64                                                                                                                                           1/1 </span><br><span class="line">Installed:</span><br><span class="line"> kernel-ml.x86_64 0:4.17.0-1.el7.elrepo                                                                                                                                                          </span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure></p><p>centos7内核升级完毕后，还需要我们修改内核的启动顺序，<code>vim /etc/default/grub</code>，修改一处地方：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class="line">GRUB_DEFAULT=saved#把这里的saved改成0</span><br><span class="line">GRUB_DISABLE_SUBMENU=true</span><br><span class="line">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb quiet net.ifnames=0&quot;</span><br><span class="line">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br><span class="line">~</span><br></pre></td></tr></table></figure></p><p>接下来还需要运行grub2-mkconfig 命令来重新创建内核配置，命令是<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>，如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: /boot/vmlinuz-4.17.0-1.el7.elrepo.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-4.17.0-1.el7.elrepo.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-693.2.2.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-693.2.2.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-0-rescue-f0f31005fb5a436d88e3c6cbf54e25aa</span><br><span class="line">Found initrd image: /boot/initramfs-0-rescue-f0f31005fb5a436d88e3c6cbf54e25aa.img</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>执行完毕之后，回到阿里云控制台重启一下这个机器，然后查看一下内核情况：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br><span class="line"><span class="number">4.17</span><span class="number">.0</span><span class="number">-1.</span>el7.elrepo.x86_64</span><br></pre></td></tr></table></figure></p><p><img src="/images/ronaldogoal1.gif" alt="akb48" title="罗纳尔多在98年世界杯半决赛对荷兰的进球"></p>]]></content>
    
    <summary type="html">
    
      操作之前一定要先打镜像，不然出现其他问题，本人概不负责...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="内核" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Grafana配置smtp邮件</title>
    <link href="http://yoursite.com/2018/06/06/Grafana%E9%85%8D%E7%BD%AEsmtp%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/06/06/Grafana配置smtp邮件/</id>
    <published>2018-06-06T11:05:43.000Z</published>
    <updated>2018-06-14T01:32:10.124Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="配置smtp">配置smtp</span></h2><p>如果要通过grafana接收告警邮件，都需要配置邮箱。而相关配置文件就是<code>grafana.ini</code>，分别要修改如下几个地方：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#################################### SMTP / Emailing ##########################</span><br><span class="line">[smtp]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">host = smtp<span class="number">.163</span>.com:<span class="number">465</span></span><br><span class="line">user = 邮箱前缀@<span class="number">163.</span>com</span><br><span class="line"># If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""</span><br><span class="line">password = 客户端授权密码</span><br><span class="line">;cert_file =</span><br><span class="line">;key_file =</span><br><span class="line">skip_verify = <span class="literal">true</span></span><br><span class="line">from_address = 邮箱前缀@<span class="number">163.</span>com</span><br><span class="line">from_name = Grafana</span><br><span class="line"># EHLO identity in SMTP dialog (defaults to instance_name)</span><br><span class="line">;ehlo_identity = dashboard.example.com</span><br><span class="line">#################################### Alerting ############################</span><br><span class="line">[alerting]</span><br><span class="line"># Disable alerting engine &amp; UI features</span><br><span class="line">;enabled = <span class="literal">true</span></span><br><span class="line"># Makes it possible to turn off alert rule execution but alerting UI is visible</span><br><span class="line">execute_alerts = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>我采用了网易邮箱，把文件保存退出之后，重启一下<code>grafana-server</code>。然后在页面的alatm页面里配置<code>Notification channels</code>，如图：<br><img src="/images/grafanasmtp3.png" alt="paradin"></p><p>如果发送不成功，去查看一下日志，日志地址是<code>/var/log/grafana/grafana.log</code>。如果发送成功了，那么邮箱会收到这样的一个邮件：<br><img src="/images/grafanasmtp4.png" alt="paradin"></p><h2><span id="邮箱密码问题问题">邮箱密码问题问题</span></h2><p>这里要注意几个问题！</p><ol><li>阿里云的服务器出于安全考虑默认是不会开放25端口的，如果你非要用阿里云的服务器去打开25端口，请移步<a href="https://www.alibabacloud.com/help/zh/doc-detail/56130.htm" target="_blank" rel="noopener">https://www.alibabacloud.com/help/zh/doc-detail/56130.htm</a> ；</li><li>如果不想麻烦阿里云那么就要使用其他端口，比如我配置文件里面写的加密的465端口，这个端口不能使用登陆邮箱的普通密码，而是需要填写“授权码”；</li><li>以网易邮箱为例，首先先要打开<code>POP3/SMTP服务</code>，如图：<br><img src="/images/grafanasmtp1.png" alt="paradin"></li></ol><p>其次然后在<code>客户端授权密码</code>里设置一个新的密码，如图：<br><img src="/images/grafanasmtp2.png" alt="paradin"></p><p>然后把这个授权码填写到<code>grafana.ini</code>里，填邮箱的登录密码是错误的。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.kubiops.com/blog/2017/02/27/Grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">http://www.kubiops.com/blog/2017/02/27/Grafana%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE.html</a></p><p><img src="/images/马夏尔1.gif" alt="akb48" title="马夏尔在底线的标准操作"></p>]]></content>
    
    <summary type="html">
    
      不仅是告警，grafana就是新建用户都要用邮箱邀请注册
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="grafana" scheme="http://yoursite.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab给分支设定权限</title>
    <link href="http://yoursite.com/2018/06/06/Gitlab%E7%BB%99%E5%88%86%E6%94%AF%E8%AE%BE%E5%AE%9A%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2018/06/06/Gitlab给分支设定权限/</id>
    <published>2018-06-06T06:41:09.000Z</published>
    <updated>2018-06-06T11:39:21.177Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>给gitlab的各位开发设置权限是很重要的，不然他们就可能会偷偷的把执行分支合并甚至<code>git pull</code>来破坏线上环境。</p><p>首先先确定在project下各位人员的身份，在<code>设置（setting）</code>–<code>成员(members)</code>里面，可以看到projects现有的用户和用户组，如图：<br><img src="/images/gitlab29.png" alt="akb48"></p><p>由于我这个gitlab已经是汉化版的了，这里做一个简单的中英对比：<code>Master</code>是“主程序员”、<code>Developer</code>是“开发人员”、<code>Reporter</code>是“报告者”，这个身份只有读权限可以创建代码片段，一般来说都给测试人员，而<code>Guest</code>就是“访客”了，它只能提交问题和评论。</p><p>然后再到<code>版本库（Repository）</code>里选择<code>保护分支（Protected Branches）</code>，如图：<br><img src="/images/gitlab31.png" alt="akb48"></p><p><code>Allowed to merge</code>就是分支合并权限，<code>Allowed to push</code>就是推送权限，这两个可以根据不同人的身份进行控制。如果受保护，除了master权限的人员，其余人都不可以push、delete等操作。默认情况下<code>master</code>分支是处于被保护状态下的，<code>developer</code>角色的人是无法提交到<code>master</code>分支的。</p><p>如果是docker的话，那么gitlab权限问题修复会用到如下命令：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab update-permissions</span><br><span class="line">docker restart gitlab容器的ID</span><br></pre></td></tr></table></figure></p><p><img src="/images/curry3p4.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      这几天边吃瓜边关注崔永元和冯小刚、刘震云的爱恨情仇
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>解决Waiting(TTFB)过长的问题</title>
    <link href="http://yoursite.com/2018/06/04/%E8%A7%A3%E5%86%B3Waiting-TTFB-%E8%BF%87%E9%95%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/04/解决Waiting-TTFB-过长的问题/</id>
    <published>2018-06-04T08:51:13.000Z</published>
    <updated>2018-06-04T10:22:57.314Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="正文">正文</span></h2><p>电商平台整套系统是从上海商派公司（ecshop）那里购买的整套代码，结合我们公司自己的二开功能的3.0版本在上周几经波折终於部署上去了，经过了一个周末之后，今天市场运营的人在微信群里叫：“官方网站打开速度好慢。”果然整个官网首页要5~6秒钟才打得开，这个显然是不能忍受的，使用F12查看细节，发现<code>Waiting(TTFB)</code>的时间非常长，如图：<br><img src="/images/TTFB1.png" alt="akb48"></p><p>正常来说TFFB时间通常建议在200ms以下，如果超过推荐值，会引起队列中其他资源下载都跟着变慢。TFFB高主要有两个原因：一是客户端和服务器之前网络情况比较差；二是服务器应用响应比较慢；第三：重定向太多，重定向跟TFFB时间成正比。</p><p>于是乎检查网络情况以及各应用负载情况，都是OK的，重定向也很少。那么就减少DNS查询，把所有能用IP的地方都替换了域名，比如nginx的<code>localhost</code>里使用对应服务器的域名而不是127.0.0.1，比如在配置文件里的阿里云的数据库和redis都用IP地址替代。然而收效甚微，该慢依旧是慢。</p><p>这个时候就返回到后台去查看，左翻翻右翻翻，最后找到了这个地方，如图：<br><img src="/images/TTFB.jpg" alt="akb48"></p><p>启动全页缓存，一切就都好了…</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.oschina.net/question/244077_221319" target="_blank" rel="noopener">https://www.oschina.net/question/244077_221319</a></p>]]></content>
    
    <summary type="html">
    
      当你遇到一堆不听话的开发，就是这么辛苦
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维技术" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装zabbix3.4全过程</title>
    <link href="http://yoursite.com/2018/06/04/Centos7%E5%AE%89%E8%A3%85zabbix3-4%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/06/04/Centos7安装zabbix3-4全过程/</id>
    <published>2018-06-04T03:15:14.000Z</published>
    <updated>2018-06-06T12:30:56.614Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="安装zabbix-server-34">安装zabbix-server 3.4</span></h2><p>本文以<code>centos 7</code>为例。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service#关闭防火墙</span><br><span class="line">systemctl disable firewalld.service #开机不启动防火墙</span><br><span class="line">setenforce 0 #清空selinux的配置</span><br><span class="line">yum install mariadb-server mariadb –y</span><br><span class="line">systemctl enable mariadb#设置开机启动</span><br><span class="line">systemctl start mariadb#启动MariaDB</span><br><span class="line">rpm -Uvh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.5-1.el7.x86_64.rpm</span><br><span class="line">yum install zabbix-server-mysql zabbix-web-mysql -y</span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql-3.4.9/create.sql.gz  |mysql -uzabbix -pzabbix zabbix#这里是设定zabbix数据库账号密码和database的地方，create.sql.gz这个文件位置要根据实际情况来</span><br><span class="line">vim /etc/httpd/conf.d/zabbix.conf#这里要修改文件里的时区，改成Asia/Shanghai</span><br><span class="line">systemctl start zabbix-server</span><br><span class="line">systemctl enable zabbix-server</span><br><span class="line">setsebool -P httpd_can_connect_zabbix on</span><br><span class="line">setsebool -P httpd_can_cetwork_connect_db on</span><br><span class="line">systemctl start httpd </span><br><span class="line">systemctl enable httpd</span><br><span class="line">chkconfig zabbix_agent on</span><br><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure></p><p>然后就是在浏览器输入<code>外网IP/zabbix/</code>进行页面安装了，剩下的就不多写了。</p><h2><span id="安装zabbix-agent-34">安装zabbix-agent 3.4</span></h2><p>如果是<code>centos 6</code>:<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http:<span class="comment">//repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-1.el6.noarch.rpm</span></span><br><span class="line">yum install -y zabbix-agent</span><br><span class="line">chkconfig zabbix_agent on;service zabbix_agent start#如果不对就使使zabbix-agent</span><br></pre></td></tr></table></figure></p><p>如果是<code>centos 7</code>:<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http:<span class="comment">//repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.5-1.el7.x86_64.rpm</span></span><br><span class="line">chkconfig zabbix_agent on;service zabbix_agent start#如果不对就使使zabbix-agent</span><br></pre></td></tr></table></figure></p><h2><span id="其他资料">其他资料</span></h2><p><a href="https://www.kaijia.me/2014/11/zabbix-report-lack-of-free-swap-space-issue-on-server-without-swap-solved/" target="_blank" rel="noopener">https://www.kaijia.me/2014/11/zabbix-report-lack-of-free-swap-space-issue-on-server-without-swap-solved/</a></p><p><img src="/images/curry3p3.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      这一次好好记录。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>记录一次阿里云负载均衡端口监听不正确的过程</title>
    <link href="http://yoursite.com/2018/05/31/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AB%AF%E5%8F%A3%E7%9B%91%E5%90%AC%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/05/31/记录一次阿里云负载均衡端口监听不正确的过程/</id>
    <published>2018-05-30T19:49:06.000Z</published>
    <updated>2018-05-30T20:28:45.142Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在阿里云上新配置了一个负载均衡，后面挂载的服务器上安装了一个nginx，分别开启了80端口和8080端口，其中80端口是给http访问的，8080端口是给https访问的，同时在8080端口上做了http跳转https的配置。</p><p>但是在负载均衡配置完毕之后，发现tcp的80转8080是OK的，但是https的443转80却始终不OK，网页也自然打不开，但是在nginx上看80端口的确是在stand by：<br><img src="/images/alislb1.png" alt="paradin"></p><p>而且安全组都做了配置，telnet端口也是完全没有问题的，如图：<br><img src="/images/alislb2.png" alt="paradin"></p><p>执行了一下<code>time curl -I -X HEAD SLB的域名  -x http://本机IP地址:80</code>看一下效果，如图：<br><img src="/images/alislb3.png" alt="paradin"></p><p>可见命令执行OK，但是耗时需要7秒，而默认的阿里云SLB在https监听的超时时间设定是5秒，怀疑是后端ECS上对head头响应慢导致的健康检查失败。然后在网页上使用“检查”功能，发现有几个js、css文件耗时很长，于是就叫前端的码农们配合查一下，在几位前端吭哧吭哧解决了这个问题之后，https访问恢复正常。</p><p><img src="/images/jpbook3.jpg" alt="paradin" title="霓虹书店一角，我表示只能看得懂图"></p>]]></content>
    
    <summary type="html">
    
      插播一句题外话，阿里云的SLB不用特别配置WS/WSS，但是必须要将实例升级为性能保障型实例，不然的话就GG
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>苹果手机无信用卡注册区美国apple store的办法</title>
    <link href="http://yoursite.com/2018/05/30/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E6%97%A0%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%B3%A8%E5%86%8C%E5%8C%BA%E7%BE%8E%E5%9B%BDapple-store%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/30/苹果手机无信用卡注册区美国apple-store的办法/</id>
    <published>2018-05-30T12:14:46.000Z</published>
    <updated>2018-05-30T20:11:25.876Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这次去霓虹国在心斋桥Apple体验店买了一个256G的iphone X，由于政府政策的原因，中国区的apple store有很多应用是没有的，于是乎我就打算注册一个美国版的账号，从而登录美国版的apple store去下载那些“你懂得”的app。</p><p>首先先登录<code>https://www.apple.com/</code> ，在网页最下面先确定国家是<code>United States</code>，然后点击<code>Manage Your Apple ID</code>，如图：<br><img src="/images/apple1.png" alt="paradin"></p><p>在<code>https://appleid.apple.com/#!&amp;page=signin</code>页面里，点击<code>Create your Apple ID</code>建立一个新的apple账号，名称正常写，国家还是<code>United States</code>不要动，生日如实填写，但是如果是未成年人的话，有些成人的app是不可以被下载的。然后就是写好自己的登陆问题，这个问题已经要记住，每次登陆都要输入，忘记的话就麻烦了。注册账号这里其他部分我就不多说了。</p><p>账号注册完毕之后，就直接在苹果网站上登录，登录之后，就会看到账号的详细信息，在<code>Payment &amp; Shipping</code>的地方点击<code>Add Payment Method…</code>，如图：<br><img src="/images/apple2.png" alt="paradin"></p><p>这里有一个<code>PAYMENT METHOD</code>的地方，要填写<code>none</code>，如果你用apple手机上登录这个账号的话，这里是不能选none的，无论是<code>Dr.</code>还是<code>Mr.</code>都没有none这个选项，所以说一定要在网页登录账号。然后就是需要你填写一些用户地址、邮编等信息，由于是账号注册时候选择的是美国，那么也需要填写美国的地址，可以在<code>http://www.haoweichi.com/Index/random</code>里生成一个身份信息填写。如图：<br><img src="/images/apple3.png" alt="paradin"></p><p>下面那个<code>SHIPPING ADDRESS</code>就是账单邮寄的地址，想填就填，不想填就放那。填写好了之后点击save，但是目前这个账号还是不能通过的，如果你在apple手机登录了这个账号然后登录apple store的话，会有一个提示：<code>该账号没有被使用过，请填写细节</code>。</p><p>这里如果你还手机上操作填写细节，发现你刚刚在电脑上填写的地址和邮编已经同步到手机的账号了，但是支付卡那一栏还是没有<code>none</code>，也就是说依旧要一个信用卡。此时请在电脑上下载itunes，然后在电脑的itunes里登录这个美国区账号，由于电脑itunes里的支付渠道依旧可以选择none，所以我们可以在这里绕一个弯，使用itunes这个渠道来完成这个美国区账号的彻底注册。</p><p>在itunes把整个账号完整过程都注册完毕之后，再登录到手机端，就可以在美国的apple store里尽情的下载app了！<br><img src="/images/apple4.jpg" alt="paradin"></p>]]></content>
    
    <summary type="html">
    
      现在的我离开了twitter和line简直不能活...
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="apple" scheme="http://yoursite.com/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title>超赞的京都大阪五日游</title>
    <link href="http://yoursite.com/2018/05/25/%E8%B6%85%E8%B5%9E%E7%9A%84%E4%BA%AC%E9%83%BD%E5%A4%A7%E9%98%AA%E4%BA%94%E6%97%A5%E6%B8%B8/"/>
    <id>http://yoursite.com/2018/05/25/超赞的京都大阪五日游/</id>
    <published>2018-05-25T07:34:25.000Z</published>
    <updated>2018-05-28T01:24:33.709Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>说来惭愧，活了30年了这是我第一次出国旅行，借着公司有一次旅游的机会就跟女朋友一起到京都和大阪玩5天。</p><p>搞定了签证，在网上买好了USJ的快速通行票，又预定了随身WIFI，简单在穷游、知乎和马蜂窝上做了做自由行的攻略，18号晚上6点半从杭州萧山机场出发，两个小时后到达关西机场。之前在《miss pilot》里看到过ANA的航空，这一次亲自乘坐感觉还是不错，飞机场有吃有玩还有葡萄酒喝。</p><p>到关西机场之后，又按指纹又照相的通过了一连串的海关检查，就跟公司其他小伙伴兵分两路，他们去奈良看鹿，我跟女票直接去京都。凭借女票的三脚猫日语功力和她已经来过大阪的经验，我俩先办理了地铁卡，购买了一日游行卡，然后坐上了从大阪出发到京都。</p><p>从大阪到京都大约花了一个半小时左右，抵达京都已经是晚上11点了。路上下着细细小雨，再加上两人拖着箱子有点肚饿，就在路边的seven-eleven里简单买了一点水和东西，买东西之余发现在超市里有成人书籍出售。从便利店出来顺着google地图找之前在爱彼迎上预订的民宿，那是一个公寓型民宿，凭借店主之前在邮件里写的密码，我们从信箱里拿到房间钥匙。</p><h2><span id="日本的庙">日本的庙</span></h2><p>京都是一个充满寺庙和神社的地方，京都的旅行就是“从这个庙出来，到下一个庙去”，而清水寺正是京都众多庙里人气很旺的景点之一，日本的庙和神社有一个习惯，入寺前先用竹勺洗手，如果要入室参拜的话还要脱鞋。在京都穿和服是一个很常见的事情，而且我觉得一群人穿和服是一个蛮cool的风景，不过女票没有租，但是在寺里买了很多的御守。</p><p>昨晚到京都太晚，无法注意天空，到了白天才发现京都的天真的很蓝，看见远方的山轻而易举。从清水寺出来下一站是八坂神社，巧的是遇到了一对新婚夫妇在这里结婚拍照，不得不说日本新郎传统的黑和服加扇子的形象还是很帅的。</p><h2><span id="日本的玩">日本的玩</span></h2><p>水族馆一直都是我非常喜欢的地方，而大阪海游馆也是这一次游玩里安排的一个重要环节，但是比较让我失望的是它的海底隧道很短，大约也就杭州水族馆的一半长度。我俩没有看到喂食节目，而且海游馆也没有海豹顶球，海豚跳舞这样的节目。不过海游馆的鱼种类还是很多的，有些品种还可以亲手去摸一摸它们。出了海游馆就是一个蛮大的摩天轮，用一日通票的话可以免费上去坐一圈。</p><p>大阪的USJ是我们这次日本之行的最后一站也是最高潮的部分，去年圣诞节我跟女票在上海的迪士尼度过的。从迪士尼回来就一直碎碎念大阪的环球影城，我俩还特意挑选了一个工作日去玩就是为了尽可能的少排队，但是那天依旧很多很多人，真的超火爆。</p><p>环球影城的运营模式跟迪士尼差不多，通过IP分主题区，可以购物也有花车游行。但是整个乐园的玩法相对单一—-都是过山车：哈利波特是过山车、蜘蛛侠是过山车、小黄人是原地晃晃过山车、侏罗纪公园是水上过山车，至于翼龙飞行和好莱坞美梦更是超刺激的过山车…</p><p>这一次环球影城的特殊项目有四个：怪物猎人、美少女战士（看动画片）、柯南（密室逃脱）和最终幻想。我跟女票还有公司同事都选择了柯南，虽然通篇日语对白，不过还是能猜出来一个大概剧情，所以一个半小时玩下来感觉就像看了一遍柯南的剧场版，里面的解密就不剧透了，机关真的很难，想要在一个小时内完全逃脱几乎是一个不可能的任务。</p><p>上面把正经的娱乐说完了，下面来说一点不正经的娱乐。我和女票在大阪住在日本桥地铁站附近，那里距离道顿堀走路也就10分钟的路程，而道顿堀附近有一个街叫宗右卫门町，那里就是大阪有名的牛郎街，一路走过去各种牛郎宣传大海报和在路边搭讪的小哥，甚至那附近的小吃店里还有牛郎哥的宣传单。除了铺天盖地的牛郎哥哥外还有站街的妹妹，大多数都是黄发浓妆，但是仔细看脸都不算太好看的。这些人会跟过往的单身男女搭讪，邀请他们去店里坐坐喝点酒说说话，至于有没有更进一步的皮肉关系，那就不好说了。而且据说他们是不做不懂日语人的生意的，所以如果他们真的纠缠你了，就直接说我是外国人就好。</p><h2><span id="日本的购物">日本的购物</span></h2><p>到了日本，买东西是必然的。不过当地的大商场关门很早，基本晚上八点半左右就开始关门。在伏见稻荷大社甚至有的商铺五点半就打烊了，我很好奇，商场这么早关门，那日本人晚上的娱乐是什么呢？他们除了去居酒屋喝酒和广场溜达再加上回家看电视难道就没有其他的娱乐了吗？</p><p>不过，各大药妆店的营业时间很晚，甚至唐吉坷德是24小时营业。这种地方里充满了大陆人、香港人、台湾人、韩国人还有泰国人，在人群和背包中穿梭，拎着篮子买买买，买到5000就可以退税。我女票这次买了很多的卸妆水乳液面膜眼霜口红还有零食，作为一个在旁边无事可做的男人，深深地觉得陪女人逛街是一个很遭罪的事情。</p><h2><span id="日本的吃">日本的吃</span></h2><p>我是看过《深夜食堂》和《孤独的美食家》的，所以对日本的食物有一点好感，而且在杭州吃到日本料理也不是一个难事。不过这次到了日本，连续吃了五天当地的饭，发现日本的菜其实很单一。</p><p>日本普通的餐就是“米饭+猪肉\牛肉\鸡肉+沙拉+味增汤”，日本的米饭是很好吃的，但是他们的肉做法基本就是炸，炒是很少的。如果不是米饭的话就是炒面、拉面、寿司或者是煎饺。期间我跟女票吃了一次烤肉，里面有“最强牛里脊和牛肠”给我留下了很深的印象。此外在海游馆还吃到了我梦寐已久的大阪烧，插播一句话，吃大阪烧的时候还看到足球运动员郑大世，我女票一眼就认出他来了…</p><p>日本的消费能力不低，五天下来，基本上每一顿饭都大约花费了3000多日元，在吉野家吃算比较便宜的，2000不到就能搞定。在烤肉店要了套餐，每人是5000日元。这次在日本，觉得最好吃的是牛里脊，然后就是烤蟹壳。</p><p>说完了吃再说说喝，大阪和京都随处可见自动售卖机，售卖机里面基本就是五样饮品—水、绿茶、优酸乳、可乐和咖啡，价钱还都差不多。日本的水果很贵，一个不到6斤重的西瓜就要2200日元左右，橘子大约五块钱一个，但是他们的酒却相比较便宜。在日本我可没少喝梅子酒、气泡果酒和啤酒。</p><h2><span id="日本的电视">日本的电视</span></h2><p>我俩住的民宿有一个小电视，里面有12个频道，其中三个是购物频道…我想可能日本的免费电视就这么点，大多数都是收费频道。这九个电视台白天有新闻，有韩剧，有街头采访；晚上有芭蕾舞片段、有综艺节目、还有打着圣光的肉番！说到综艺节目，里面有一个片段就是把秃头用毛巾擦的锃亮，然后用遥控板去对着秃头摁键，结果信号经过秃头的折射，竟然能顺利的操纵电视。再后来叫来两个秃头，尝试多次折射，依旧可以准确遥控电视…就这么一个环节把我之前从来不看日本综艺节目的同事笑翻了，回国后就开始恶补这种日本综艺。</p><h2><span id="游玩的tips">游玩的tips</span></h2><p>1.日本路边的垃圾箱很少，据说是因为他们没有边走路边吃喝东西的习惯，所以随处带一个塑料袋来装垃圾；<br>2.USJ的快速通行证只有日语区的页面才有，请准备好visa和master卡；<br>3.办理的地铁充值卡不要扔，下一次再来日本，直接储值依旧可以使用；<br>4.到了USJ别上来先买东西，要先排队玩，东西可以放到最后出院的时候再买；<br>5.不会日语在一般情况下没问题，但是如果看不懂车站的话，就难免要问路了，这样会比较头疼，准备一个google翻译。<br>6.champion在日本的地摊也有卖，人民币大约100多，所以淘宝上那些200左右的champion完全不需要考虑…</p><h2><span id="这次的遗憾">这次的遗憾</span></h2><p>这次玩的蛮爽的，但是大阪仅仅只有三天只能玩一个皮毛，比如本次出游的遗憾如下：</p><p>1.据说大阪有一个棒球场，20日元一个球，然后通过发球机器发射，游客可以轮棒尝试一下本垒打的快感，但是由于时间太紧没有打上棒球…<br>2.没有去游戏机厅，以前常在漫画里看到日本有那种弹子机，如果赢的多，可以用塑料筐装满小弹子去换钱，这种游戏机厅在大阪的商场很常见，而且门口都有大广告，上面写“新品到店，欢迎畅玩”；<br>3.在龟梨和也和山下智久主演的《我命中注定的人》里，龟梨和也手工雕刻了一个王将的木牌，这次到了大阪逛了很多店，都没有发现这款木雕，不仅没有这个木雕，连战国时期各大将的头盔纺织品也没有看到，这一点很遗憾；<br>4.USJ里的变形金刚和终结者2都暂时停业，不过我后来在B战上看了视频，还是过山车…</p><p>等下一次如果有机会能去东京的话，就尝试把上面几个弥补上，再顺便去一趟秋叶原。</p>]]></content>
    
    <summary type="html">
    
      这五天在日本走了两个完全不同的城市
    
    </summary>
    
      <category term="坠乱花天" scheme="http://yoursite.com/categories/%E5%9D%A0%E4%B9%B1%E8%8A%B1%E5%A4%A9/"/>
    
    
      <category term="日本" scheme="http://yoursite.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
      <category term="旅游" scheme="http://yoursite.com/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab+Jenkins搭建持续集成系统</title>
    <link href="http://yoursite.com/2018/05/25/Gitlab-Jenkins%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/05/25/Gitlab-Jenkins搭建持续集成系统/</id>
    <published>2018-05-25T07:33:46.000Z</published>
    <updated>2018-06-13T11:41:48.226Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>gitlab是一个应用很广泛的版本控制工具，他也有自带的持续集成工具—<code>gitlab cli</code>，但是这个工具不如jenkins那么好用。本文的目的要把gitlab和jenkins进行结合，当我们更新了代码并且把代码push到gitlab的时候，gitlab会把代码的变化通知到jenkins，然后jenkins就会自动构建project。</p><p>说一下实验环境：<br>Jenkins所在服务器IP：121.41.37.251(10.168.173.181)，版本是<code>2.124</code>(查看jenkins的版本语句<code>java -jar /usr/lib/jenkins/jenkins.war --version</code>);<br>Gitlab所在服务器IP：114.55.224.158(10.25.85.175)，使用容器安装，版本是<code>10.7.3</code>;</p><h2><span id="jenkins添加gitlab插件">jenkins添加gitlab插件</span></h2><p>通过浏览器登陆jenkins界面，然后在<code>系统管理</code>里面选择<code>管理插件</code>，如图：<br><img src="/images/gitlabjenkins1.png" alt="akb48"></p><p>然后在<code>可选择插件</code>里搜索<code>gitlab hook</code>插件，但是没想到我这个版本提示”目前的1.4.2版本的<code>gitlab hook</code>目前存在安全隐患”，如图：<br><img src="/images/gitlabjenkins2.png" alt="akb48"></p><p>具体的安全隐患细节是这样的：<br><img src="/images/gitlabjenkins3.png" alt="akb48"></p><p>这个风险请自己把握，然后我选择了继续安装，如图：<br><img src="/images/gitlabjenkins4.png" alt="akb48"></p><p>安装完了<code>gitlab hook</code>插件后，还要安装<code>GitLab Plugin</code>和<code>Gitlab Authentication plugin</code>这两个插件，方法跟上面的一样。</p><h2><span id="创建测试工程">创建测试工程</span></h2><p>在jenkins上建立一个新的任务，比如叫<code>jicheng-test</code>，这是一个<code>自由风格的软件项目</code>：<br><img src="/images/gitlabjenkins6.png" alt="akb48"></p><p>然后在源码管理里面选择git，然后输入gitlab里面仓库的地址，比如我在gitlab上新建了一个project叫<code>jenkinstest</code>，那么就复制这个仓库的地址填到jenkins的<code>Repositories</code>里，如图：<br><img src="/images/gitlabjenkins8.png" alt="akb48"></p><p>还要在<code>Credentials</code>这里面写上gitlab的用户和密码，然后保存即可：<br><img src="/images/gitlabjenkins9.png" alt="akb48"></p><h2><span id="配置-gitlab-用户">配置 GitLab 用户</span></h2><p>浏览器切换到gitlab界面，在用户头像点击，<code>User settings</code> —&gt; <code>Access Tokens</code>，这里的<code>Personal Access Tokens</code>写入一个账号，这个账号是用来让Jenkins和GitLab API交互。这个用户将需要是全局的管理员或添加进每个组／工程，并作为成员。需要开发者权限来报告构建状态。如图：<br><img src="/images/gitlabjenkins5.png" alt="akb48"></p><p>输入账号和账号有效时期之后，会生成一个Private token，如图：<br><img src="/images/gitlabjenkins7.png" alt="akb48"></p><p>拷贝它，稍后在配置Jenkins服务器时会用到。</p><h2><span id="配置-jenkins-服务器">配置 Jenkins 服务器</span></h2><p>需要配置 Jenkins 服务器来与 GitLab 服务器通信。</p><p>在 Jenkins 中，选择<code>系统管理</code> -&gt;<code>系统设置</code>，在系统设置中找到GitLab的部分：<br><img src="/images/gitlabjenkins10.png" alt="akb48"></p><p>在<code>Connection name</code>后的输入框中输入连接名称，在<code>Gitlab host URL</code>后的输入框中输入GitLab服务器的URL地址。点击<code>Credentials</code>行最后面的<code>Add -&gt; Jenkins</code>按钮，弹出如下对话框，在Kind 后的下拉列表中选择<code>GitLab API token</code>，并把上一步拷贝的<code>Private token</code>粘贴到<code>API token</code>后面的输入框中。<br><img src="/images/gitlabjenkins11.png" alt="akb48"></p><p>随后在<code>Credentials</code>的下拉框中选择<code>GitLab API token</code>。</p><h2><span id="配置-jenkins-工程">配置 Jenkins 工程</span></h2><p>来到刚刚建立的那个工程<code>jicheng-test</code>，点击<code>构建触发器</code>，先勾选<code>Build when a change is pushed to GitLab</code>，点击<code>高级</code>，然后再点击一下<code>Generate</code>就会生成一个<code>Secret Token</code>，如下：<br><img src="/images/gitlabjenkins12.png" alt="akb48"></p><p>点击左下角的<code>保存</code>按钮，保存前面所做的配置。这个时候要记录两个东西，一个是<code>Build when a change is pushed to GitLab</code>那一行中，<code>GitLab CI Service URL:</code>后面的 URL；还有一个就是刚刚生成的<code>Secret Token</code>，这俩在后面配置GitLab工程时需要用到。</p><h2><span id="配置-gitlab-工程">配置 GitLab 工程</span></h2><p>在gitlab进入那个叫<code>jenkinstest</code>的project，然后在<code>settings---&gt;Integrations</code>，在<code>URL</code>里填写刚刚记下来的<code>URL</code>，在<code>Secret Token</code>里填写刚刚记下来的<code>Secret Token</code>，如图：<br><img src="/images/gitlabjenkins13.png" alt="akb48"></p><p>然后点击下面绿色的<code>add webhook</code>，就会生成一个<code>Webhooks</code>，如图：<br><img src="/images/gitlabjenkins14.png" alt="akb48"></p><p>去代码服务器上提交一个commit，然后push到gitlab里，再返回到<code>Integrations</code>，对刚刚生成的<code>webhooks</code>点击<code>test</code>，选择<code>push events</code>，如图：<br><img src="/images/gitlabjenkins16.png" alt="akb48"></p><p>然后就会出现200的成功字样，如图：<br><img src="/images/gitlabjenkins15.png" alt="akb48"></p><p>如果你再点击一下test上面的edit，就会看到webhook最近调用情况，再点击view details的话，就会看到具体的调用细节，如图：<br><img src="/images/gitlabjenkins17.png" alt="akb48"></p><h2><span id="验证测试">验证测试</span></h2><p>此时我在代码服务器上做了一些简单的改动，然后重新把代码push到gitlab服务器上，在jenkins里的相关project里，就会看到已经自动开始build了，如图：<br><img src="/images/gitlabjenkins18.png" alt="akb48"></p><p>再在具体的某次build里选择<code>控制台输出</code>，就会看到构建的详细过程，如图：<br><img src="/images/gitlabjenkins19.png" alt="akb48"></p><h2><span id="横向扩展">横向扩展</span></h2><p>如果是多个gitlab的project去对应同一个jenkins，那么需要在jenkins创建任务的时候就选择是<code>根据一个已经存在的任务创建</code>，如图：<br><img src="/images/gitlabjenkins21.png" alt="akb48"></p><p>在这里写上作为模板的任务的名称，然后在新生成的任务<code>配置</code>的<code>源码管理</code>里添加一个新的<code>Repositories</code>，如图：<br><img src="/images/gitlabjenkins20.png" alt="akb48"></p><p>如果想要限制分支的话，就要更改<code>Branches to build</code>，现在默认是“只要master分支有push就会触发jenkins构建”。然后再回到gitlab的新project里，进入<code>Integrations</code>，输入<code>配置 Jenkins 工程</code>那个环节里的<code>URL</code>就OK了，<code>Secret Token</code>不用单独填写，因为在复制任务那一步的时候直接把<code>Secret Token</code>全部拷贝过来了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.cnblogs.com/bugsbunny/p/7919993.html" target="_blank" rel="noopener">http://www.cnblogs.com/bugsbunny/p/7919993.html</a><br><a href="https://www.wolfcstech.com/2018/03/26/gitlab_trigger_jenkins_build/" target="_blank" rel="noopener">https://www.wolfcstech.com/2018/03/26/gitlab_trigger_jenkins_build/</a></p>]]></content>
    
    <summary type="html">
    
      公司由于安全政策不让开发代码接触外网，只能用本地的gitlab去搭配jenkins部署
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="jenkins" scheme="http://yoursite.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用yum安装软件爆No such file or directory</title>
    <link href="http://yoursite.com/2018/05/17/%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E7%88%86No-such-file-or-directory/"/>
    <id>http://yoursite.com/2018/05/17/使用yum安装软件爆No-such-file-or-directory/</id>
    <published>2018-05-17T09:25:09.000Z</published>
    <updated>2018-05-17T11:03:29.837Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天开发反馈说<code>yum install redis</code>报错<code>-bash: /usr/bin/yum: /usr/bin/python: bad interpreter: No such file or directory</code>，于是我就登上服务器，使用python一看，反馈<code>-bash: python: command not found</code>，原来这个机器的python被人改动了，用<code>whereis python</code>查了一下，原来python的地址被人改成了<code>/usr/bin/python2.7</code>，于是就手动更改了一下<code>/usr/bin/yum</code>，把<code>#!/usr/bin/python</code>改成了<code>#!/usr/bin/python2.7</code>。但是使用<code>yum install -y redis</code>发现虽然可以连接到库但是会报<code>No such file or directory</code>，如图：<br><img src="/images/nofile.png" alt="paradin"></p><p>原来光改了<code>/usr/bin/yum</code>还没用，还要改<code>/usr/libexec/urlgrabber-ext-down</code>这个文件，同样也是把python改成<code>/usr/bin/python2.7</code>说明python的路径才可以。</p><p>改了上面两个文件之后，又加上了<code>yum clean all</code>和<code>yum makecache</code>，清除一下缓存，一切恢复了正常。</p><p><img src="/images/slamdunk.jpg" alt="paradin"></p>]]></content>
    
    <summary type="html">
    
      去日本旅游期间，我要电话不接、微信装死...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="yum" scheme="http://yoursite.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>使用zabbix去监控docker容器</title>
    <link href="http://yoursite.com/2018/05/17/%E4%BD%BF%E7%94%A8zabbix%E5%8E%BB%E7%9B%91%E6%8E%A7docker%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2018/05/17/使用zabbix去监控docker容器/</id>
    <published>2018-05-17T06:06:46.000Z</published>
    <updated>2018-05-17T11:35:27.993Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>现在容器技术越来越普遍，那么搭建了容器肯定要监控起来，监控方法有两种，一种是做一个zabbix-agent容器去监控容器，还有一个是升级原有的zabbix-agent，这里说第一种。</p><p>这里先交代一下环境：zabbix-server的ip是10.244.48.42，要监控的机器ip是10.244.34.79，这个机器里面装了一个容器在运行gitlab，如图：<br><img src="/images/gitlab20.png" alt="paradin"></p><p>事前检查两台服务器是否互通，而且10050和10051端口是否standby。还要在zabbix-server端做好<code>auto-discovery</code>，等等等等准备工作。</p><h2><span id="使用zabbix-agent-docker进行监控">使用Zabbix Agent Docker进行监控</span></h2><p>在10.244.34.79这个机器上先安装zabbix-agent容器：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name=dockbix \#这个是容器的名称</span><br><span class="line">  --net=host \#容器可以直接访问主机上所有的网络信息</span><br><span class="line">  --privileged \#容器内的root拥有真正的root权限</span><br><span class="line">  -v /:/rootfs \#这个是对应宿主机的映射盘</span><br><span class="line">  -v /var/run:/var/run \</span><br><span class="line">  --restart unless-stopped \ #不管退出状态码是什么始终重启容器，不过当daemon启动时，如果容器之前已经为停止状态，不要尝试启动它。</span><br><span class="line">  -e &quot;ZA_Server=10.244.48.42&quot; \#这里就填写zabbix-server的ip地址</span><br><span class="line">  -e &quot;ZA_ServerActive=10.244.48.42&quot; \</span><br><span class="line">  -d hub.c.163.com/canghai809/dockbix-agent-xxl-limited:latest#这里使用了网易蜂巢镜像</span><br></pre></td></tr></table></figure></p><p>但是反馈给我<code>docker: invalid restart policy unless-stopped.</code>这样的错误信息，原来这个gitlab这台服务器的docker版本较老，而<code>unless-stopped</code>这个是在1.9.0版本才加入的，所以对于旧版的docker环境需要改成<code>always</code>。</p><p>更改docker run的命令之后重新执行效果如下：<br><img src="/images/gitlab21.png" alt="paradin"></p><p>可见容器启动成功，<code>docker logs -f 容器ID号</code>看一下日志是否正常。如果正常的话，应该在zabbix-server端是可以看到这个10.244.34.79已经被添加到控制台里了，如图：<br><img src="/images/gitlab22.png" alt="paradin"></p><h2><span id="导入监控docker的模版">导入监控docker的模版</span></h2><p>在zabbix server上导入监控docker的模版，一共2个模版,下载后解压。模版下载地址: <a href="https://dl.cactifans.com/zabbix/Zabbix-Template-App-Docker.tar.gz" target="_blank" rel="noopener">https://dl.cactifans.com/zabbix/Zabbix-Template-App-Docker.tar.gz</a> 。</p><p>我使用主动模式，因此导入<code>Zabbix-Template-App-Docker-active.xml</code>这个模版，如图：<br><img src="/images/gitlab23.png" alt="paradin"></p><p><img src="/images/gitlab24.png" alt="paradin" title="将这个模板应用到10.244.34.79上"></p><p>此时可以去zabbix-server这个机器上验证一下是否监控成功，在zabbix-server上执行<code>zabbix_get -s 10.244.34.79 -k docker.discovery</code>，效果如下：<br><img src="/images/gitlab25.png" alt="paradin"></p><p>可见已经成功获取到了那两个容器的名称，这就代表zabbix-server已经监控到位了。</p><h2><span id="验证数据">验证数据</span></h2><p>首先现在10.244.34.79里执行<code>docker stats 容器1的ID 容器2的ID...</code>，看一下当前运行的所有容器的状态，如下：<br><img src="/images/gitlab26.png" alt="paradin"></p><p>与zabbix-server的<code>latest data</code>做一下对比，由于被监控机的docker版本较老，<code>docker stats</code>结果不是那么的精准，不过用来监控参考还是OK的…如果docker是最新版的，那么监控值是很准的。<br><img src="/images/gitlab28.png" alt="paradin" title="docker 18.04.0版本的stats跟zabbix获取值一致"></p><p>剩下的就是慢慢添加triggers了…</p><p>补充一句，<code>zabbix-agent 3.2</code>的rpm安装方法：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpm </span><br><span class="line">yum -y install zabbix-agent zabbix-sender</span><br><span class="line">service zabbix-agent start</span><br><span class="line">chkconfig zabbix-agent on</span><br></pre></td></tr></table></figure></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/monitoringartist/zabbix-docker-monitoring" target="_blank" rel="noopener">https://github.com/monitoringartist/zabbix-docker-monitoring</a> （墙裂推荐！）<br><a href="https://blog.codeship.com/ensuring-containers-are-always-running-with-dockers-restart-policy/" target="_blank" rel="noopener">https://blog.codeship.com/ensuring-containers-are-always-running-with-dockers-restart-policy/</a></p>]]></content>
    
    <summary type="html">
    
      dockbix会直接监控所有的运行容器
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab的配置备份</title>
    <link href="http://yoursite.com/2018/05/16/Gitlab%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2018/05/16/Gitlab配置备份/</id>
    <published>2018-05-16T07:02:50.000Z</published>
    <updated>2018-05-16T07:51:07.958Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我这个gitlab是容器安装的，直接使用最新的gitlab镜像，gitlab版本是<code>10.7.3</code>。</p><p>要备份数据的话，就要进入容器里，执行<code>gitlab-rake gitlab:backup:create</code>，效果如下：<br><img src="/images/gitlab19.png" alt="paradin"></p><p>执行完毕之后，在<code>/var/opt/gitlab/backups</code>文件夹里就会生成一个备份文件，我这里生成的文件叫：1526454102_2018_05_16_10.7.3_gitlab_backup.tar，这个就是备份的文件。</p><p>如果要还原的话，命令如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 先关闭连接数据库的进程</span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"># 通过指定时间戳来执行restore操作，这个操作会复写gitlab的数据库</span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1526454102 #BACKUP后面的是备份文件开头的那串数字</span><br><span class="line"></span><br><span class="line"># 再次启动gitlab</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"># 通过下面命令检查gitlab</span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure></p><p>注意！利用backup机制进行备份的话，对gitlab的版本是要求严格一致的。例如用8.6版的gitlab生成的备份文件，拿到8.7版的gitlab上进行恢复，是会报错的。</p><p>如果要设置这个备份文件的生命周期和备份文件存储的位置，编辑<code>/etc/gitlab/gitlab.rb</code>，修改如下的地方：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[&apos;backup_path&apos;] = &quot;/var/opt/gitlab/backups&quot;#这里改新路径</span><br><span class="line">gitlab_rails[&apos;backup_archive_permissions&apos;] = 0644#这里可以设定文件的权限</span><br><span class="line"># limit backup lifetime to 7 days - 604800 seconds</span><br><span class="line">gitlab_rails[&apos;backup_keep_time&apos;] = 604800#文件存储时间一周</span><br></pre></td></tr></table></figure></p><p>然后重启一下gitlab即可。</p>]]></content>
    
    <summary type="html">
    
      不备份，要是数据丢了就死翘翘了...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
</feed>
