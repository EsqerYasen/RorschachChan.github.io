<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-22T06:12:11.816Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Go语言结合阿里云API解绑绑定弹性公网IP</title>
    <link href="http://yoursite.com/2019/05/22/%E4%BD%BF%E7%94%A8Go%E8%AF%AD%E8%A8%80%E7%BB%93%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91API%E8%A7%A3%E7%BB%91%E7%BB%91%E5%AE%9A%E5%BC%B9%E6%80%A7%E5%85%AC%E7%BD%91IP/"/>
    <id>http://yoursite.com/2019/05/22/使用Go语言结合阿里云API解绑绑定弹性公网IP/</id>
    <published>2019-05-22T06:12:11.000Z</published>
    <updated>2019-05-22T06:12:11.816Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gitlab配置ssh，实现秘钥上传下载代码</title>
    <link href="http://yoursite.com/2019/05/21/Gitlab%E9%85%8D%E7%BD%AEssh%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%A7%98%E9%92%A5%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/05/21/Gitlab配置ssh，实现秘钥上传下载代码/</id>
    <published>2019-05-21T09:28:26.000Z</published>
    <updated>2019-05-21T13:03:27.722Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="常规配置">常规配置</span></h2><p>gitlab配置ssh比较简单，在代码机上使用<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>制作<code>id_rsa</code>和<code>id_rsa.pub</code>，然后来到gitlab的web页面，settings—ssh keys,把<code>id_rsa.pub</code>拷贝进去，然后点击<code>Add key</code>:<br><img src="/images/gitlab32.png" alt="akb48"></p><p>然后返回到代码机器上，再对应的代码目录里使用<code>git remote -v</code>查看一下当前的方式，如果不是git的话，通过<code>git remote set-url origin git@你的project地址</code>修改，然后再试一下 <code>ssh -T git@&quot;你的gitlab服务器地址&quot;</code>是否会出现welcome，如果可以的话，那么就可以通过ssh的方式下载上传代码以及<code>git clone 对应的project</code>了。</p><h2><span id="容器配置">容器配置</span></h2><p>但是现在很多人都用容器部署gitlab，而且在部署的时候除了指定80，443端口的映射，还制定了22端口的映射。比如我的这个gitlab容器的启动命令就是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --hostname 外网IP --publish <span class="number">443</span>:<span class="number">443</span> --publish <span class="number">80</span>:<span class="number">80</span> --publish <span class="number">2222</span>:<span class="number">22</span> --name gitlab --restart always gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>可见我把宿主机的2222端口对应给了gitlab容器。那么像上面的方法肯定不会成功，这里就需要我们修改一处地方。</p><p>首先进入容器，然后修改<code>gitlab.rb</code>文件，这个文件在容器里有很多，我这个镜像里的gitlab.rb是<code>/etc/gitlab/gitlab.rb</code>，然后把<code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;]</code>改成2222并且去掉注释，如图：<br><img src="/images/gitlab33.png" alt="akb48"></p><p>然后<code>gitlab-ctl restart</code>重启之，重启完毕之后，在代码机上测试一下ssh：<br><img src="/images/gitlab34.png" alt="akb48"></p><p>可以已经连通，修改一下remote master地址之后，就可以直接上传了：<br><img src="/images/gitlab35.png" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      据说ssh连接可以不指定文件大小，而https还要设定文件大小
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
      <category term="ssh keys" scheme="http://yoursite.com/tags/ssh-keys/"/>
    
  </entry>
  
  <entry>
    <title>摆弄摆弄iptables</title>
    <link href="http://yoursite.com/2019/05/20/%E6%91%86%E5%BC%84%E6%91%86%E5%BC%84iptables/"/>
    <id>http://yoursite.com/2019/05/20/摆弄摆弄iptables/</id>
    <published>2019-05-20T09:06:14.000Z</published>
    <updated>2019-05-21T03:21:28.529Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>作为一名运维人员，安全是第一任务，那么某些高机密web网页限制IP访问是必做的环节，当然如果使用阿里云的“安全组”可以让这一切变的简单和直观。不过有时候，一个安全组里面有多个服务，不同的服务使用同一个端口（比如都是443），有些443要对所有人开放，有的443只能对公司的IP开放，那么如果不想重新收拾安全组的话，就干脆用iptables。</p><h2><span id="普通的iptables">普通的iptables</span></h2><p>常用的iptables规则如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL<span class="comment">#详细查看当前iptables情况</span></span><br><span class="line">iptables -I INPUT -p tcp --dport <span class="number">8701</span> -j DROP<span class="comment">#所有来访问8701端口的请求都作废</span></span><br><span class="line">iptables -I INPUT -s <span class="number">60.191</span><span class="number">.94</span><span class="number">.118</span> -p tcp --dport <span class="number">8070</span> -j ACCEPT<span class="comment">#只准许60.191.94.118这个IP访问8070端口</span></span><br><span class="line">iptables -t nat -I PREROUTING <span class="number">1</span> -s <span class="number">120.92</span><span class="number">.136</span><span class="number">.159</span>/<span class="number">32</span> -p tcp -m tcp --dport <span class="number">6379</span> -j DNAT --to-destination <span class="number">100.99</span><span class="number">.231</span><span class="number">.81</span>:<span class="number">6379</span><span class="comment">#准许120.92.136.159的6379信息转发到100.99.231.81的6379里</span></span><br><span class="line">iptables -A OUTPUT -p tcp -m tcp --dport <span class="number">61616</span> -j DROP<span class="comment">#将61616端口的报文抛弃</span></span><br><span class="line">iptables -D INPUT <span class="number">1</span><span class="comment">#删除INPUT表里的第一规则</span></span><br><span class="line">iptables -L FORWARD --line-numbers <span class="comment">#展现规则序号，-D删除的行号就是这里的序号</span></span><br></pre></td></tr></table></figure></p><p>如果不小心配错的规则比较多，不愿意一个一个删除，可以执行<code>service iptables restart</code>直接恢复。</p><h2><span id="容器的iptables">容器的iptables</span></h2><p>现在容器化横行，但是我们也要限制IP来访问容器的端口，但是如果像上面那样的话，是无法成功的。对于容器，为了避免您的规则被docker破坏,请使用<code>DOCKER-USER</code>链，比如有个容器已经做了3306端口与宿主机的3306端口互通，那么配置如下规则：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure></p><p>执行的效果就是只能1.1.1.1和2.2.2.2来访问该服务器的3306端口，其余IP一律drop掉。这里也要注意输入的顺序，因为iptables执行是从上往下的。</p><h2><span id="return的问题">RETURN的问题</span></h2><p>如果上面的规则如果变成了这样：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A DOCKER-USER -p all -j RETURN</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -s <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span> -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">iptables -A DOCKER-USER -i eth0 -p tcp -m conntrack --ctorigdstport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure></p><p>会不会达不到预期的要求？答曰不一定，在我这个例子里结果就是任何人都可以访问容器的3306端口。因为return退出的是当前CHIAN：如果当前CHIAN是别的CHAIN调用的子CHIAN（从一个CHAIN里可以jump到另一个CHAIN, jump到的那个CHAIN是子CHAIN），那么返回到调用点下一条规则处开始执行，如果当前CHIAN不是子CHAIN，那么就以默认策略执行。<code>iptables -nvL</code>看一下当前iptables的情况：<br><img src="/images/docker18.png" alt="akb48" title="图中我先把RETURN规则删掉了"></p><p>可以看出DOCKER-USER这个链是<code>1 references</code>，即它被一个默认链调用，被哪个默认链呢？<code>FORWARD</code>，当DOCKER-USER RETURN的时候回返回到FORWARD链里然后走下一个规则，而下一个规则是什么呢？是<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7893</span>K <span class="number">5610</span>M ACCEPT     all  --  *      docker0  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure></p><p>所以所有人都可以访问这个3306了。</p><h2><span id="没有docker-user">没有DOCKER-USER？</span></h2><p>DOCKER-USER这个链是Docker比较新的版本加上的，例子里的docker版本是version 18.06.1-ce, build e68fc7a。但是如果docker比较老的话，是不会默认生成这个链的，比如：<br><img src="/images/docker19.png" alt="akb48"></p><p>这种情况要么乖乖的升级docker，要么可以自定义创建iptables链。比如我们创建一个链，链名叫GITLAB，只让公司内部网络（115.200.239.106）访问GITLAB。</p><p>首先先<code>iptables -N GITLAB</code>，创建该链。然后<code>iptables -I GITLAB -p tcp --dport 443 -j DROP</code>和<code>iptables -I GITLAB -s 115.200.239.106 -j ACCEPT</code>创建给GITLAB链里添加两个访问规则达到只有指定IP访问443端口的目的。但是此时这个GITLAB链没有被任何任何默认链引用，所以即使配了规则也是无法匹配到任何报文的，所以我们要把它与FORWARD链链接起来，准许443端口可以转发，命令是<code>iptables -I FORWARD -p https --dport 443 -j GITLAB</code>，如图：<br><img src="/images/docker20.png" alt="akb48"></p><p>去浏览器里或者curl一下验证，的确只能指定IP才能访问GITLAB主页。不过，你以为现在就完事了么？非也，因为gitlab默认是通过https的形式拉取代码的，所以你还要把所有的代码服务器IP也要写进iptables里。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://docs.docker.com/network/iptables/" target="_blank" rel="noopener">https://docs.docker.com/network/iptables/</a><br><a href="https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html" target="_blank" rel="noopener">https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html</a><br><a href="http://kuntsung.blogspot.com/2012/10/iptables.html" target="_blank" rel="noopener">http://kuntsung.blogspot.com/2012/10/iptables.html</a><br><a href="https://www.zsythink.net/archives/1625" target="_blank" rel="noopener">https://www.zsythink.net/archives/1625</a></p>]]></content>
    
    <summary type="html">
    
      摆弄iptables的同时，小心别把自己锁在服务器外面。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>配置Intellij IDEA进行高效率运维开发</title>
    <link href="http://yoursite.com/2019/05/14/%E9%85%8D%E7%BD%AEintellij-IDEA%E8%AE%A9%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%9B%B4%E9%AB%98%E6%95%88%E7%8E%87/"/>
    <id>http://yoursite.com/2019/05/14/配置intellij-IDEA让运维开发更高效率/</id>
    <published>2019-05-14T08:58:50.000Z</published>
    <updated>2019-05-20T14:17:05.041Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>以前我写python用的是pycharm2018，但是发现我的pycharm里没有go插件，脱机安装也报错，于是乎我就干脆下载了一个interllij IDEA2019，打算把python、go、yaml文件都用它来编辑和管理。</p><h2><span id="配置python开发环境">配置python开发环境</span></h2><p>首先先去File–Settings–Plugins搜索python，下载对应插件，下载完毕之后需要重启IDE，重启完毕之后，<code>File--New--Module--Python</code>，选择对应的SDK即可。</p><p>若需要添加样式，还是在File–Settings–Editer–File and Code Templates里找到python script，增添文件的通用版面即可，如图：<br><img src="/images/intellij9.png" alt="akb48"></p><p>输出结果换行也很简单，在File–Settings–Editer–Console里，勾选<code>Use soft wraps in console</code>即可，如图：<br><img src="/images/intellij10.png" alt="akb48"></p><p>如果控制每行的长度，修改<code>Console commands history size</code>即可。</p><h2><span id="配置go开发环境">配置go开发环境</span></h2><p>首先安装go语言，配置好GOROOT和GOPATH，然后去File–Settings–Plugins搜索go，下载对应插件，下载完毕之后需要重启IDE，重启完毕之后，在<code>File--Settings--Languages &amp; Frameworks</code>里选择Go，配置好GOROOT和GOPATH。注意，GOPATH填的是Go的src文件地址。保存之后，就可以正常启动go文件了。</p><h2><span id="配置k8s-yaml开发环境">配置k8s yaml开发环境</span></h2><p>首先先去File–Settings–Plugins搜索yaml和kubernetes，下载对应的插件之后，直接创建新的project，就会自动补齐，如图：<br><img src="/images/intellij7.png" alt="akb48"></p><h2><span id="调节字体大小">调节字体大小</span></h2><p>调节菜单等字体大小：<code>File--Settings--Appearance &amp; Behavior--Appearance--Use custom font(Size)</code>，如图：<br><img src="/images/intellij6.png" alt="akb48"></p><p>调节代码的字体大小：<code>File--Settings--Font--Size</code>，如图：<br><img src="/images/intellij5.png" alt="akb48"></p><h2><span id="配置与远程服务器同步">配置与远程服务器同步</span></h2><p>写完了代码，总不能lrzsz的去上传到服务器里，我们要用一个优雅的方式去达到这个目的，首先在顶级菜单里选择<code>Tools--Deployment--Configuration</code>，点击+创建一个新的链接：<br><img src="/images/intellij3.png" alt="akb48"></p><p>检查可以成功连接到远程服务器之后，保存此链接。右键点击文件，选择<code>Deployment---Upload to XXX</code>，然后就可以看到上传成功。<br><img src="/images/intellij4.png" alt="akb48"></p><p>最后，分享两个比较柔和的xshell配色方案：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Solarized Dark]</span><br><span class="line">text(bold)=<span class="number">839496</span></span><br><span class="line">magenta(bold)=<span class="number">6</span>c71c4</span><br><span class="line">text=<span class="number">839496</span></span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">green=<span class="number">859900</span></span><br><span class="line">red(bold)=cb4b16</span><br><span class="line">green(bold)=<span class="number">586e75</span></span><br><span class="line">black(bold)=<span class="number">073642</span></span><br><span class="line">red=dc322f</span><br><span class="line">blue=<span class="number">268</span>bd2</span><br><span class="line">black=<span class="number">002</span>b36</span><br><span class="line">blue(bold)=<span class="number">839496</span></span><br><span class="line">yellow(bold)=<span class="number">657</span>b83</span><br><span class="line">cyan(bold)=<span class="number">93</span>a1a1</span><br><span class="line">yellow=b58900</span><br><span class="line">magenta=dd3682</span><br><span class="line">background=<span class="number">042028</span></span><br><span class="line">white=eee8d5</span><br><span class="line">cyan=<span class="number">2</span>aa198</span><br><span class="line">[Names]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">name0=Solarized Dark</span><br></pre></td></tr></table></figure></p><p>将文件命名为solarized-dark.xcs文件，在xshell配色方案中导入该文件即可。颜色对比如下：<br><img src="/images/intellij8.png" alt="akb48" title="左边是柔和的，右边是默认的"></p><p>第二个方案如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mycolor]</span><br><span class="line">text(bold)=e9e9e9</span><br><span class="line">magenta(bold)=ff00ff</span><br><span class="line">text=00ff80</span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">green=80ff00</span><br><span class="line">red(bold)=ff0000</span><br><span class="line">green(bold)=3c5a38</span><br><span class="line">black(bold)=808080</span><br><span class="line">red=ff4500</span><br><span class="line">blue=00bfff</span><br><span class="line">black=000000</span><br><span class="line">blue(bold)=1e90ff</span><br><span class="line">yellow(bold)=ffff00</span><br><span class="line">cyan(bold)=00ffff</span><br><span class="line">yellow=c0c000</span><br><span class="line">magenta=c000c0</span><br><span class="line">background=042028</span><br><span class="line">white=c0c0c0</span><br><span class="line">cyan=00c0c0</span><br><span class="line">[Names]</span><br><span class="line">count=1</span><br><span class="line">name0=mycolor</span><br></pre></td></tr></table></figure></p><p>将此文件保存较mycolor.xcs，然后同上面一样导入即可。如果想要xshell自动加载此配色，需要将上面里所有mycolor改名叫Xterm，并且删除掉原有的Xterm配色方案，重启Xshell即看到效果。</p>]]></content>
    
    <summary type="html">
    
      lanyu激活码好像不好用了，只能先用免费的对付一个月...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="intellij idea" scheme="http://yoursite.com/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title>使用Python GUI去将本地文件上传阿里云OSS</title>
    <link href="http://yoursite.com/2019/05/13/%E4%BD%BF%E7%94%A8Python-GUI%E5%8E%BB%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <id>http://yoursite.com/2019/05/13/使用Python-GUI去将本地文件上传阿里云OSS/</id>
    <published>2019-05-13T11:51:31.000Z</published>
    <updated>2019-05-21T03:24:13.527Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>前端同事会甩过来一个zip包，然后我们需要将其解压，然后上传到阿里云OSS里对应的目录，为了提高效率，就用python 3写了一个GUI，如图：<br><img src="/images/tkinter3.png" alt="akb48" title="选择对应的zip包，然后选择目录"></p><p>具体代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 作者：ChrisChan</span></span><br><span class="line"><span class="comment"># 用途：使用GUI上传阿里云OSS</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.ttk <span class="keyword">as</span> ttk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox  <span class="comment"># 弹窗</span></span><br><span class="line"><span class="comment"># from tkinter import filedialog  # 选择单独文件</span></span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> askdirectory <span class="comment"># 选择文件夹</span></span><br><span class="line"><span class="keyword">import</span> oss2,os,sys,zipfile,time  <span class="comment">#引入zipfile解压</span></span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">"将桌面文件上传到阿里云国内线上OSS"</span>)   <span class="comment"># 窗体的标题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confirm</span><span class="params">()</span>:</span></span><br><span class="line">    result = messagebox.askokcancel(<span class="string">"请确认"</span>, <span class="string">'''本地文件是：%s,对应OSS路径是：%s'''</span> % (filename,region1.get())) <span class="comment"># 前面是弹窗主题，后面是弹窗内容</span></span><br><span class="line">    Des_path = region1.get()</span><br><span class="line">    fileroot = filename.split(<span class="string">'.zip'</span>)[<span class="number">0</span>]    <span class="comment">#获取文件路径，不含.zip后缀</span></span><br><span class="line">    print(<span class="string">"上传zip包路径是:%s"</span> % fileroot)  <span class="comment"># 获取要上传的文件路径</span></span><br><span class="line">    print(<span class="string">"要解压的zip包名是:%s"</span> % filename)</span><br><span class="line">    print(<span class="string">"目标路径是:%s"</span> % Des_path)   <span class="comment"># 获取目的完整路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        ak = <span class="string">"账号ak"</span></span><br><span class="line">        sk = <span class="string">"账号sk"</span>   <span class="comment"># 秘钥</span></span><br><span class="line">        auth = oss2.Auth(ak, sk)   <span class="comment"># 鉴权</span></span><br><span class="line">        ossBucket = oss2.Bucket(auth, <span class="string">'http://oss-cn-hangzhou.aliyuncs.com'</span>,Des_path)   <span class="comment"># 定义ossBucket</span></span><br><span class="line">        date = time.strftime(<span class="string">"%Y-%m-%d"</span>, time.localtime())  <span class="comment">#获取今天日期</span></span><br><span class="line">        <span class="comment">#解压缩zip包</span></span><br><span class="line">        zFile = zipfile.ZipFile(filename, <span class="string">"r"</span>)</span><br><span class="line">        <span class="keyword">for</span> fileM <span class="keyword">in</span> zFile.namelist():</span><br><span class="line">            zFile.extract(fileM, <span class="string">"D:\OSSback"</span>)</span><br><span class="line">        zFile.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件夹上传</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">uploadFile</span><span class="params">(file)</span>:</span></span><br><span class="line">            remoteName = file.replace(fileroot,<span class="string">''</span>).replace(<span class="string">'\\'</span>,<span class="string">'/'</span>)[<span class="number">1</span>:]     <span class="comment"># 将“/”去掉</span></span><br><span class="line">            print(<span class="string">'uploading...'</span>, file, <span class="string">'remoteName:'</span>, remoteName)</span><br><span class="line">            result = ossBucket.put_object_from_file(remoteName, file)</span><br><span class="line">            print(<span class="string">'http status: &#123;0&#125;'</span>.format(result.status))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(dir)</span>:</span></span><br><span class="line">            fs = os.listdir(dir)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> fs:</span><br><span class="line">                file = dir+<span class="string">"\\"</span>+f</span><br><span class="line">                <span class="keyword">if</span> os.path.isdir(file):</span><br><span class="line">                    list(file)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    uploadFile(file)</span><br><span class="line">        list(fileroot)   <span class="comment"># 开始上传</span></span><br><span class="line">        print(<span class="string">"目标文件夹里所有文件上传完毕！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#zip包改名</span></span><br><span class="line">        os.rename(filename,filename + date) <span class="comment">#按日期重命名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseZip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> filename</span><br><span class="line">    filename = tk.filedialog.askopenfilename()    <span class="comment"># 选择单独的文件</span></span><br><span class="line">    <span class="keyword">if</span> filename != <span class="string">''</span>:</span><br><span class="line">        lb.config(text=<span class="string">"您选择的文件是："</span> + filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lb.config(text=<span class="string">"您没有选择任何文件"</span>)</span><br><span class="line"></span><br><span class="line">lb = tk.Label(window, text=<span class="string">''</span>)</span><br><span class="line">lb.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">btn = tk.Button(window, text=<span class="string">"选择要上传的文件"</span>, command=chooseZip)</span><br><span class="line">btn.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">lb2 = tk.Label(window, text=<span class="string">'请选择上传地址'</span>)</span><br><span class="line">lb2.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">number = tk.StringVar()</span><br><span class="line">region1 = ttk.Combobox(window,width=<span class="number">35</span>,textvariable=number,state=<span class="string">'readonly'</span>)    <span class="comment">#下拉列表设置成为只读模式</span></span><br><span class="line">region1[<span class="string">'values'</span>] = (<span class="string">'resource-public/lccms'</span>,<span class="string">'resource-public/phoneAlarm'</span>,<span class="string">'resource-public/lcview'</span>,<span class="string">'resource-public/webFront/annualReport'</span>,<span class="string">'resource-public/webFront/cancellation'</span>,<span class="string">'resource-public/webFront/deviceShare'</span>,<span class="string">'resource-public/webFront/discoverNews'</span>,<span class="string">'resource-public/webFront/timeAlbum'</span>,<span class="string">'resource-public/chenchenchen'</span>)   <span class="comment">#下拉列表里面具体的元素</span></span><br><span class="line">region1.grid(row=<span class="number">2</span>,column=<span class="number">1</span>)</span><br><span class="line">region1.current(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tk.Button(window, text=<span class="string">'上传'</span>, width=<span class="number">10</span>, command=confirm).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(window, text=<span class="string">'退出'</span>, width=<span class="number">10</span>, command=window.quit).grid(row=<span class="number">3</span>, column=<span class="number">1</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure></p><p>整个过程还是出现一个gui界面，然后传入zip包，然后将其在源目录下解压缩，并且上传到选择的OSS路径里，上传成功后将原zip改名已做备份。</p><p>最后吐槽一下，阿里云OSS的SDK里是没有文件改名的功能，只能复制一份然后靠上传新的顶替掉原来老的内容，这样很不友善…所以我才选择将zip包保留在本地。</p>]]></content>
    
    <summary type="html">
    
      使用jumpserver连接服务器的时候出现Error reading SSH protocol banner错误的话，可能是系统用户没有推送的原因
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="阿里云OSS" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="gui" scheme="http://yoursite.com/tags/gui/"/>
    
  </entry>
  
  <entry>
    <title>使用Python GUI去创建阿里云负载均衡</title>
    <link href="http://yoursite.com/2019/05/07/%E4%BD%BF%E7%94%A8python-GUI%E5%8E%BB%E5%88%9B%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/05/07/使用python-GUI去创建阿里云负载均衡/</id>
    <published>2019-05-07T06:17:04.000Z</published>
    <updated>2019-05-16T06:29:26.125Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="前言">前言</span></h2><p>最近闲来无事研究了一下python3的gui，就用最基础的tkinter去做了一个购买阿里云负载均衡的脚本，先看一下效果：<br><img src="/images/tkinter1.png" alt="akb48" title="在对应的栏目里输入相应的值"></p><p>点击“确认”按钮之后，就会出现这样一个谈话框：<br><img src="/images/tkinter2.png" alt="akb48"></p><p>确认参数完毕之后，若点击取消则返回上一层页面修改，如果点击确认则进行购买。</p><p>这个脚本需要的基础知识可以去看一下莫烦大大的tkinter教学系列，地址是<a href="https://morvanzhou.github.io/tutorials/python-basic/tkinter/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/tkinter/</a> ，B站有全部的视频，不到10分钟一节课，还是很棒的。</p><h2><span id="脚本正文">脚本正文</span></h2><p>脚本内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#作者：ChrisChan</span></span><br><span class="line"><span class="comment">#用途：py3脚本，使用GUI购买阿里云SLB脚本</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.ttk <span class="keyword">as</span> ttk<span class="comment">#下拉式菜单</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox  <span class="comment">#弹窗</span></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515.CreateLoadBalancerRequest <span class="keyword">import</span> CreateLoadBalancerRequest</span><br><span class="line"></span><br><span class="line"><span class="comment">#秘钥集合</span></span><br><span class="line">aksk_A = [<span class="string">"第一个账号的ak"</span>,<span class="string">"第一个账号的sk"</span>]</span><br><span class="line">aksk_B = [<span class="string">"第2个账号的ak"</span>,<span class="string">"第2个账号的sk"</span>]</span><br><span class="line">aksk_C = [<span class="string">"第3个账号的ak"</span>,<span class="string">"第3个账号的sk"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个类可以建立负载均衡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateSlb</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ak,sk,domain)</span>:</span></span><br><span class="line">        self.ak = ak</span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.domain = domain</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,name,nettype)</span>:</span></span><br><span class="line">        client = AcsClient(self.ak,self.sk,self.domain)</span><br><span class="line">        request = CreateLoadBalancerRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.set_LoadBalancerSpec(<span class="string">"slb.s1.small"</span>)<span class="comment">#这里是负载均衡的规格，</span></span><br><span class="line">        request.set_LoadBalancerName(name)</span><br><span class="line">        request.set_AddressType(nettype)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">window = tk.Tk()<span class="comment">#建立一个窗体</span></span><br><span class="line">window.title(<span class="string">"购买阿里云负载均衡"</span>)   <span class="comment">#窗体的标题</span></span><br><span class="line"></span><br><span class="line">Label1 = tk.Label(window, text=<span class="string">'请输入负载均衡名称:'</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">v1 = tk.StringVar()</span><br><span class="line">e1 = tk.Entry(window, textvariable=v1)</span><br><span class="line">e1.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)  <span class="comment"># 设置输入框显示的位置，以及长和宽属性</span></span><br><span class="line"></span><br><span class="line">l = tk.Label(window,bg=<span class="string">"yellow"</span>,width=<span class="number">20</span>,text=<span class="string">"默认值是1"</span>)</span><br><span class="line">l.grid(row=<span class="number">1</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter1 = tk.StringVar()</span><br><span class="line">l1 = tk.Label(window,bg=<span class="string">'pink'</span>,width=<span class="number">20</span>,height=<span class="number">5</span>,text=<span class="string">"请选择对应的阿里云账号"</span>)</span><br><span class="line">l1.grid(row=<span class="number">2</span>,column=<span class="number">1</span>,rowspan=<span class="number">3</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter2 = tk.StringVar()</span><br><span class="line">l2 = tk.Label(window,bg=<span class="string">'yellow'</span>,width=<span class="number">20</span>,text=<span class="string">"请选择实例所在的地域"</span>)</span><br><span class="line">l2.grid(row=<span class="number">5</span>,column=<span class="number">1</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">parameter3 = tk.StringVar()</span><br><span class="line">l3 = tk.Label(window,bg=<span class="string">'green'</span>,width=<span class="number">20</span>,height=<span class="number">3</span>,text=<span class="string">"请选择网络类型"</span>)</span><br><span class="line">l3.grid(row=<span class="number">10</span>,column=<span class="number">1</span>,rowspan=<span class="number">2</span>,padx=<span class="number">10</span>,pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickMe</span><span class="params">()</span>:</span></span><br><span class="line">    result = messagebox.askokcancel(<span class="string">"请确认"</span>, <span class="string">'''</span></span><br><span class="line"><span class="string">    负载均衡名称是：%s,对应账号是：%s,所在区域是：%s,网络类型是：%s</span></span><br><span class="line"><span class="string">    '''</span> % (v1.get(),parameter1.get(),region1.get(),parameter3.get())) <span class="comment">#前面是弹窗主题，后面是弹窗内容</span></span><br><span class="line">    name = v1.get()</span><br><span class="line">    nettype = parameter3.get()</span><br><span class="line">    domain = region1.get()</span><br><span class="line">    account = parameter1.get()</span><br><span class="line">    print(<span class="string">"负载均衡名称是：%s"</span> % name)  <span class="comment"># 获取用户输入的信息</span></span><br><span class="line">    print(<span class="string">"所在区域是：%s"</span> % domain)</span><br><span class="line">    print(<span class="string">"对应账号是：%s"</span> % account)</span><br><span class="line">    print(<span class="string">"网络类型是：%s"</span> % nettype)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> account == <span class="string">"A"</span>:</span><br><span class="line">            ak = aksk_A[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_A[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak,sk,domain)    <span class="comment">#将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> account == <span class="string">"B"</span>:</span><br><span class="line">            ak = aksk_B[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_B[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak, sk, domain)  <span class="comment"># 将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ak = aksk_C[<span class="number">0</span>]</span><br><span class="line">            sk = aksk_C[<span class="number">1</span>]</span><br><span class="line">            getSLB = CreateSlb(ak, sk, domain)  <span class="comment"># 将类实例化</span></span><br><span class="line">            getSLB.create(name,nettype)<span class="comment">#执行购买函数</span></span><br><span class="line">        print(<span class="string">"购买完毕！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_selection</span><span class="params">(v)</span>:</span></span><br><span class="line">    l.config(text=<span class="string">"当前选择的值是："</span> + v)   <span class="comment">#V就是传入值也是获取的长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_env</span><span class="params">()</span>:</span></span><br><span class="line">    l1.config(text=<span class="string">"你选择了"</span>+parameter1.get())  <span class="comment">#使用config功能去改变原有l的参数,把text变成了提取var1里的值</span></span><br><span class="line">    <span class="comment">#print(parameter1.get())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_region</span><span class="params">()</span>:</span></span><br><span class="line">    l2.config(text=<span class="string">"你选择了"</span>+region1.get())</span><br><span class="line">    <span class="comment">#print(parameter2.get())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_network</span><span class="params">()</span>:</span></span><br><span class="line">    l3.config(text=<span class="string">"你选择了"</span>+parameter3.get())</span><br><span class="line">    <span class="comment">#print(parameter3.get())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选择环境</span></span><br><span class="line">env1 = tk.Radiobutton(window,text=<span class="string">"第一个账号"</span>,variable=parameter1,value=<span class="string">'A'</span>,command=get_env)</span><br><span class="line">env2 = tk.Radiobutton(window,text=<span class="string">"第2个账号"</span>,variable=parameter1,value=<span class="string">'B'</span>,command=get_env)</span><br><span class="line">env3 = tk.Radiobutton(window,text=<span class="string">"第3个账号"</span>,variable=parameter1,value=<span class="string">'C'</span>,command=get_env)</span><br><span class="line">env1.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">env2.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">env3.grid(row=<span class="number">4</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择地域，使用下拉列表</span></span><br><span class="line">number = tk.StringVar()</span><br><span class="line">region1 = ttk.Combobox(window,width=<span class="number">12</span>,textvariable=number,state=<span class="string">'readonly'</span>)    <span class="comment">#加入readonly，使下拉列表设置成为只读模式</span></span><br><span class="line">region1[<span class="string">'values'</span>] = (<span class="string">"cn-hangzhou"</span>,<span class="string">"cn-shenzhen"</span>,<span class="string">"eu-central-1"</span>,<span class="string">"ap-southeast-1"</span>,<span class="string">"cn-hongkong"</span>)   <span class="comment">#下拉列表里面具体的元素</span></span><br><span class="line">region1.grid(row=<span class="number">5</span>,column=<span class="number">0</span>)</span><br><span class="line">region1.current(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择内/外网</span></span><br><span class="line">network1 = tk.Radiobutton(window,text=<span class="string">"内网"</span>,variable=parameter3,value=<span class="string">'intranet'</span>,command=get_network)</span><br><span class="line">network2 = tk.Radiobutton(window,text=<span class="string">"外网"</span>,variable=parameter3,value=<span class="string">'internet'</span>,command=get_network)</span><br><span class="line">network1.grid(row=<span class="number">10</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">network2.grid(row=<span class="number">11</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#尺度区间</span></span><br><span class="line">s = tk.Scale(window,label=<span class="string">"想要多少台?"</span>,from_=<span class="number">1</span>,to=<span class="number">20</span>,orient=tk.HORIZONTAL,resolution=<span class="number">1</span>,command=print_selection)   </span><br><span class="line"><span class="comment">#HORIZONTAL横向,length的单位是像素,resolution单位是取小数还是取整</span></span><br><span class="line">s.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#提交按钮</span></span><br><span class="line">action = tk.Button(window, text=<span class="string">'确认提交'</span>,width=<span class="number">10</span>,command=clickMe)</span><br><span class="line">action.grid(row=<span class="number">12</span>, column=<span class="number">0</span>, sticky=tk.W, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">tk.Button(window, text=<span class="string">'退出程序'</span>,width=<span class="number">10</span>,command=window.quit).grid(row=<span class="number">12</span>, column=<span class="number">1</span>, sticky=tk.E, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure></p><p>基本脚本的注释就已经讲明白了整个脚本执行的过程，简单说来就是界面输入对应的选项，再把这些选项传入到阿里云的api里达到购买负载均衡的目的。这里要注意一下，<code>thinker</code>布局只能从<code>pack</code>,<code>grid</code>,<code>place</code>里选择一种。</p><p>脚本就到此结束，后期再给这个脚本添加到对应的端口监听功能就完美了！</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.mierhuo.com/code/106" target="_blank" rel="noopener">https://www.mierhuo.com/code/106</a><br><a href="https://www.jianshu.com/p/5dfeb29aed7b" target="_blank" rel="noopener">https://www.jianshu.com/p/5dfeb29aed7b</a><br><a href="https://www.cnblogs.com/ruo-li-suo-yi/p/7425307.html" target="_blank" rel="noopener">https://www.cnblogs.com/ruo-li-suo-yi/p/7425307.html</a></p>]]></content>
    
    <summary type="html">
    
      如果发现activemq curl自己的8161端口timeout的情况，多半是activemq死了，重启可破之
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="阿里云" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="tkinter" scheme="http://yoursite.com/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>解决微信不支持阿里云OSS域名的问题</title>
    <link href="http://yoursite.com/2019/04/29/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E4%B8%8D%E6%94%AF%E6%8C%81%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/04/29/解决微信不支持阿里云OSS域名的问题/</id>
    <published>2019-04-29T07:52:44.000Z</published>
    <updated>2019-04-29T11:08:03.983Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>阿里云OSS的元素（除了图片）是无法通过微信小程序/微信聊天直接打开的，会爆“已停止访问该网页”的错误，如图：<br><img src="/images/wechat1.jpg" alt="akb48"></p><p>但是复制url地址到手机浏览器是可以正常访问的，无疑这样对于用户来说是一个很不好的体验，因为腾讯屏蔽了阿里云的相关元素地址。所以为了解决这个问题，需要登录OSS后台，在对应的bucket里，点击“域名管理”，然后“绑定用户域名”，在里面输入一个域名即可。如果是HTTPS访问，还需要点击“证书托管”，把域名证书上传到阿里云OSS里，如图：<br><img src="/images/wechat2.jpg" alt="akb48"></p><p>这样就可以用自定义的域名去替代阿里云OSS的基础域名（<a href="http://XXXX.oss-cn-hangzhou.aliyuncs.com/），这样微信就可以正常打开了：" target="_blank" rel="noopener">http://XXXX.oss-cn-hangzhou.aliyuncs.com/），这样微信就可以正常打开了：</a><br><img src="/images/wechat3.jpg" alt="akb48"></p><p><img src="/images/字母哥被帽.gif" alt="akb48" title="字母哥惨遭两帽"></p>]]></content>
    
    <summary type="html">
    
      如果被nessus扫描出“RFC 4253建议不要使用Arcfour”的SSH弱算法漏洞，在sshd_config末尾添加Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc，然后重启ssh即可。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="阿里云oss" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91oss/"/>
    
  </entry>
  
  <entry>
    <title>获取阿里云RDS磁盘容量的脚本</title>
    <link href="http://yoursite.com/2019/04/28/%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91RDS%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/04/28/获取阿里云RDS磁盘容量的脚本/</id>
    <published>2019-04-28T08:16:48.000Z</published>
    <updated>2019-04-29T09:29:59.871Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="需求以及脚本正文">需求以及脚本正文</span></h2><p>开发人员提出一个需求，想要每天从企业微信号里获取一下阿里云几个RDS的今天和昨天的磁盘容量，对比一下结果来判断删除模块是否正常运行，由于阿里云的相关API不支持查询历史数据，所以我们要建立一个数据表，把磁盘容量按照日期保存在数据表里，这个table的结构如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下是创建databases的语句</span></span><br><span class="line">CREATE TABLE IF NOT EXISTS `onlinerds`(</span><br><span class="line">`id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">`rds_id` VARCHAR(<span class="number">100</span>) NOT NULL,<span class="comment">#记录数据库ID号</span></span><br><span class="line">`rds_name` VARCHAR(<span class="number">100</span>) NOT NULL,<span class="comment">#记录数据库名称</span></span><br><span class="line">`rds_diskused` VARCHAR(<span class="number">40</span>) NOT NULL,<span class="comment">#记录使用磁盘容量</span></span><br><span class="line">`date` VARCHAR(<span class="number">40</span>) NOT NULL,<span class="comment">#记录日期</span></span><br><span class="line">PRIMARY KEY ( `id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>有了这个table，于是就写了一个py3的脚本，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#这个py3脚本是用来获取阿里云线上数据库的磁盘容量</span></span><br><span class="line"><span class="comment">#pip install pymysql &amp; pip install aliyun-python-sdk-rds &amp; pip install aliyun-python-sdk-core</span></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkrds.request.v20140815.DescribeDBInstanceAttributeRequest <span class="keyword">import</span> DescribeDBInstanceAttributeRequest</span><br><span class="line"><span class="keyword">import</span> math,pymysql,urllib.request,json,datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典确定kv对应关系，这样可以取到服务器姓名</span></span><br><span class="line">dict = &#123;<span class="string">'第一台RDSid'</span>: <span class="string">"对应数据库名称"</span>,<span class="string">'第2台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'第3台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'4台RDSid'</span>: <span class="string">"对应数据库名称"</span>，<span class="string">'第5台RDSid'</span>: <span class="string">"对应数据库名称"</span>&#125;</span><br><span class="line"></span><br><span class="line">usedcap=[]<span class="comment">#今天磁盘量</span></span><br><span class="line">usedcap_yes=[]<span class="comment">#昨天磁盘量</span></span><br><span class="line">pro = []    <span class="comment">#比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建获取磁盘容量的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getRDS</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ak,sk,domain)</span>:</span></span><br><span class="line">        self.ak = ak</span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.domain = domain</span><br><span class="line">        client = AcsClient(ak,sk,domain)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动换算单位</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBytes</span><span class="params">(self,bytes,lst=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lst <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>]  <span class="comment"># 这里是单位，如果需要TB，PB，在后面添加进去即可</span></span><br><span class="line">        i = int(math.floor(  <span class="comment"># 舍弃小数点，取小</span></span><br><span class="line">            math.log(bytes, <span class="number">1024</span>)  <span class="comment"># 求对数(对数：若 a**b = N 则 b 叫做以 a 为底 N 的对数)</span></span><br><span class="line">        ))</span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(lst):</span><br><span class="line">            i = len(lst) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">'%.2f'</span> + <span class="string">" "</span> + lst[i]) % (bytes / math.pow(<span class="number">1024</span>, i))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DiskUsed</span><span class="params">(self,rdsid)</span>:</span></span><br><span class="line">        lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>]</span><br><span class="line">        client = AcsClient(self.ak,self.sk,self.domain)</span><br><span class="line">        request = DescribeDBInstanceAttributeRequest()</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        request.set_DBInstanceId(rdsid)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        result = str(response, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        data = json.loads(result)</span><br><span class="line">        DiskUsed = ((data)[<span class="string">'Items'</span>][<span class="string">'DBInstanceAttribute'</span>][<span class="number">0</span>][<span class="string">'DBInstanceDiskUsed'</span>])    <span class="comment">#获取当前使用磁盘</span></span><br><span class="line">        DiskTotal = ((data)[<span class="string">'Items'</span>][<span class="string">'DBInstanceAttribute'</span>][<span class="number">0</span>][<span class="string">'DBInstanceStorage'</span>])    <span class="comment">#获取总磁盘</span></span><br><span class="line">        DiskUsed_GB = getRDS.convertBytes(self,DiskUsed,lst=lst)<span class="comment">#使用“自动换算单位”的函数</span></span><br><span class="line">        DiskUsed_num = float(getRDS.convertBytes(self,DiskUsed,lst=lst).split(<span class="string">' '</span>, <span class="number">1</span>)[<span class="number">0</span>])    <span class="comment">#提取纯数字</span></span><br><span class="line">        Proportion = <span class="string">"%.2f%%"</span> % ((DiskUsed_num / DiskTotal) * <span class="number">100</span>)      <span class="comment">#转化成百分比</span></span><br><span class="line">        <span class="keyword">return</span> DiskUsed_GB,Proportion<span class="comment">#返回两个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取昨天的日期</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getYesterday</span><span class="params">()</span>:</span></span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    oneday = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">    yesterday = today-oneday</span><br><span class="line">    <span class="keyword">return</span> yesterday</span><br><span class="line"></span><br><span class="line"><span class="comment">#MYSQL录入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql</span><span class="params">(i,usedcapacity)</span>:</span></span><br><span class="line">    db = pymysql.connect(<span class="string">"数据库地址"</span>, <span class="string">"数据库用户"</span>, <span class="string">"密码"</span>, <span class="string">"databases"</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">"INSERT INTO onlinerds (rds_id,rds_name,rds_diskused,date) VALUES ('%s','%s','%s',now())"</span> % (i,dict[i],usedcapacity)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql)        <span class="comment"># 执行sql语句</span></span><br><span class="line">        db.commit()         <span class="comment"># 执行sql语句</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()           <span class="comment"># 发生错误时回滚</span></span><br><span class="line">    db.close()  <span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取昨天的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yes_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(<span class="string">"数据库地址"</span>, <span class="string">"数据库用户"</span>, <span class="string">"密码"</span>, <span class="string">"databases"</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    yes_sql = <span class="string">"select rds_diskused from onlinerds where date like '%s"</span> % (getYesterday()) + <span class="string">" 20:%';"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(yes_sql)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> GB <span class="keyword">in</span> results:</span><br><span class="line">            aaa = GB[<span class="number">0</span>] <span class="comment">#增加一个aaa变量来调整格式</span></span><br><span class="line">            usedcap_yes.append(aaa)<span class="comment">#获取的数据添加到列表里</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Error: unable to fecth data"</span>)</span><br><span class="line">    db.close()  <span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将类实例化</span></span><br><span class="line">gethzRDS = getRDS(<span class="string">"杭州区ak"</span>,<span class="string">"杭州区sk"</span>,<span class="string">"cn-hangzhou"</span>)</span><br><span class="line">getszRDS = getRDS(<span class="string">"深圳区ak"</span>,<span class="string">"深圳区sk"</span>,<span class="string">"cn-shenzhen"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取企业微信token，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(url, corpid, corpsecret)</span>:</span></span><br><span class="line">    token_url = <span class="string">'%s/cgi-bin/gettoken?corpid=%s&amp;corpsecret=%s'</span> % (url, corpid, corpsecret)</span><br><span class="line">    token = json.loads(urllib.request.urlopen(token_url).read().decode())[<span class="string">'access_token'</span>]</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建告警信息json，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messages</span><span class="params">(msg)</span>:</span></span><br><span class="line">    values = &#123;</span><br><span class="line">        <span class="string">"touser"</span>: <span class="string">'@all'</span>,</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">'text'</span>,</span><br><span class="line">        <span class="string">"agentid"</span>: 微信企业号应用号码,</span><br><span class="line">        <span class="string">"text"</span>: &#123;<span class="string">'content'</span>: msg&#125;,</span><br><span class="line">        <span class="string">"safe"</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    msges=(bytes(json.dumps(values), <span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> msges</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送告警信息，用来发送微信企业号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span><span class="params">(url, token, data)</span>:</span></span><br><span class="line">    send_url = <span class="string">'%s/cgi-bin/message/send?access_token=%s'</span> % (url, token)</span><br><span class="line">    respone = urllib.request.urlopen(urllib.request.Request(url=send_url, data=data)).read()</span><br><span class="line">    x = json.loads(respone.decode())[<span class="string">'errcode'</span>]</span><br><span class="line">    <span class="comment"># print(x)</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Success!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Failed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="string">'第一台RDSid'</span>,<span class="string">'第2台RDSid'</span>,<span class="string">'第3台RDSid'</span>,<span class="string">'第4台RDSid'</span>,<span class="string">'第5台RDSid'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        mysql(i,gethzRDS.DiskUsed(i))</span><br><span class="line">x,y = gethzRDS.DiskUsed(i)  <span class="comment">#函数return多个值，就这样拆开，一一添加到list里</span></span><br><span class="line">       usedcap.append(x)<span class="comment">#添加到列表</span></span><br><span class="line">       pro.append(y)<span class="comment">#添加到列表</span></span><br><span class="line">        <span class="keyword">print</span> (i+<span class="string">"  OKok!"</span>)<span class="comment">#证明已经录入到数据库里了</span></span><br><span class="line"></span><br><span class="line">    list = [<span class="string">'第一台RDSid'</span>,<span class="string">'第2台RDSid'</span>,<span class="string">'第3台RDSid'</span>,<span class="string">'第4台RDSid'</span>,<span class="string">'第5台RDSid'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">        mysql(i,getszRDS.DiskUsed(i))</span><br><span class="line">        x, y = getszRDS.DiskUsed(i)</span><br><span class="line">       usedcap.append(x)</span><br><span class="line">       pro.append(y)</span><br><span class="line">        <span class="keyword">print</span> (i+<span class="string">"  OKok!"</span>)</span><br><span class="line"></span><br><span class="line">    yes_mysql()</span><br><span class="line">    print(usedcap)</span><br><span class="line">    print(usedcap_yes)</span><br><span class="line"></span><br><span class="line">    corpid = <span class="string">'微信企业号corpid'</span></span><br><span class="line">    corpsecret = <span class="string">'微信企业号应用的秘钥'</span></span><br><span class="line">    url = <span class="string">'https://qyapi.weixin.qq.com'</span></span><br><span class="line">    msg  = <span class="string">'''【第一台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第2台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第3台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第4台数据库】此时此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    【第5台数据库】此时的容量是%s，昨天的容量是%s，当前的比例是：%s；</span></span><br><span class="line"><span class="string">    '''</span> % (usedcap[<span class="number">0</span>],usedcap_yes[<span class="number">0</span>],pro[<span class="number">0</span>],usedcap[<span class="number">1</span>],usedcap_yes[<span class="number">1</span>],pro[<span class="number">1</span>],usedcap[<span class="number">2</span>],usedcap_yes[<span class="number">2</span>],pro[<span class="number">2</span>],usedcap[<span class="number">3</span>],usedcap_yes[<span class="number">3</span>],pro[<span class="number">3</span>],usedcap[<span class="number">4</span>],usedcap_yes[<span class="number">4</span>],pro[<span class="number">4</span>],usedcap[<span class="number">5</span>],usedcap_yes[<span class="number">5</span>],pro[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送微信告警</span></span><br><span class="line">    test_token = get_token(url, corpid, corpsecret)</span><br><span class="line">    msg_data = messages(msg)</span><br><span class="line">send_message(url, test_token, msg_data)</span><br></pre></td></tr></table></figure></p><p>执行之后，效果如下：<br><img src="/images/getRDS.png" alt="akb48"></p><h2><span id="小数和百分数的相互转换">小数和百分数的相互转换</span></h2><p>百分比转换为小数的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'20%'</span>  <span class="comment"># 默认要转换的百分比是字符串</span></span><br><span class="line">aa = float(s.strip(<span class="string">'%'</span>)) <span class="comment"># 去掉s 字符串中的 %</span></span><br><span class="line">bb = aa/<span class="number">100.0</span>  <span class="comment">#运行环境是Python2.7   其中Python2.X  与 python 3X中的除法是有区别</span></span><br><span class="line"><span class="keyword">print</span> bb<span class="comment"># 输出结果是 0.2</span></span><br></pre></td></tr></table></figure></p><p>小数转换为百分比的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0.3214323</span></span><br><span class="line">bb = <span class="string">"%.2f%%"</span> % (a * <span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span> bb<span class="comment"># 输出结果是32.14%</span></span><br></pre></td></tr></table></figure></p><h2><span id="如果函数返回了多个值">如果函数返回了多个值</span></h2><p>如果函数一次性return了多个值，如何单独获取到这些值？其实这个函数返回的是一个元组。把元组解包，返回结果也可以赋值给单个变量，这时候这个变量值就是函数返回的那个元组本身了。如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, c = myfun()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2><span id="智能转换存储单位">智能转换存储单位</span></h2><p>智能转换<code>bytes</code>为<code>kb/mb/gb/tb/pb</code>的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertBytes</span><span class="params">(bytes, lst=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> lst <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        lst=[<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>]</span><br><span class="line">    i = int(math.floor( <span class="comment"># 舍弃小数点，取小</span></span><br><span class="line">             math.log(bytes, <span class="number">1024</span>) <span class="comment"># 求对数(对数：若 a**b = N 则 b 叫做以 a 为底 N 的对数)</span></span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &gt;= len(lst):</span><br><span class="line">        i = len(lst) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'%.2f'</span> + <span class="string">" "</span> + lst[i]) % (bytes/math.pow(<span class="number">1024</span>, i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    lst = [<span class="string">'Bytes'</span>, <span class="string">'KB'</span>, <span class="string">'MB'</span>, <span class="string">'GB'</span>, <span class="string">'TB'</span>, <span class="string">'PB'</span>]</span><br><span class="line">    bytes = input(<span class="string">'Bytes: '</span>)</span><br><span class="line">    <span class="keyword">print</span> convertBytes(bytes, lst=lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>但是要注意！<code>bytes</code>作为传入值不能为负数，所以如果是负数想要转换单位，先要用<code>abs</code>取绝对值再计算。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.cnblogs.com/xuchunlin/p/6305720.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuchunlin/p/6305720.html</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p04_return_multiple_values_from_function.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p04_return_multiple_values_from_function.html</a><br><a href="https://my.oschina.net/guoenzhou/blog/2989650" target="_blank" rel="noopener">https://my.oschina.net/guoenzhou/blog/2989650</a></p>]]></content>
    
    <summary type="html">
    
      用类一时爽，一直用类一直爽！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>Awk获取最大值、最小值、平均值和求和</title>
    <link href="http://yoursite.com/2019/04/22/Awk%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E5%80%BC%E3%80%81%E6%9C%80%E5%B0%8F%E5%80%BC%E3%80%81%E5%B9%B3%E5%9D%87%E5%80%BC%E5%92%8C%E6%B1%82%E5%92%8C/"/>
    <id>http://yoursite.com/2019/04/22/Awk获取最大值、最小值、平均值和求和/</id>
    <published>2019-04-22T02:33:40.000Z</published>
    <updated>2019-04-22T07:37:22.412Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>在zabbix的监控中，很多场合需要监控到日志里的一些数字，比如下面这个日志：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">53.231</span> [pool<span class="number">-12</span>-thread<span class="number">-2</span>] INFO com.hswx.css.ads.pojo.M3uFile [<span class="number">221</span>]  cloud upload index success, CloudfileName=/<span class="number">4J</span>0463CPAG1FEDD_record/cloud_1/<span class="number">20190422104242898</span>_0_c3237911422543f8a66816d043eabb50.m3udeviceId4J0463CPAG1FEDD cost:<span class="number">7</span></span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">52.795</span> [pool<span class="number">-9</span>-thread<span class="number">-13</span>] INFO com.hswx.css.ads.pojo.M3uFile [<span class="number">333</span>]  cloud upload record success, CloudFileName=/<span class="number">4</span>G00B65PAG1C125_record/cloud_1/<span class="number">20190422103141454</span>_0_9d3ccc60d3f6429c8b5d79aa3222991f_365b2bc872ed42d59de82f0af9b1016d<span class="number">-68237400</span>_1047356.dav deviceId=<span class="number">4</span>G00B65PAG1C125 cost:<span class="number">12</span></span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">52.888</span> [pool<span class="number">-9</span>-thread<span class="number">-19</span>] INFO com.hswx.css.ads.pojo.M3uFile [<span class="number">333</span>]  cloud upload record success, CloudFileName=/<span class="number">4</span>G00B65PAG7A8B1_record/cloud_1/<span class="number">20190422104014516</span>_0_76184831e6e0400994cf6baf45952368_fdbe495eee81458a8e55ec0bfdebecd5<span class="number">-8385407</span>_1045239.dav deviceId=<span class="number">4</span>G00B65PAG7A8B1 cost:<span class="number">16</span></span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">52.939</span> [pool<span class="number">-9</span>-thread<span class="number">-7</span>] INFO com.hswx.css.ads.pojo.M3uFile [<span class="number">333</span>]  cloud upload record success, CloudFileName=/<span class="number">5</span>A00D4EPBZE212D_record/cloud_1/<span class="number">20190422104228493</span>_0_2165fd85c6064b43abf0398bdf9c0916_fd279fa8809f45279ae76577629d27f5<span class="number">-43910516</span>_1058372.dav deviceId=<span class="number">5</span>A00D4EPBZE212D cost:<span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>这段日志主要记录m3u录像文件上传到云存储的情况，后面”cost:”那部分就是记录本次上传操作耗时的时间，我们现在要监控这个时间，如果这个时间大于100，我们就认为线路出了问题。</p><p>但是这里有一个问题，因为日志量比较大，一秒钟会刷出来很多的值，比如使用<code>tail 日志文件路径|grep &quot;cost:&quot; | cut -d &quot;:&quot; -f 4</code>：<br><img src="/images/mrs5.png" alt="akb48"></p><p>那么我们就要从这里面取出最大值，这样的场景用awk是最方便的。</p><h2><span id="具体语句">具体语句</span></h2><p>求最大值：<code>awk &#39;BEGIN {max = 0} {if ($1+0 &gt; max+0) max=$1} END {print &quot;&quot;, max}&#39;</code><br>求最小值：<code>awk &#39;BEGIN {min = 65536} {if ($1+0 &lt; min+0) min=$1} END {print &quot;Min=&quot;, min}&#39;</code><br>求和：<code>awk &#39;{sum+=$1} END {print &quot;Sum= &quot;, sum}&#39;</code><br>求平均值：<code>awk &#39;{sum+=$1} END {print &quot;Avg= &quot;, sum/NR}&#39;</code></p><p>把上面的语句用于本次案例中，效果如下：<br><img src="/images/mrs6.png" alt="akb48"></p><p>然后就是配置到<code>zabbix-agent.conf</code>里即可。如果要用zabbix用户登录bash，使用命令：<code>su -s /bin/bash zabbix</code>。<br><img src="/images/durant3+1.gif" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      Awk是一个神器，要是真的好好把玩的话能写一本书。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="Awk" scheme="http://yoursite.com/tags/Awk/"/>
    
  </entry>
  
  <entry>
    <title>在Django里插入paramiko实现批量操作</title>
    <link href="http://yoursite.com/2019/04/15/%E5%9C%A8Django%E9%87%8C%E6%8F%92%E5%85%A5paramiko%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/04/15/在Django里插入paramiko，实现批量操作/</id>
    <published>2019-04-15T05:52:29.000Z</published>
    <updated>2019-04-15T12:34:59.500Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>Django:2.1.1<br>paramiko:2.4.1<br>Python:3.6.5</p><p>paramiko在“python批量操作”范围内占据着龙头老大的的地位，它主要就是通过IP、端口和密码登录到对应的服务器执行具体的命令。在Django页面里，我们有时候需要批量操作资产去执行同一个命令，这个时候就可以把paramiko接入到django里。</p><p>首先先<code>pip install paramiko</code>，然后在app所在的文件夹里的<code>models.py</code>里添加新的数据库：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="comment">#这里是服务器数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'服务器名称'</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    inIP = models.GenericIPAddressField(verbose_name=<span class="string">'服务器内网IP地址'</span>)</span><br><span class="line">    outIP = models.GenericIPAddressField(verbose_name=<span class="string">'服务器外网IP地址'</span>,default=<span class="string">'0.0.0.0'</span>)</span><br><span class="line">    port = models.IntegerField(verbose_name=<span class="string">'登录端口'</span>,default=<span class="string">'这里是SSH端口'</span>)</span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">'登录用户名'</span>,max_length=<span class="number">50</span>,default=<span class="string">'这里是登录用户名'</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">'登录密码'</span>,max_length=<span class="number">100</span>,default=<span class="string">'这里是服务器密码'</span>)</span><br><span class="line">    signtime = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    remark = models.CharField(verbose_name=<span class="string">'甲方环境'</span>,max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></p><p>返回到<code>manage.py</code>这一层的目录，执行<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>，这个server表就是用来存储资产资料的。</p><p>整个paramiko执行的逻辑是这样的：首先在<code>paramiko.html</code>里展示所有的资产信息，同时页面有一个button按钮，点击这个button，后台开始对页面里所有的服务器执行同样的命令（这里举例执行<code>date</code>命令），将执行的结果生成一个新的页面叫<code>result.html</code>，页面跳转到<code>result.html</code>给用户展示。</p><h2><span id="具体配置">具体配置</span></h2><p>有了上面的铺垫，现在说一下paramiko在django里的具体配置。首先先在app所在的文件夹下新建一个<code>paramiko_client.py</code>的文件，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,paramiko</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> server<span class="comment">#注意这里的.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamikoClient</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client = paramiko.SSHClient()<span class="comment">#创建sshclient对象</span></span><br><span class="line">        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<span class="comment">#允许将信任的主机自动加入到host_allow 列表，此方法必须放在connect方法的前面</span></span><br><span class="line">        self.sftp_client = <span class="keyword">None</span></span><br><span class="line">        self.client_state = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self,sshinfo)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.client.connect(hostname=sshinfo.outIP,port=sshinfo.port,username=sshinfo.username,password=sshinfo.password,timeout=<span class="number">1.0</span>)<span class="comment">#调用connect方法连接服务器</span></span><br><span class="line">            self.client_state = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> (e)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.client.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_cmd</span><span class="params">(self,cmd_str)</span>:</span></span><br><span class="line">        stdin,stdout,stderr = self.client.exec_command(cmd_str)</span><br><span class="line">        <span class="keyword">return</span> stdout.read()</span><br></pre></td></tr></table></figure></p><p>然后在<code>views.py</code>里增加如下内容：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> .paramiko_client <span class="keyword">import</span> ParamikoClient<span class="comment">#引用上面那个文件里的ParamikoClient函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量操作</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paramiko</span><span class="params">(request)</span>:</span></span><br><span class="line">    servers = server.objects.all()<span class="comment">#获取server这个表里所有的资产信息</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'agparamiko.html'</span>,&#123;<span class="string">'servers'</span>:servers&#125;)<span class="comment">#反馈页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量操作结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_ssh_cmd</span><span class="params">(request)</span>:</span></span><br><span class="line">    sshs = server.objects.all().filter(inIP=<span class="string">'192.168.1.1'</span>)<span class="comment">#这里我就拿出来内网IP是192.168.1.1这个机器的例子</span></span><br><span class="line">    cmd_res = &#123;&#125;<span class="comment">#设定一个空的列表</span></span><br><span class="line">    <span class="keyword">for</span> ssh <span class="keyword">in</span> sshs:</span><br><span class="line">        client = ParamikoClient()</span><br><span class="line">        client.connect(ssh)</span><br><span class="line">        res = client.run_cmd(<span class="string">'date'</span>)<span class="comment">#执行的命令是date</span></span><br><span class="line">        cmd_res[ssh.name] = res<span class="comment">#给列表的元素一一对应赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'result.html'</span>,&#123;<span class="string">'cmd_res'</span>:cmd_res&#125;)<span class="comment">#反馈界面</span></span><br></pre></td></tr></table></figure></p><p><code>urls.py</code>的对应内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   path(<span class="string">r'paramiko.html'</span>,views.paramiko,name=<span class="string">"paramiko"</span>),    <span class="comment">#批量操作界面</span></span><br><span class="line">   path(<span class="string">r'result.html'</span>,views.run_ssh_cmd,name=<span class="string">"run_ssh_cmd"</span>),    <span class="comment">#批量操作界面</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>至于<code>result.html</code>就很简单了，主体部分代码是：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="table-responsive"&gt;  &lt;!-- 响应式表格 --&gt;</span><br><span class="line">        &lt;table id="server_table" class="table table-striped table-bordered table-hove"&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                                &lt;th&gt;服务器名称&lt;/th&gt;</span><br><span class="line">                                &lt;th&gt;执行结果&lt;/th&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                        &#123;% <span class="keyword">for</span> key,value <span class="keyword">in</span> cmd_res.items %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; key &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>保存之后，系统重新启动django，在页面执行的效果如下：<br><img src="/images/gateone16.gif" alt="akb48"></p><h2><span id="django的model加密">Django的model加密</span></h2><p>上面已经实现了通过paramiko批量操作，但是在这个过程中，我们把密码明文的保存在mysql里，这样无疑是有安全隐患的。于是乎就有一个新的需求：当我们输入到mysql的时候是加密的，从mysql取值的时候是解密的，那么这样的需求可以实现么？当然可以，使用<code>django-fernet-fields</code>。</p><p>首先要<code>pip install django-fernet-fields</code>安装这个插件，然后在对应的models.py里添加如下语句即可：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fernet_fields <span class="keyword">import</span> EncryptedTextField,EncryptedIntegerField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'姓名'</span>,max_length=<span class="number">1000</span>)</span><br><span class="line">    cardid = EncryptedTextField()<span class="comment">#加密字段</span></span><br><span class="line">    phone = EncryptedIntegerField()<span class="comment">#加密字段</span></span><br><span class="line">    address = models.CharField(verbose_name=<span class="string">'住址'</span>,max_length=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p>然后在<code>manage.py</code>同级文件夹里执行<code>python manage.py makemigrations</code>和<code>python manage.py makemigrations</code>，发现新的表已经生成，然后在<code>admin.py</code>里添加后台展示代码：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> MyModel</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModelAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>,<span class="string">'cardid'</span>,<span class="string">'phone'</span>,<span class="string">'address'</span>)</span><br><span class="line"></span><br><span class="line">admin.site.register(MyModel,MyModelAdmin)</span><br></pre></td></tr></table></figure></p><p>然后登陆到django后台，发现一个叫<code>My models</code>的表已经生成了，那么我们添加一条记录如下：<br><img src="/images/gateone17.png" alt="akb48"></p><p>跑到mysql命令行一看：<br><img src="/images/gateone18.png" alt="akb48"></p><p>可见cardid和phone这两个字段已经被加密了，但是在<code>views.py</code>里使用<code>.objects.values()</code>方法获取是直接得到明文的，这样就达到了预期的效果。</p><p>补充一下，<code>EncryptedIntegerField</code>这个其实不太实用，它不能保存超过2147483647的数字，也就是说电话号码（11位）是无法用这个方法保存的…</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.maiziedu.com/wiki/frame/embed/" target="_blank" rel="noopener">http://www.maiziedu.com/wiki/frame/embed/</a><br><a href="https://django-fernet-fields.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://django-fernet-fields.readthedocs.io/en/latest/</a><br><a href="https://pypi.org/project/django-encrypted-model-fields/" target="_blank" rel="noopener">https://pypi.org/project/django-encrypted-model-fields/</a>  据说这个方法也能实现加密效果，我没有尝试<br><img src="/images/MJ1.gif" alt="akb48" title="帮主实战中罚球线起跳扣篮"></p>]]></content>
    
    <summary type="html">
    
      paramiko的SSHClient搭配get、put是可以实现文件传输的
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="paramiko" scheme="http://yoursite.com/tags/paramiko/"/>
    
  </entry>
  
  <entry>
    <title>一个批量部署脚本（未完成）</title>
    <link href="http://yoursite.com/2019/04/12/%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/04/12/一个批量部署脚本/</id>
    <published>2019-04-12T08:40:16.000Z</published>
    <updated>2019-04-29T12:04:36.965Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="脚本设计">脚本设计</span></h2><p>首先安装ansible，并且用group1,group2…对相同模块的服务器进行分组，注意！group1只能是一台服务器，剩下的服务器均摊。</p><p>按模块依赖顺序输入，模块名称用逗号分隔。进行for循环，先使用ansible对group1进行部署工作，部署模块并且启动之后，暂停600秒，让开发利用这10分钟检查日志和配置项是否有问题，如果有问题就ctrl+c，在暂停600秒的同时，脚本新开一个进程A，paramiko到第一台服务器里，检查日志是否出现ERROR等关键字样，如果有就输出，600秒结束之后，关闭线程A，继续部署group2，直至名单里所有的模块都部署完毕。</p><p>作画的意思如下：<br><img src="/images/multiprocessing1.png" alt="akb48"></p><h2><span id="用python去实现tailf功能">用python去实现tailf功能</span></h2><p>在shell下执行<code>tail -f</code>就是一句话的事，但是用python实现则需要一个脚本了，内容如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watch</span><span class="params">(fn, words)</span>:</span></span><br><span class="line">    fp = open(fn, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        new = fp.readline()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> new:</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">in</span> new:</span><br><span class="line">                    <span class="keyword">yield</span> (word, new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fn = <span class="string">'文件路径'</span></span><br><span class="line">words = [<span class="string">'关键词'</span>]</span><br><span class="line"><span class="keyword">for</span> hit_word, hit_sentence <span class="keyword">in</span> watch(fn, words):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"发现关键词 %r 在日志里: %r"</span> % (hit_word, hit_sentence)</span><br></pre></td></tr></table></figure></p><h2><span id="python实现线程通信">python实现线程通信</span></h2><p>假设我们有一个函数叫AAA，希望脚本能开两个线程，线程A是等待5秒，线程B是不断的执行AAA（），直到5秒结束，线程B也停止线程AAA（）。那么脚本如下：</p><h2><span id="按行读取文件取各种集合">按行读取文件取各种集合</span></h2><p>python对于两个字典求交集（&amp;），差集（-），全集（|）比较简单，而对于两个文件按行取集合的方法如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s1 = set(open(<span class="string">r'C:\Users\33664\Desktop\aaa.txt'</span>,<span class="string">'r'</span>).readlines())</span><br><span class="line">s2 = set(open(<span class="string">r'C:\Users\33664\Desktop\bbb.txt'</span>,<span class="string">'r'</span>).readlines())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'交集是: %s'</span> % (s1.intersection(s2)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'并集是: %s'</span> % (s1.union(s2)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'差集是: %s'</span>%(s1.difference(s2)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'dif: %s'</span>%(s1.difference(s2).union(s2.difference(s1))))</span><br></pre></td></tr></table></figure></p><h2><span id="_的问题">_的问题</span></h2><p>有些python脚本在for循环里会有这样的代码：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"我想放假，我想放假"</span>)</span><br></pre></td></tr></table></figure></p><p>这里面的独立_其实没有特殊的意义，仅仅是是用作一个名字，来表示某个变量是临时的或无关紧要的。</p><p>不过_还有其他的用途，它可以展示最近的一次表达式的结果，比如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">20</span> + <span class="number">3</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(_)</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure></p><h2><span id="额外补充">额外补充</span></h2><p>1.tailf命令主动停止命令：<code>tail -f 目标日志|sed &#39;/启动成功/Q&#39;</code>，此语句会在”启动成功”打印时退出，但log只能打印到”启动成功”的上一行；<br>2.<code>subprocess.call(&quot;命令1&quot;)</code>，命令1是按顺序执行的，效果等同于<code>subprocess.Popen(&quot;命令1&quot;).wait()</code>；<code>subprocess.Popen(&quot;命令2&quot;)</code>，命令2是与前一个命令并发进行的；  </p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/1703640/how-to-implement-a-pythonic-equivalent-of-tail-f" target="_blank" rel="noopener">https://stackoverflow.com/questions/1703640/how-to-implement-a-pythonic-equivalent-of-tail-f</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p03_communicating_between_threads.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p03_communicating_between_threads.html</a><br><a href="https://stackoverflow.com/questions/22698754/subprocess-calls-are-they-done-in-parallel/22698825#22698825" target="_blank" rel="noopener">https://stackoverflow.com/questions/22698754/subprocess-calls-are-they-done-in-parallel/22698825#22698825</a><br><img src="/images/手刀秒饿狼.gif" alt="akb48" title="琦玉与饿狼的第一次会面"></p>]]></content>
    
    <summary type="html">
    
      缓存设计两条规则：1.越靠近用户的请求越好，比如能用本地缓存的就不要发送HTTP请求，能用CDN缓存的就不要打到Web服务器，能用Nginx缓存的就不要用数据库的缓存；2.尽量使用本进程和本机的缓存解决，因为跨了进程和机器甚至机房，缓存的网络开销就会非常大，在高并发的时候会非常明显。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>将Redis监控细节添加到Django页面里</title>
    <link href="http://yoursite.com/2019/04/09/%E5%B0%86redis%E7%9B%91%E6%8E%A7%E7%BB%86%E8%8A%82%E6%B7%BB%E5%8A%A0%E5%88%B0Django%E9%A1%B5%E9%9D%A2%E9%87%8C/"/>
    <id>http://yoursite.com/2019/04/09/将redis监控细节添加到Django页面里/</id>
    <published>2019-04-09T12:50:31.000Z</published>
    <updated>2019-05-06T04:09:12.007Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Redis的监控一直是重点中的重点，市面上开源的Redis界面监控也不在少数了，但是自己做一个监控页面更加有针对性，而且更加有逼格。我们主要监控redis除了常规的cpu、内存、Key数之外，还有如下几个方面：阻塞客户端数量、使用内存峰值、内存碎片率、缓存命中率、失效KEY、慢日志和连接数。这里挑几个简单的说。</p><h2><span id="获取连接细节情况">获取连接细节情况</span></h2><p>首先先来搞定“获取redis的连接细节”。在django里先做一个model,如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">redisconnection</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">rank = models.CharField(verbose_name=<span class="string">'排名'</span>,max_length=<span class="number">10</span>)</span><br><span class="line">    num = models.CharField(verbose_name=<span class="string">'服务器连接数'</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    ip = models.GenericIPAddressField(verbose_name=<span class="string">'服务器内网IP地址'</span>)</span><br><span class="line">    date = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    time = models.TimeField(auto_now_add=<span class="keyword">False</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.host</span><br></pre></td></tr></table></figure></p><p>可见我们只是需要排名、具体的IP、当时有多少连接以及当时时间这4个指标而已。</p><p>我承认我道行不够，捅咕两个小时也没有研究出来怎么用python2.7去获取redis的连接数细节，于是乎就用shell写了一个简单的脚本。如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#获取当前连接最多的前五个IP地址和数量到Mysql</span><br><span class="line">redis-cli -h redis地址 -p 6379 -a redis密码 client list | awk &apos;&#123;print $2&#125;&apos;| cut -d = -f 2| cut -d : -f 1 | sort | uniq -c | sort -rn |head -5 &gt; clientip.txt</span><br><span class="line">MYSQL=&quot;mysql -h数据库地址 -u数据库账号 -p数据库密码 --default-character-set=utf8 -A -N&quot;</span><br><span class="line">cat -n clientip.txt | while read rank num IP</span><br><span class="line">do</span><br><span class="line">        echo $&#123;num&#125;</span><br><span class="line">        echo $&#123;IP&#125; </span><br><span class="line">        sql=&quot;insert into databases.table(num,ip,date,time,rank) values(&apos;$&#123;num&#125;&apos;,&apos;$&#123;IP&#125;&apos;,curdate(),now(),&apos;$&#123;rank&#125;&apos;);&quot;</span><br><span class="line">        $MYSQL -e &quot;$sql&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>这里先简单解释一下：<br>1.<code>client list</code>是查看redis连接细节的命令，然后通过awk获取第二列，再分别通过“=”和“，”来分割两次，排序去重统计个数最后取出前五名输入到<code>clientip.txt</code>这个文件里；<br>2.连接mysql，-A的含义是不去预读全部数据表信息；-N的含义是获取数据信息省去列名称;<br>3.使用<code>cat -n</code>自动获取到行号当做排名，循环赋值；<br>4.<code>curdate()</code>,<code>now()</code>这俩是sql，但是需要shell里正确使用sql就要<code>-e</code>;</p><p>执行效果如下：<br><img src="/images/gateone12.png" alt="akb48"></p><p>剩下的内容就是在<code>views.py</code>里拿值然后通过<code>render</code>反馈到前端页面，这里不说了。</p><p>如果使用了Redis中间件，那么就不能统计redis的<code>client list</code>了，而是到中间件服务器里，使用<code>ss -art | awk &#39;{print $5}&#39; | grep &#39;^[1-9]&#39; | cut -d : -f 1 | sort | uniq -dc | sort -nr</code>获取详细连接情况。</p><h2><span id="获取缓存命中率">获取缓存命中率</span></h2><p>缓存命中率是<code>info Stats</code>命令里<code>keyspace_hits/(keyspace_hits+keyspace_misses)</code>的值，比如我这个redis：<br><img src="/images/gateone13.png" alt="akb48"></p><p>这个值正常来说应该是90%以上，如果缓存命中率过低，那么要排查对缓存的用法是否有问题，我这个就很不合格…</p><p>获取缓存命中率的shell脚本如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#获取当前缓存命中率到Mysql</span></span><br><span class="line">hit=$(redis-cli -h redis地址 -p <span class="number">6379</span> -a redis密码 info Stats | grep <span class="string">"keyspace_hits"</span> | cut -d : -f <span class="number">2</span>)</span><br><span class="line">miss=$(redis-cli -h redis地址 -p <span class="number">6379</span> -a redis密码 info Stats | grep <span class="string">"keyspace_misses"</span> | cut -d : -f <span class="number">2</span>)</span><br><span class="line">HIT=$(echo $hit | tr -d <span class="string">'\r'</span>)</span><br><span class="line">MISS=$(echo $miss | tr -d <span class="string">'\r'</span>)</span><br><span class="line">total=$(expr $HIT + $MISS)</span><br><span class="line">percent=$(awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span>$HIT<span class="string">'/'</span>$total<span class="string">'&#125;'</span>)</span><br><span class="line">MYSQL=<span class="string">"mysql -h数据库地址 -u数据库账号 -p数据库密码 --default-character-set=utf8 -A -N"</span></span><br><span class="line">sql=<span class="string">"insert into databases.table(num,date,time) values('$&#123;percent&#125;',curdate(),now());"</span></span><br><span class="line">$MYSQL -e <span class="string">"$sql"</span></span><br></pre></td></tr></table></figure></p><p>这里要注意！<code>hit</code>和<code>miss</code>结果是自带”\r”的，所以要去掉。不然的话就会有<code>expr: non-numeric argument</code>。而且如果用bc命令获取除法结果的话，低于1的值是不会出现整数0，即如果得到的结果是0.97，那么只会显示.97，至于如何出现这个0，可以去看 <a href="http://www.361way.com/linux-bc-point-zero/4960.html" target="_blank" rel="noopener">http://www.361way.com/linux-bc-point-zero/4960.html</a> 。</p><p>现在已经通过脚本取到了值，那么剩下的内容就是django去弄一个model，之后在<code>views.py</code>里拿值然后通过<code>render</code>反馈到前端页面，这里不说了。执行效果如下：<br><img src="/images/gateone14.png" alt="akb48"></p><h2><span id="其他补充">其他补充</span></h2><p>redis的慢日志操作也是我们比较关注的一点。一般来说我们使用<code>slowlog len</code>来获取当前慢日志的总条数，而是用<code>slowlog reset</code>对其进行清理工作。获取它的shell脚本跟上面两个大同小异，这里也略过不表了。</p><p>如果要是想获取redis的cpu和内存，最好的方法通过zabbix拿值，CPU使用率的item是：<code>system.cpu.util[]</code>，内存使用率的item是：<code>vm.memory.size[pavailable]</code>。</p><p>整个页面做完的效果如下：<br><img src="/images/gateone15.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009915519</a><br><a href="https://blog.csdn.net/secretx/article/details/73498148" target="_blank" rel="noopener">https://blog.csdn.net/secretx/article/details/73498148</a><br><a href="http://www.cnblogs.com/iforever/p/4459857.html" target="_blank" rel="noopener">http://www.cnblogs.com/iforever/p/4459857.html</a><br><a href="https://morrisjs.github.io/morris.js/lines.html" target="_blank" rel="noopener">https://morrisjs.github.io/morris.js/lines.html</a></p>]]></content>
    
    <summary type="html">
    
      有些docker容器没有带有/bin/bash文件，遇到这样的现象就直接使用“docker exec -ti 容器ID 具体的bash命令”即可达到目的。
    
    </summary>
    
      <category term="监控与技术" scheme="http://yoursite.com/categories/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Apache配置Https</title>
    <link href="http://yoursite.com/2019/04/04/Gitlab%E9%85%8D%E7%BD%AEHttps/"/>
    <id>http://yoursite.com/2019/04/04/Gitlab配置Https/</id>
    <published>2019-04-04T05:24:41.000Z</published>
    <updated>2019-04-04T08:47:47.956Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="httpd配置https">Httpd配置https</span></h2><p>事前说明，我的Httpd版本是：<code>Server version: Apache/2.4.6 (CentOS)</code></p><p>首先先准备https证书文件，把他们传递到apache服务器的<code>/etc/httpd/ssl</code>文件夹里，然后安装<code>yum install -y mod_ssl openssl</code>，安装完毕之后，发现<code>/etc/httpd/conf.d</code>文件夹下多了一个<code>ssl.conf</code>，出于安全先备份一份，然后修改<code>ssl.conf</code>的如下几个地方：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">未涉及的字段保留原样</span><br><span class="line">DocumentRoot <span class="string">"/var/www/html"</span><span class="comment">#网站的目录</span></span><br><span class="line">ServerName 自己的域名</span><br><span class="line">SSLCertificateFile /etc/httpd/ssl/imoulife.crt<span class="comment">#秘钥crt文件及路径</span></span><br><span class="line">SSLCertificateKeyFile /etc/httpd/ssl/imoulife.key<span class="comment">#秘钥key文件及路径</span></span><br></pre></td></tr></table></figure></p><p>保存退出，重启httpd即可生效。注意！因为一个ip只能绑一个SSL，因此这里就算在写了两份<code>&lt;VirtualHost *:443&gt;...&lt;/VirtualHost&gt;</code>，也还是会读取第一个SSL。</p><h2><span id="httpd配置http跳转https">Httpd配置http跳转https</span></h2><p>如果想要达到http跳转https的话，还是在ssl文件里的最下面追加这段内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost  *:<span class="number">80</span>&gt;</span><br><span class="line">        RewriteEngine on</span><br><span class="line">        RewriteCond %&#123;SERVER_PORT&#125; !^<span class="number">443</span>$</span><br><span class="line">        RewriteRule ^/?(.*)$ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [L,R]</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>如果只是单url跳转，比如<code>http://test.imoulife.com/login</code>跳转到<code>https://test.imoulife.com/login</code>，其他的域名依旧是http。那么就把最后一句改成:<code>RewriteRule ^/logon.do$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]</code>，重启httpd就生效。</p><h2><span id="httpd配置ip白名单">httpd配置ip白名单</span></h2><p>设置了https不能说很安全，我们还需要设置IP白名单才能让WEB界面更加放心。由于我这个httpd主要是给zabbix使用的，所以就拿访问zabbix的IP白名单为例。</p><p>首先打开<code>/etc/httpd/conf.d/zabbix.conf</code>，修改如下地方：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Alias /zabbix /usr/share/zabbix</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/usr/share/zabbix"</span>&gt;</span><br><span class="line">   Options FollowSymLinks</span><br><span class="line">   AllowOverride <span class="keyword">None</span></span><br><span class="line">   <span class="comment">#Require all granted#这句话是任何人都可以访问的意思</span></span><br><span class="line">&lt;RequireAll&gt;</span><br><span class="line">       Require ip <span class="number">192.168</span><span class="number">.1</span><span class="comment">#准许192.168.1开头的IP地址的访问</span></span><br><span class="line">Require ip <span class="number">192.168</span><span class="number">.1</span><span class="number">.104</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.205</span><span class="comment">#准许固定IP地址访问</span></span><br><span class="line">Require ip <span class="number">10.1</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span><span class="comment">#网络/子网掩码的访问</span></span><br><span class="line">   &lt;/RequireAll&gt;</span><br></pre></td></tr></table></figure></p><p>保存退出，重启httpd即可。</p><h2><span id="gitlab配置https">Gitlab配置Https</span></h2><p>我的gitlab是容器做的，其实无论容器还是非容器其实配置都是一样的。</p><p>首先先开放443端口给相应的IP，然后进入容器，在<code>/etc/gitlab/</code>下先创建一个ssl文件夹，里面放入https证书，如图：<br><img src="/images/https1.png" alt="akb48"></p><p>放好证书文件之后，返回上一级目录，修改一下<code>gitlab.rb</code>文件：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">'https的域名'</span></span><br><span class="line">nginx[<span class="string">'redirect_http_to_https'</span>] = true</span><br><span class="line">nginx[<span class="string">'redirect_http_to_https_port'</span>] = <span class="number">80</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate'</span>] = <span class="string">"上面https证书的路径/crt文件名称"</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate_key'</span>] = <span class="string">"上面https证书的路径/key文件名称"</span></span><br></pre></td></tr></table></figure></p><p>然后执行<code>gitlab-ctl reconfigure</code>更新配置，完事之后找到nginx的gitlab配置文件<code>gitlab-http.conf</code>，发现由于更新了配置，所以里面已经生成好了一份新的配置文件，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen *:<span class="number">443</span> ssl http2;</span><br><span class="line">  server_name https的域名;</span><br><span class="line">  server_tokens off; </span><br><span class="line">  client_max_body_size <span class="number">0</span>;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate 上面https证书的路径/crt文件名称;</span><br><span class="line">  ssl_certificate_key 上面https证书的路径/key文件名称;</span><br><span class="line">  .............................  <span class="comment">#剩余的信息省略了</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">server&#123;</span><br><span class="line">listen*:<span class="number">80</span>;</span><br><span class="line">server_name https的域名;</span><br><span class="line">rewrite^(.*)$https://$host$<span class="number">1</span>permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>确认各个信息无误之后，退出执行<code>gitlab-ctl restart</code>即可。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/" target="_blank" rel="noopener">http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/</a><br><a href="http://zhizhi.tangliangdong.me/2017/10/12/2017-10-12-http-to-https/" target="_blank" rel="noopener">http://zhizhi.tangliangdong.me/2017/10/12/2017-10-12-http-to-https/</a><br><a href="https://blog.mallux.me/2017/02/27/gitlab/" target="_blank" rel="noopener">https://blog.mallux.me/2017/02/27/gitlab/</a><br><a href="https://blog.csdn.net/leshami/article/details/78521031" target="_blank" rel="noopener">https://blog.csdn.net/leshami/article/details/78521031</a></p>]]></content>
    
    <summary type="html">
    
      如果gitlab项目太多并发太高触发了IP屏蔽，需要将RackAttack的IP白名单对应开放
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
      <category term="httpd" scheme="http://yoursite.com/tags/httpd/"/>
    
      <category term="白名单" scheme="http://yoursite.com/tags/%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix-api获取值在Django页面展示</title>
    <link href="http://yoursite.com/2019/04/02/Zabbix-api%E8%8E%B7%E5%8F%96%E5%80%BC%E5%9C%A8Django%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/"/>
    <id>http://yoursite.com/2019/04/02/Zabbix-api获取值在Django页面展示/</id>
    <published>2019-04-02T08:38:51.000Z</published>
    <updated>2019-04-03T11:20:40.340Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>私有云的同学要求把几个涉及录像的模块带宽每小时从zabbix获取一次，然后在django页面展示出来。由于django跟zabbix并不在一个服务器，那么就采取“zabbix上跑脚本，脚本将实时的带宽值存储到某个数据库里，然后django去数据库取值并且展示”这样的思路来解决问题。</p><p>python3 + Django 2.1.1<br>APP：accessgateway</p><h2><span id="建立数据库">建立数据库</span></h2><p>首先需要先建立数据模型，在app下的<code>models.py</code>里添加如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里是数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lbmrs</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    host = models.CharField(verbose_name=<span class="string">'MRS服务器名称'</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    inbandwidth = models.FloatField(verbose_name=<span class="string">'入网带宽'</span>)</span><br><span class="line">    outbandwidth = models.FloatField(verbose_name=<span class="string">'出网带宽'</span>)</span><br><span class="line">date = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    time = models.TimeField(auto_now_add=<span class="keyword">False</span>, auto_now=<span class="keyword">True</span>)<span class="comment">#获取录入时间，而且有新录入就会覆盖</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.host</span><br></pre></td></tr></table></figure></p><p><code>admin.py</code>里添加对应的值：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> lbmrs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lbmrsAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'host'</span>,<span class="string">'inbandwidth'</span>,<span class="string">'outbandwidth'</span>,<span class="string">'date'</span>,<span class="string">'time'</span>)</span><br><span class="line">admin.site.register(lbmrs,lbmrsAdmin)</span><br></pre></td></tr></table></figure></p><p>注意!由于我们使用了<code>TimeField</code>，所以要修改一下<code>setting.py</code>:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>这样就能输入准确的时间，不然就是UTC时间。然后就是<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>，如果在<code>python manage.py migrate</code>的时候出现如下<code>MySQL Strict Mode is not set for database connection &#39;default&#39;</code>的提示，如图：<br><img src="/images/gateone6.png" alt="akb48"></p><p>这提示其实不重要，主要是说当前连接mysql的方式不严谨，如果要避免还是修改一下<code>setting.py</code>，新加一个<code>OPTIONS</code>:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line"><span class="comment">#        'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line"><span class="comment">#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'这里是database名'</span>,  </span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'这里是用户名'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'这里是密码'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'这里是数据库地址'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">"init_command"</span>: <span class="string">"SET sql_mode='STRICT_TRANS_TABLES'"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据库方面完成，在后台界面里随便添加一个值，如下：<br><img src="/images/gateone7.png" alt="akb48"></p><p>然后在mysql命令行看一下效果：<br><img src="/images/gateone8.png" alt="akb48"></p><h2><span id="将值录入数据库">将值录入数据库</span></h2><p>由于我使用的是阿里云数据库，所以要现在阿里云数据库里对django服务器和zabbix服务器同时开放白名单。</p><p>使用zabbix-api获取zabbix数值的脚本以前在 <a href="https://rorschachchan.github.io/2019/01/09/%E4%BD%BF%E7%94%A8Zabbix%E7%9A%84python-api%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%91%E6%8E%A7%E5%80%BC/" target="_blank" rel="noopener">https://rorschachchan.github.io/2019/01/09/%E4%BD%BF%E7%94%A8Zabbix%E7%9A%84python-api%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%91%E6%8E%A7%E5%80%BC/</a> 里面说过了，要把获取的值保存到mysql里，只需要添加下面的代码：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将值保存到mysql</span></span><br><span class="line">connection = pymysql.connect(host=<span class="string">'Mysql地址'</span>, port=<span class="number">3306</span>, user=<span class="string">'账号'</span>, passwd=<span class="string">'密码'</span>, db=<span class="string">'databases名称'</span>)</span><br><span class="line">cursor = connection.cursor()        <span class="comment"># 创建游标</span></span><br><span class="line"><span class="comment"># 执行SQL,插入多行数据并返回受影响行数</span></span><br><span class="line">sql = cursor.executemany(<span class="string">"insert into accessgateway_ldmrs (host,inbandwidth,outbandwidth,time,date) values (%s,%s,%s,now(),curdate()))"</span>,[(<span class="string">"第一台机器"</span>,firstin,firstout),(<span class="string">"第二台机器"</span>,secondin,secondout),(<span class="string">"第三台机器"</span>,thirdin,thirdout), (<span class="string">"第四台机器"</span>,fourthin,fourthout),(<span class="string">"第五台机器"</span>,fivethin,fivethout)])</span><br><span class="line">connection.commit() <span class="comment"># 提交,不然无法保存修改</span></span><br><span class="line">cursor.close()      <span class="comment"># 关闭游标</span></span><br><span class="line">connection.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure></p><p>依旧是每小时执行一次，看见mysql能成功存储到值，如图：<br><img src="/images/gateone9.png" alt="akb48"></p><h2><span id="将数据库的值反馈到页面上">将数据库的值反馈到页面上</span></h2><p>数据库现在已经取到了值，那么思路就很简单了：在<code>views.py</code>里设定变量，让变量可以去数据库里通过<code>objects.values</code>取到相应的值，然后再把这个变量通过<code>render</code>反应到前端页面。<code>url.py</code>很简单：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前略</span></span><br><span class="line">path(<span class="string">r'lb_mrs_flow.html'</span>,views.lb_mrs_flow,name=<span class="string">"lb_mrs_flow"</span>),</span><br></pre></td></tr></table></figure></p><p>这次需求要取到以下几个值，分别是“此时的带宽”，“前一小时的带宽”，“昨天此时的带宽”。在数据库里我们也设定了date和time这两个列，所以通过限制条件就能获取到对应的值了！<code>views.py</code>如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#展示服务器1.1.1.1当前流量</span></span><br><span class="line"><span class="meta">@login_required#需要登陆才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lb_mrs_flow</span><span class="params">(request)</span>:</span></span><br><span class="line">    today = str(datetime.date.today())<span class="comment">#获取当前日期</span></span><br><span class="line">    yesterday = str(datetime.date.today() - datetime.timedelta(days=<span class="number">1</span>))<span class="comment">#获取昨天日期</span></span><br><span class="line">    hour = str(datetime.datetime.now().hour)<span class="comment">#获取现在小时</span></span><br><span class="line">lasthour = str((datetime.datetime.now() - datetime.timedelta(hours=<span class="number">1</span>)).hour)<span class="comment">#获取前一小时</span></span><br><span class="line">    <span class="keyword">print</span> (today,yesterday,hour)</span><br><span class="line">    firstin = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=today,time__istartswith=hour))<span class="comment">#当前值</span></span><br><span class="line">firstin_last = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=today,time__istartswith=lasthour)<span class="comment">#前一个小时值</span></span><br><span class="line">firstin_yes = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=yesterday,time__istartswith=hour)<span class="comment">#昨天的值</span></span><br><span class="line">    <span class="keyword">print</span> (firstin，firstin_last，firstin_yes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'lb_mrs_flow.html'</span>,&#123;<span class="string">'firstin'</span>:firstin,<span class="string">'firstin_last'</span>:firstin_last,<span class="string">'firstin_yes'</span>:firstin_yes,&#125;)<span class="comment">#传递到前端</span></span><br></pre></td></tr></table></figure></p><p>数据库里我们只需要<code>inbandwidth</code>这一列的值，所以这里就不用<code>get()</code>方法了，改用<code>vales()</code>方法，同时搭配<code>filter()</code>添加条件筛选。但是这样获取到的结果是一个<code>QuerySet</code>（查询集），元素为字典，如果要获得里面具体的值，那么就是<code>QuerySet[0][&#39;inbandwidth&#39;]</code>,用上面的<code>firstin</code>为例子，如果想要得到具体的值就要改成下面：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstin = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'172.1.1.19'</span>,date=today,time__istartswith=hour)[<span class="number">0</span>][<span class="string">'inbandwidth'</span>]</span><br></pre></td></tr></table></figure></p><p><code>value</code>和<code>value_list</code>都可以获取指定的字段，但是<code>value_list</code>获得是元素是元组。<code>value_list</code>和<code>value</code>返回的并不是真正的<code>列表</code>或<code>字典</code>，通俗地说，就是用的时候才真正的去数据库查，如果查询后没有使用，在数据库更新后再使用，得到的是新内容。</p><p>然后就是前端html文件<code>lb_mrs_flow.html</code>里写一个简单的表格，前端内容就略过不表了，直接来看结果：<br><img src="/images/gateone10.png" alt="akb48" title="由于数据库刚启动，还没有昨天和前一个小时的值，就随机编几个值"></p><p>可以看到如果<code>value()</code>方法得不到值的话，返回一个<code>&lt;QuerySet []&gt;</code>，如果是<code>get()</code>的话，返回就是一个错误，所以从友好度来说，还是<code>value()</code>更佳。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/geerniya/article/details/78549182" target="_blank" rel="noopener">https://blog.csdn.net/geerniya/article/details/78549182</a><br><a href="http://yshblog.com/blog/157" target="_blank" rel="noopener">http://yshblog.com/blog/157</a><br><a href="https://www.kancloud.cn/hiyang/py/348229" target="_blank" rel="noopener">https://www.kancloud.cn/hiyang/py/348229</a> （跨表取字段的方法）</p>]]></content>
    
    <summary type="html">
    
      如果不小心drop了表，使用“python manage.py sqlmigrate APP名称 对应文件编号”可以生成SQL语句，然后在SQL里执行
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>将Gateone添加到django，实现WEB的ssh链接</title>
    <link href="http://yoursite.com/2019/04/01/%E5%B0%86Gateone%E6%B7%BB%E5%8A%A0%E5%88%B0django%EF%BC%8C%E5%AE%9E%E7%8E%B0WEB%E7%9A%84ssh%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/04/01/将Gateone添加到django，实现WEB的ssh链接/</id>
    <published>2019-04-01T04:40:07.000Z</published>
    <updated>2019-04-08T09:04:55.089Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>python3 + django2.1<br>Django project:accessgateway</p><h2><span id="gateone的安装">gateone的安装</span></h2><p>Gateone是一个web界面的交互工具，很多堡垒机都会使用到它，它的生命力很长久也很经得住考验（不过最近github上已经不再对它有更新了）。安装方法如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br><span class="line">pip install tornado==<span class="number">4.3</span></span><br><span class="line">pip install Pillow</span><br><span class="line">docker pull liftoff/gateone<span class="comment">#拉取镜像，个人推荐把原有的镜像修改一下，添加vim等工具</span></span><br><span class="line">docker run -t -p <span class="number">8008</span>:<span class="number">8000</span> -h GATEONE --name gateone liftoff/gateone gateone<span class="comment">#创建容器</span></span><br></pre></td></tr></table></figure></p><p>这样我们就创建了一个叫<code>gateone</code>的容器，宿主机端口是<code>8008</code>，此时通过浏览器访问<code>https://IP：8008</code>，就会看到效果：<br><img src="/images/gateone1.png" alt="akb48"></p><p>默认的gateone是<code>https</code>访问，如果要改成<code>http</code>访问。那么就要修改容器里的<code>/etc/gateone/conf.d</code>文件夹下的<code>10server.conf</code>，修改如下两处：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"disable_ssl"</span>: true,<span class="comment">#改成http方式</span></span><br><span class="line"><span class="string">"origins"</span>: [<span class="string">"localhost:8000"</span>, <span class="string">"127.0.0.1:8000"</span>, <span class="string">"594f279c70b0:8000"</span>, <span class="string">"django的外网IP:django端口"</span>],<span class="comment">#添加django的地址和端口</span></span><br></pre></td></tr></table></figure></p><p>然后重启容器，改用<code>http://IP：8008</code>方式去访问，发现已经改成HTTP协议了。</p><h2><span id="gateone的配置">gateone的配置</span></h2><p>现在这个gateone容器需要已经指定准许django来访问，但是还要生成一个api，让django通过api来访问。在容器里执行<code>gateone --new_api_key</code>，发现在<code>/etc/gateone/conf.d</code>文件夹下多了一个<code>30api_keys.conf</code>：<br><img src="/images/gateone3.png" alt="akb48"></p><p>然后修改<code>60docker.conf</code>，把<code>&quot;auth&quot;: &quot;none&quot;</code>,改成<code>&quot;auth&quot;: &quot;api&quot;</code>,保存之后，此时如果重启容器，发现web界面已经不能访问了，会出现<code>unauthenticated</code>的提示，如图：<br><img src="/images/gateone4.png" alt="akb48"></p><h2><span id="gateone集成到django">gateone集成到django</span></h2><p>gateone部分暂时告于段落，现在配置Django，首先是<code>views.py</code>，注意！python2与python3有些地方不同，我这里是python3版本：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,hmac,hashlib,json</span><br><span class="line"></span><br><span class="line"><span class="comment">#web交互界面gateone</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gateone</span><span class="params">(request)</span>:</span></span><br><span class="line">    id = <span class="number">1</span><span class="comment">#这里暂时写死只要id为1的服务器</span></span><br><span class="line">    svr = server.objects.get(id = id)</span><br><span class="line">    ip = svr.outIP</span><br><span class="line">    port = svr.port</span><br><span class="line">    username = svr.username   <span class="comment">#写死端口和用户名</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'aggateone.html'</span>,locals())<span class="comment">#返回aggateone.html页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gateone认证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_signature</span><span class="params">(secret,*parts)</span>:</span></span><br><span class="line">    hash = hmac.new(secret, digestmod=hashlib.sha1)</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">        hash.update(str(part).encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">return</span> hash.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_auth_obj</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 安装gateone的服务器以及端口.</span></span><br><span class="line">    gateone_server = <span class="string">'http://121.41.37.251:8008'</span><span class="comment">#本地gateone的访问地址，注意http格式</span></span><br><span class="line">    <span class="comment"># 生成的api_key 和secret</span></span><br><span class="line">    api_key = <span class="string">'OGQxZGM5OGM1MGNlNDZkNmEwMTNmM2IyY2NlMGZlNjA3Z'</span>  <span class="comment">#这里是30api_keys.conf文件里的key</span></span><br><span class="line">    secret = <span class="string">b'MDIzOWQyN2Y2MmU0NDdhMWIwN2Q3MjIzODU1MGFjYWVkY'</span><span class="comment">#这里是30api_keys.conf文件里的secret</span></span><br><span class="line">    authobj = &#123;</span><br><span class="line">        <span class="string">'api_key'</span>:api_key,</span><br><span class="line">        <span class="string">'upn'</span>:<span class="string">'gateone'</span>,</span><br><span class="line">        <span class="string">'timestamp'</span>:str(int(time.time() * <span class="number">1000</span>)),</span><br><span class="line">        <span class="string">'signature_method'</span>:<span class="string">'HMAC-SHA1'</span>,</span><br><span class="line">        <span class="string">'api_version'</span>:<span class="string">'1.2'</span></span><br><span class="line">        &#125;</span><br><span class="line">    authobj[<span class="string">'signature'</span>] = create_signature(secret,authobj[<span class="string">'api_key'</span>],authobj[<span class="string">'upn'</span>],authobj[<span class="string">'timestamp'</span>])</span><br><span class="line">    auth_info_and_server = &#123;<span class="string">'url'</span>:gateone_server,<span class="string">'auth'</span>:authobj&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(auth_info_and_server)</span><br></pre></td></tr></table></figure></p><p>然后新增两条路由到<code>urls.py</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'gateone.html'</span>, views.gateone),</span><br><span class="line">path(<span class="string">r'get_auth_obj.html'</span>,views.get_auth_obj,name=<span class="string">"get_auth_obj"</span>),</span><br></pre></td></tr></table></figure></p><p>最后就是编写前端页面<code>aggateone.html</code>：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'agbase.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;Gateone远程连接&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"/static/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"/static/gateone/gateone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- 这里需要手动复制一下gateone.js文件到django的静态文件夹里 --&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--添加参数--&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ip = <span class="string">'&#123;&#123; ip &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="string">'&#123;&#123; username &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> port = <span class="string">'&#123;&#123; port &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ssh_url = <span class="string">'ssh://'</span>+user+<span class="string">'@'</span>+ip+<span class="string">':'</span>+port;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//请求认证信息</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--发起认证请求--&gt;</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                        url:<span class="string">'&#123;% url '</span>get_auth_obj<span class="string">' %&#125;'</span>,</span></span><br><span class="line"><span class="javascript">                        type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                        dataType:<span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">                        success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> auth_message = data.auth;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> auth_url = data.url;</span></span><br><span class="line"><span class="undefined">                        GateOne.init(&#123;</span></span><br><span class="line"><span class="undefined">                                auth:auth_message,</span></span><br><span class="line"><span class="undefined">                                url:auth_url,</span></span><br><span class="line"><span class="javascript">                                theme:<span class="string">'solarized'</span>,</span></span><br><span class="line"><span class="javascript">                                goDiv:<span class="string">'#gateone'</span>,</span></span><br><span class="line"><span class="javascript">                                disableTermTransitions:<span class="string">'true'</span>,</span></span><br><span class="line"><span class="undefined">                                autoConnectURL:ssh_url</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--状态记录--&gt;</span></span></span><br><span class="line"><span class="javascript">        GateOne.Base.superSandbox(<span class="string">"GateOne.SomePlugin"</span>, [<span class="string">"GateOne"</span>, <span class="string">"GateOne.Net"</span>,  <span class="string">"GateOne.Terminal.Input"</span>, <span class="string">"GateOne.Terminal"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> location =  ip;</span></span><br><span class="line"><span class="undefined">                GateOne.prefs.autoConnectURL=ssh_url;</span></span><br><span class="line"><span class="javascript">                GateOne.prefs.fontSize=<span class="string">"100%"</span>;</span></span><br><span class="line"><span class="javascript">                GateOne.prefs.scrollback = <span class="number">10000</span>;  <span class="comment">// scrollback buffer up to 10,000 lines</span></span></span><br><span class="line"><span class="javascript">                GateOne.Terminal.loadFont(<span class="string">"Source Code Pro"</span>, <span class="string">"150%"</span>);</span></span><br><span class="line"><span class="undefined">                GateOne.Net.setLocation(location);</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--记录登录状态--&gt;</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gateone_container"</span> <span class="attr">style</span> = <span class="string">"position:relative; width: 110em; height: 55em;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gateone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>重启django进程，浏览器打开<code>gateone.html</code>页面看一下效果：<br><img src="/images/gateone5.png" alt="akb48"></p><p>可见我们已经成功的把gateone嵌入到django里了，而且自动就链接”id=1”这台服务器。大功告成，剩下的就是修改一下细节，给所有服务器一个按钮，只要点击这个按钮就会打开对应的远程链接界面。</p><h2><span id="事后补充">事后补充</span></h2><p>刚才那个<code>views.py</code>里“gateone认证”那两个def函数上面不要加上<code>@login_required</code>，会出现<code>AttributeError: &#39;bytes&#39; object has no attribute &#39;user&#39;</code>错误：<br><img src="/images/gateone11.png" alt="akb48"></p><p>这是因为<code>@login_required</code>这个装饰器首先回去判断user是否是登录状态，会从<code>request</code>里获取<code>User</code>，但是在下面的函数里并没有传递这个User，所以就会报错。如果说非要加上<code>@login_required</code>这个装饰器，那么就要把<code>User</code>传入当做第一个函数。</p><p>详情可见：<a href="https://stackoverflow.com/questions/13423022/django-str-object-has-no-attribute-user" target="_blank" rel="noopener">https://stackoverflow.com/questions/13423022/django-str-object-has-no-attribute-user</a></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.codecp.org/2018/03/23/Django%E5%9F%BA%E7%A1%80Gateone%E5%AE%9E%E7%8E%B0Web%E7%BB%88%E7%AB%AFSSH%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">http://blog.codecp.org/2018/03/23/Django%E5%9F%BA%E7%A1%80Gateone%E5%AE%9E%E7%8E%B0Web%E7%BB%88%E7%AB%AFSSH%E5%8A%9F%E8%83%BD/</a><br><a href="https://github.com/liftoff/GateOne/issues/257" target="_blank" rel="noopener">https://github.com/liftoff/GateOne/issues/257</a><br><a href="https://www.jianshu.com/p/b8123a8178de" target="_blank" rel="noopener">https://www.jianshu.com/p/b8123a8178de</a></p>]]></content>
    
    <summary type="html">
    
      paramiko更适合去用于批量操作
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="gateone" scheme="http://yoursite.com/tags/gateone/"/>
    
  </entry>
  
  <entry>
    <title>Atlas出了一个很诡异的bug</title>
    <link href="http://yoursite.com/2019/03/26/Atlas%E5%87%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BE%88%E8%AF%A1%E5%BC%82%E7%9A%84bug/"/>
    <id>http://yoursite.com/2019/03/26/Atlas出了一个很诡异的bug/</id>
    <published>2019-03-26T08:39:18.000Z</published>
    <updated>2019-05-06T09:05:12.896Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这几天数据库更换密码，就在原有的atlas文件基础上拷贝出来一个新文件，修改了密码，然后启动进程。但是启动之后，发现虽然端口起来了，但是atlas没有连接数据库成功，如图:<br><img src="/images/atlas14.png" alt="akb48"></p><p>登录到atlas后台一看，竟然是双down:<br><img src="/images/atlas15.png" alt="akb48"></p><p>可是在atlas服务器上单独直连阿里云数据库是没任何问题的，而且数据库的监控也没有任何异常。我怀疑是密码含有了atlas不识别的特殊符号，改成了纯数字和字母的组合，重新启动还是不行，这就很尴尬了，明明原来的配置文件可以启动，我就更改了密码和端口，怎么新的进程就不好使？</p><p><img src="/images/atlas16.png" alt="akb48" title="一边好使，一边不好使"></p><p>于是我尝试抓包，使用<code>tcpdump -s 0 -i any -v port 3318 and src host mysql的ip -w test.pcap</code>，结果发现3318的包少的可怜，于是我就改用<code>tcpdump -s 0 -i any -v host mysql的ip -w test2.pcap</code>扩大了范围，然后发现包有这样的字样：<br><img src="/images/atlas17.png" alt="akb48"></p><p>可见atlas一直以root去请求数据库，但是我这个是阿里云的RDS服务（Mysql 5.6.7)，本身是没有root的，所以就爆“User not exist”。</p><p>这就很尴尬了，为什么会突然以root身份请求数据库？莫非这是atlas的BUG？先把问题记录下来，然后慢慢解决…</p><p><strong>PS.</strong>这个BUG后来修复了，需要重新编译安装，新的安装包地址见：<a href="https://github.com/RorschachChan/noroot-atlas" target="_blank" rel="noopener">https://github.com/RorschachChan/noroot-atlas</a><br><img src="/images/妹子.jpg" alt="akb48"></p>]]></content>
    
    <summary type="html">
    
      atlas现在已经被360抛弃了，这次估计要转投proxysql了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="atlas" scheme="http://yoursite.com/tags/atlas/"/>
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Django搭配anymail去发送邮件</title>
    <link href="http://yoursite.com/2019/03/22/Django%E6%90%AD%E9%85%8Danymail%E5%8E%BB%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/22/Django搭配anymail去发送邮件/</id>
    <published>2019-03-22T11:42:36.000Z</published>
    <updated>2019-03-22T12:18:49.410Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="注册mailgun账号">注册mailgun账号</span></h2><p>首先登陆<a href="https://app.mailgun.com/sessions/new" target="_blank" rel="noopener">https://app.mailgun.com/sessions/new</a> 里注册一个账号，填写邮件和密码点击注册，会出现这样的页面：<br><img src="/images/anymail1.png" alt="akb48"></p><p>然后在注册的邮件会接到两个邮件，一个是API的邮件，另一个是激活账号邮件，如下：<br><img src="/images/anymail2.png" alt="akb48"></p><p>点击激活之后，就要添加可信任邮箱，mailgun只能对这些可信任邮箱发送邮件，其他邮件就会失败，在<code>Account</code>里选择<code>Authorized Recipients</code>，然后<code>Invite new Recipients</code>创建新的守信邮箱，创建完毕之后，邮箱应该是<code>Unverified</code>的状态，如下：<br><img src="/images/anymail3.png" alt="akb48"></p><p>点击那个<code>Unverified</code>的状态的邮箱，如果你的机器有装foxmail或者outlook的话，就会自动弹出来，你就可以发送一个邮件到指定的邮箱里，不久邮箱就会收到一个确认信，如下：<br><img src="/images/anymail4.png" alt="akb48"></p><p>点击<code>I agree</code>即完成授信，邮箱状态也变成了绿色的<code>Verified</code>。</p><p>点击Domains就可以看到账号的<code>api</code>和<code>domain</code>了，如图：<br><img src="/images/anymail5.png" alt="akb48"></p><p>至此，邮箱账号申请部分完成。</p><h2><span id="开始配置">开始配置</span></h2><p>首先安装<code>pip install django-anymail</code>组件，并且在<code>setting.py</code>里添加如下内容：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"anymail"</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ANYMAIL = &#123;</span><br><span class="line">    <span class="string">"MAILGUN_API_KEY"</span>: <span class="string">"这里填写API"</span>,</span><br><span class="line">    <span class="string">"MAILGUN_SENDER_DOMAIN"</span>: <span class="string">'这里填写domain'</span>,</span><br><span class="line">&#125;</span><br><span class="line">EMAIL_BACKEND = <span class="string">"anymail.backends.mailgun.EmailBackend"</span></span><br><span class="line"><span class="comment"># DEFAULT_FROM_EMAIL = "you@example.com"  # if you don't already have this in settings</span></span><br><span class="line"><span class="comment"># SERVER_EMAIL = "your-server@example.com"  # ditto (default from-email for Django errors)</span></span><br></pre></td></tr></table></figure></p><p>保存退出之后，在<code>views.py</code>里添加如下信息：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="comment">#只需一个send_mail 函数，便能发送邮件</span></span><br><span class="line">send_mail(<span class="string">"It works!这里是标题"</span>, <span class="string">"This will get sent through Mailgun，这里是内容"</span>,<span class="string">"domian的内容，即上面图片里那个mailgun.org结尾的东西"</span>, [<span class="string">"授信的邮箱地址"</span>])</span><br></pre></td></tr></table></figure></p><p>保存之后，django会自动重启，就会看到邮件顺利发出去了！<br><img src="/images/anymail6.png" alt="akb48"></p><p>可以看出只需要一个<code>send_mail</code>就能发送邮件，的确比SMTP方便多了。在实际运用中，就把<code>send_mail</code>放到对应的函数里，然后灵活搭配标题和内容就能使用了！</p><h2><span id="故障排错">故障排错</span></h2><ol><li>如果出现<code>Please activate your Mailgun account. Check your inbox or log in to your control panel to resend the activation email.</code>，即账号没激活；</li><li>如果出现<code>Sandbox subdomains are for test purposes only. Please add your own domain or add the address to authorized recipients in Account Settings.</code>，即目标邮箱不是授信邮箱，需要添加到授信名单里。</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/anymail/django-anymail" target="_blank" rel="noopener">https://github.com/anymail/django-anymail</a></p>]]></content>
    
    <summary type="html">
    
      免费的mailgun每个月有10000次发送名额，足够用了！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="anymail" scheme="http://yoursite.com/tags/anymail/"/>
    
  </entry>
  
  <entry>
    <title>给Django添加登录拦截器和登录验证码</title>
    <link href="http://yoursite.com/2019/03/22/%E7%BB%99Django%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://yoursite.com/2019/03/22/给Django添加登录拦截器和登录验证码/</id>
    <published>2019-03-22T03:39:14.000Z</published>
    <updated>2019-03-25T07:45:42.539Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>前一篇文章里写了如何做登录、登出界面，看上去效果好像很不错，但是却有一个致命的漏洞：如果有人直接在地址栏里输入对应的url，那么就可以跳过登录验证直接访问！</p><p>这种情况我们需要做一个登录拦截器，这个拦截器的作用就是通过session来判断，如果在没有session的前提下登录网站内部url就会强制跳转到首页，让访问的人登录。</p><h2><span id="自建的登陆拦截器">自建的登陆拦截器</span></h2><p>首先是在APP的目录里（我的project叫Kubernetes）新建一个叫<code>middleware.py</code>的文件，代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="comment">#强制登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path != <span class="string">''</span> <span class="keyword">and</span> request.path != <span class="string">'/login/'</span>:<span class="comment">#判断请求的地址不是首页和/login/</span></span><br><span class="line">            <span class="keyword">if</span>  request.session.get(<span class="string">'user'</span>,<span class="keyword">None</span>):<span class="comment">#如果session里不存在</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login/'</span>)<span class="comment">#自动跳回到登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多次访问IP拉黑</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedIpMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">'REMOTE_ADDR'</span>] <span class="keyword">in</span> getattr(settings, <span class="string">"BLOCKED_IPS"</span>, []):<span class="comment">#如果有IP短时间内多次访问</span></span><br><span class="line">            <span class="keyword">return</span> http.HttpResponseForbidden(<span class="string">'&lt;h1&gt;Forbidden&lt;/h1&gt;'</span>)<span class="comment">#针对此IP给予403</span></span><br></pre></td></tr></table></figure></p><p>然后在APP的目录里（我的project叫Kubernetes）的<code>setting.py</code>里把这两个中间件加进去。如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'Kubernetes.middleware.SimpleMiddleware'</span>,<span class="comment">#这个就是新加的</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>系统自动重启之后，来验证一下效果，是否在不登录的前提下成功拦截直接访问的url。</p><h2><span id="django自带的登陆拦截器">Django自带的登陆拦截器</span></h2><p>上面那个方法逻辑上来说比较简单，能实现功能但是并不是很强力，Django也自带一个“强制登录”的功能，效果比那个强一丢丢。</p><p>首先我们先把APP目录里<code>setting.py</code>刚刚新加的<code>&#39;Kubernetes.middleware.SimpleMiddleware&#39;</code>注释掉。在文件末尾添加一句：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录路径</span></span><br><span class="line">LOGIN_URL = <span class="string">'/login/'</span></span><br></pre></td></tr></table></figure></p><p>然后返回到<code>views.py</code>，给需要登陆才能访问的页面添加一个装饰器：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="meta">@login_required#这个页面需要登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">(request)</span>:</span></span><br><span class="line">    name = [<span class="string">'james'</span>,<span class="string">'wade'</span>,<span class="string">'bosh'</span>,<span class="string">'yaoming'</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'test111.html'</span>,&#123;<span class="string">'names'</span>:name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ttt</span><span class="params">(request)</span>:</span><span class="comment">#这个页面就不需要了，公共读</span></span><br><span class="line">   cpu = <span class="number">9.66</span></span><br><span class="line">   mem = <span class="number">66.6</span></span><br><span class="line">   disk = <span class="number">16.88</span></span><br><span class="line">   <span class="keyword">return</span> render_to_response(<span class="string">'test222.html'</span>,&#123;<span class="string">'CPU'</span>:cpu,<span class="string">'MEMORY'</span>:mem,<span class="string">'DISKUSED'</span>:disk&#125;)</span><br></pre></td></tr></table></figure></p><p>我在<code>views.py</code>里设定，访问tt这个函数（urls.py里配置的域名是/k8s/test111)的时候需要强制登陆,访问ttt这个函数（urls.py里配置的域名是/k8s/test222）就可以直接打开。系统重启django之后，我们试一下效果：<br><img src="/images/django49.gif" alt="akb48"></p><p>可见当访问到<code>/k8s/test111</code>的时候，浏览器会自动跳转到/login/?next=/k8s/test111/ 让你登录，登陆完毕之后才能顺利访问。而<code>/k8s/test222</code>就可以直接访问了。这个方法就是可以更加对受保护的网页有针对性配置，而不是上一个方法统一都跳转到登录面去。</p><p>测试的时候出现<code>TypeError: object() takes no parameters</code>报错，看一下是否是post方法请求的，因为get方法是产生一个tcp包，而post是两个。</p><h2><span id="登录验证码">登录验证码</span></h2><p>为了防止机器人暴力破解密码，我们往往增加验证码来阻挡一下。市面上开源的比较高级的验证码是<code>google recaptcha2</code>，但是由于国内政策，大陆内的网站往往打不开这个界面。所以用<code>Django Simple Captcha</code>这个比较大众的验证码方式。</p><p>首先<code>pip install django-simple-captha</code>，然后在<code>setting.py</code>里把<code>captha</code>加入到<code>INSTALL_APPS</code>里。</p><p>然后是执行<code>python manage.py makemigrations</code>和<code>python manage.pymigrate</code>，再打开<code>url.py</code>，添加一句<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.login,name=<span class="string">'login'</span>),<span class="comment">#登录页</span></span><br><span class="line">    path(<span class="string">'homepage.html'</span>,views.home,name=<span class="string">'home'</span>),<span class="comment">#首页</span></span><br><span class="line">    path(<span class="string">'admin/'</span>,admin.site.urls),</span><br><span class="line">    path(<span class="string">'captcha/'</span>,include(<span class="string">'captcha.urls'</span>)),   <span class="comment">#这句是新加的，验证码专用</span></span><br><span class="line">    path(<span class="string">'k8s/'</span>,include(<span class="string">'createyaml.urls'</span>)),    <span class="comment">#工具平台分支</span></span><br><span class="line">    path(<span class="string">'ag/'</span>,include(<span class="string">'accessgateway.urls'</span>)),  <span class="comment">#堡垒机分支</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>修改一下<code>views.py</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaForm</span><span class="params">(forms.Form)</span>:</span><span class="comment">#引入一个类</span></span><br><span class="line">    captcha = CaptchaField()</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.POST:</span><br><span class="line">        form = CaptchaForm(request.POST)<span class="comment">#将类实例化</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line">        user = auth.authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():<span class="comment">#如果form合法</span></span><br><span class="line">            human = <span class="keyword">True</span><span class="comment">#判断是人操作，而不是机器人</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                auth.login(request, user) <span class="comment"># 登录</span></span><br><span class="line">                <span class="comment">#request.session['user'] = username # 记录session信息</span></span><br><span class="line">                response = HttpResponseRedirect(<span class="string">'homepage.html'</span>)</span><br><span class="line">                response.set_cookie(<span class="string">'username'</span>,username,<span class="number">3600</span>)  <span class="comment">#将username写入cookie,超时时间是10分钟</span></span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>,<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'验证码有误，请重新输入!'</span>,<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = CaptchaTestForm() <span class="comment"># 否者要求重新输入</span></span><br><span class="line">        <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>,&#123;<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他部分略</span></span><br></pre></td></tr></table></figure></p><p>最后修改对应的html页面，在对应的地方加入即可：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'yellow'</span>&gt;</span>验证码(看不清请刷新页面):<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    &#123;&#123; login_form.captcha &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>保存之后，系统重新启动django，在浏览器输入网址，就能看到效果了：<br><img src="/images/django50.gif" alt="akb48"></p><p>这个页面还没有完美，应该再加入一个ajax，实现“点击验证码，刷新页面”的功能就更完美了。</p><p>登录验证码的方式还有很多，除了这个<code>django-simple-captha</code>，还有像<a href="https://pypi.org/project/django_click_captcha/" target="_blank" rel="noopener">https://pypi.org/project/django_click_captcha/</a> 点击倒字的登录方法，甚至还有手机短信的登陆方法，这些高级的方法以后再研究吧。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://code.ziqiangxuetang.com/django/django-middleware.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-middleware.html</a><br><a href="https://www.jianshu.com/p/1a95808faed9" target="_blank" rel="noopener">https://www.jianshu.com/p/1a95808faed9</a><br><a href="https://blog.csdn.net/xxm524/article/details/48370337" target="_blank" rel="noopener">https://blog.csdn.net/xxm524/article/details/48370337</a><br><a href="http://www.calmkart.com/?p=332" target="_blank" rel="noopener">http://www.calmkart.com/?p=332</a><br><a href="https://fanquqi.github.io/2018/03/30/Django%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/" target="_blank" rel="noopener">https://fanquqi.github.io/2018/03/30/Django%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</a><br><a href="https://blog.csdn.net/teavamc/article/details/77566781" target="_blank" rel="noopener">https://blog.csdn.net/teavamc/article/details/77566781</a><br><a href="https://blog.51cto.com/syklinux/2052484" target="_blank" rel="noopener">https://blog.51cto.com/syklinux/2052484</a></p>]]></content>
    
    <summary type="html">
    
      要是支持面部识别或者图片识别就更加高大上了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="url拦截" scheme="http://yoursite.com/tags/url%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>给Django添加用户登录登出界面</title>
    <link href="http://yoursite.com/2019/03/21/%E7%BB%99Django%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/21/给Django添加用户登录页面、验证码和拦截器/</id>
    <published>2019-03-21T11:50:48.000Z</published>
    <updated>2019-03-22T06:40:13.622Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我的Django运维平台很不幸的被公司安全系统扫描出来了，给了我一个超级大警告。主要也怪我当时偷懒，只是在SLB层面做了IP访问限制但是没有给服务器nginx里做白名单，所以网站是可以通过“IP地址加端口”访问的。恰巧ping里面用了一个AES加解密的脚本，那个算法有问题，可以获取当前用户的权限，我特么的还是直接用root启动的nginx，而且这个机器里面还有ansible，当然后果很严重。</p><p>出了问题，不能消极对待而要积极解决，于是要先给网站做一个完善的用户登录鉴权系统。再一次背景介绍：<br>    python：3.6.5<br>    Django：2.1.1<br>    Project：Kubernetes，文件夹路径就是/django/Kubernetes/<br>    App：createyaml，文件夹路径就是/django/Kubernetes/createyaml</p><h2><span id="实现用户登录鉴权">实现用户登录鉴权</span></h2><p>首先，先编写一个<code>index.html</code>的页面做登录界面，如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">                &lt;title&gt;请先登录&lt;/title&gt;</span><br><span class="line">                &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/static/bootstrap-3.3.7/css/bootstrap.min.css"</span>&gt;<span class="comment">#引入css样式</span></span><br><span class="line">                &lt;link rel=<span class="string">"icon"</span> href=<span class="string">"/static/pic/batman.ico"</span> type=<span class="string">"image/x-icon"</span>&gt;<span class="comment">#引入一个标签图</span></span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body background=<span class="string">"/static/pic/easyplane.jpg"</span>&gt;<span class="comment">#背景图片设置</span></span><br><span class="line">                &lt;div style=<span class="string">"margin-top: 200px"</span>&gt;</span><br><span class="line">                &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">                        &lt;font color='brown'&gt;&lt;h1&gt;请输入您的账号密码&lt;/h1&gt;&lt;/font&gt;</span><br><span class="line">                                &lt;div&gt;</span><br><span class="line">                                        &lt;div&gt;</span><br><span class="line">                                                &lt;form class="ui form" method="post" action=""&gt;</span><br><span class="line">                                                &lt;div class="field"&gt;</span><br><span class="line">                                                &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">                                                &lt;/div&gt;</span><br><span class="line">                                                &lt;div class="field"&gt;</span><br><span class="line">                                                &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">                                                &lt;/div&gt;</span><br><span class="line">                                                &lt;font color=red&gt;&#123;&#123; error &#125;&#125;&lt;/font&gt;&lt;br&gt;#登录错误红色表示</span><br><span class="line">                                                &lt;button class="btn btn-default" type="submit"&gt;登陆&lt;/button&gt;</span><br><span class="line">                                                &#123;% csrf_token %&#125;</span><br><span class="line">                                                &lt;/form&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/django45.png" alt="akb48"></p><p>在Kubernetes这个app文件夹里的<code>urls.py</code>里给这个鉴权网站添加一个路由：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.login_action,name=<span class="string">'login'</span>),<span class="comment">#首页就是login_action的函数</span></span><br><span class="line">    path(<span class="string">'homepage.html'</span>,views.home,name=<span class="string">'home'</span>),<span class="comment">#将原来的首页改成叫homepage.html</span></span><br><span class="line">path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">...其余省略</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在同级的<code>views.py</code>里编写<code>login_action</code>函数，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,render_to_response</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:<span class="comment">#通过post形式获取，get的话会在地址栏里看到账号密码</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line">        user = auth.authenticate(username=username, password=password)<span class="comment">#使用django自带方式鉴权</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            auth.login(request, user)  <span class="comment"># 登录</span></span><br><span class="line">            request.session[<span class="string">'user'</span>] = username  <span class="comment"># 将session信息记录到浏览器</span></span><br><span class="line">            response = HttpResponseRedirect(<span class="string">'homepage.html'</span>)<span class="comment">#鉴权OK就跳转到homepage.html</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    context = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'homepage.html'</span>,context)</span><br></pre></td></tr></table></figure></p><p>登陆的用户/密码就是django后台的账号/密码，可以用superuser来登陆。保存文件之后，系统会重启django，查看效果如图：<br><img src="/images/django47.gif" alt="akb48"></p><h2><span id="render和render_to_response的区别">render和render_to_response的区别</span></h2><p>上面的<code>login_action</code>函数里，用了<code>render</code>和<code>render_to_response</code>，如果只用<code>render_to_response</code>，同时把所有的<code>render</code>改成<code>render_to_response</code>，那么在访问首页的时候就会出现<code>TemplateDoesNotExist at /</code>这样的错误：<br><img src="/images/django46.png" alt="akb48"></p><p>明明他俩都是用来展示模板页面的。为什么会有模板不存在这样？原因是<code>render_to_response()</code>的第一个参数必须是要使用的模板名称。如果要给定第二个参数，那么该参数必须是为该模板创建Context时所使用的字典。如果不提供第二个参数，<code>render_to_response()</code>使用一个空字典。而<code>render</code>第一个参数可以是request。</p><p>所以如果都要用<code>render_to_response</code>，那么就要改成如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>&#125;，context_instance=RequestContext(request))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></p><p>但是这样的话，可能在登录的时候就会有csrf的错误，需要把csrf去掉。</p><h2><span id="实现登出功能">实现登出功能</span></h2><p>有了登录还得有登出，还是老套路，先编写路由如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'logout/'</span>, views.logout,name=<span class="string">"logout"</span>),</span><br></pre></td></tr></table></figure></p><p>然后对应去views.py里写logout这个函数：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth<span class="comment">#引入django默认的auth功能</span></span><br><span class="line"><span class="comment">#注销</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    auth.logout(request)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login'</span>)<span class="comment">#跳转到登录页/login</span></span><br></pre></td></tr></table></figure></p><p>然后就是在首页里添加一个登出的链接，链接指向就是<code>/logout/</code>。测试一下效果：<br><img src="/images/django48.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.nowamagic.net/academy/detail/1318431" target="_blank" rel="noopener">http://www.nowamagic.net/academy/detail/1318431</a></p>]]></content>
    
    <summary type="html">
    
      在form表单中添加{% csrf_token %},打开网站就会在页面生成token(令牌)来进行认证，当别人登录会，页面会生成完全不一样的token
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="认证鉴权" scheme="http://yoursite.com/tags/%E8%AE%A4%E8%AF%81%E9%89%B4%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>较深入的理解Pod下的&quot;多个容器&quot;定义</title>
    <link href="http://yoursite.com/2019/03/19/%E8%BE%83%E6%B7%B1%E5%85%A5%E7%9A%84%E7%90%86%E8%A7%A3Pod%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/19/较深入的理解Pod下的多个容器/</id>
    <published>2019-03-19T07:40:52.000Z</published>
    <updated>2019-03-20T03:37:58.688Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>众所周知，k8s能调度的最小单元就是pod，但是pod里面是可以有多个docker容器的。但是pod和docker之间到底一种什么关系？还是需要实际的操作来更加直白的理解。</p><p>首先，先写了一个<code>test.yaml</code>用来启动Pod：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1<span class="comment">#这里注意版本号</span></span><br><span class="line">kind: Pod<span class="comment">#注意这里的大小写</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-greenbook</span><br><span class="line">  labels:</span><br><span class="line">app: test</span><br><span class="line">spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: test</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test<span class="comment">#这里必须要跟Volumes的名称一致，都是test</span></span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">      - name: debian1</span><br><span class="line">        image: debian</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test</span><br><span class="line">          mountPath: /html</span><br><span class="line">        command: [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line">        args:</span><br><span class="line">          - <span class="keyword">while</span> true; do</span><br><span class="line">              date &gt;&gt; /html/index.html;</span><br><span class="line">              sleep <span class="number">1</span>;</span><br><span class="line">            done</span><br><span class="line">      - name: debian2<span class="comment">#每一个容器的名称不能一样</span></span><br><span class="line">        image: debian</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test</span><br><span class="line">          mountPath: /html</span><br><span class="line">        command: [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line">        args:</span><br><span class="line">          - <span class="keyword">while</span> true; do</span><br><span class="line">              echo <span class="string">"woxcwy"</span> &gt;&gt; /html/index.html;</span><br><span class="line">              sleep <span class="number">2</span>;</span><br><span class="line">            done</span><br><span class="line">   restartPolicy: Never<span class="comment">#死了就死了</span></span><br></pre></td></tr></table></figure></p><p>这个yaml主要是建立了一个存储卷叫html，它默认类型是<code>emptyDir</code>。这意味着当一个POD被分配到一个节点时，卷先被创建，并只要Pod在节点上运行时，这个卷仍存在（node重启的话，卷内容丢失，所以它只能做一个临时行的存储，如果想要持久化存储请使用<code>hostPath</code>）。第一容器运行nginx的服务器并将共享卷挂载到目录<code>/usr/share/Nginx/html</code>。第二容器使用Debian的镜像，并将共享卷挂载到目录<code>/html</code>，每一秒输入当前时间。第三个容器同理，每两秒输入一些字符串。</p><p>然后<code>kubectl create -f test.yaml --record</code>创建这个pod，然后使用<code>docker ps -a</code>就能看到生成了四个docker—分别是pod的三个容器和一个pause容器。使用<code>kubectl exec -it pod名 -c 容器名 /bin/bash</code>进入nginx的容器，会发现里面的<code>/usr/share/nginx/html/index.html</code>果然按照我们的要求在不断的输出日期和字符串。可见这三个容器已经挂载了同一个卷，如图：<br><img src="/images/k8s32.png" alt="akb48"></p><p>可见挂载volume到Pod，本质上是将volume挂载到Pod中的每一个容器。如果在这三个容器<code>ps -ef</code>一下，会发现他们的<code>pid=1</code>的进程是各自的进程而不是pause容器的<code>/pause</code>进程，如图：<br><img src="/images/k8s33.png" alt="akb48"><br><img src="/images/k8s34.png" alt="akb48"></p><p>所以很多人说pod里每个容器的init进程其实是<code>/pause</code>，而pause容器的作用，可以担任init的角色（默认都<code>docker run -ipc:container:pause</code>），及时的清理僵尸进程。但是在我这里的实验结果看来并不是真的。不知道是不是我某个姿势不对…</p><p>话说回来，这个例子很明显的体现了“一个pod里可以有多个容器”这句话，每个pod是一个namespace，即这些容器都可以通过localhost来彼此访问，但是不能重复使用同一个端口而且所有的pod都是同时启动的。</p><p>k8s的容器编排这里有一个比较不错的例子：<a href="https://cloud.tencent.com/developer/ask/180938" target="_blank" rel="noopener">https://cloud.tencent.com/developer/ask/180938</a> ，个人觉得说的很形象。</p>]]></content>
    
    <summary type="html">
    
      这些容器联系必须非常紧密，而且需要直接共享资源建议放到一个pod下
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="云原生" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
</feed>
