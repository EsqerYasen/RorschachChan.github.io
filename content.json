{"meta":{"title":"Chris Chan's BLOG","subtitle":"生活就是等待戈多","description":"那些在阳光下挥洒青春的日子啊!","author":"石锤淡啤酒","url":"http://yoursite.com"},"pages":[{"title":"对我有什么想说的","date":"2017-12-14T08:55:38.000Z","updated":"2017-12-14T08:56:41.508Z","comments":true,"path":"guestbook/index.html","permalink":"http://yoursite.com/guestbook/index.html","excerpt":"","text":""},{"title":"photos","date":"2018-01-02T07:48:48.000Z","updated":"2018-01-02T07:48:48.704Z","comments":true,"path":"photos/index.html","permalink":"http://yoursite.com/photos/index.html","excerpt":"","text":""},{"title":"about me","date":"2017-12-13T06:23:06.000Z","updated":"2017-12-13T06:23:07.011Z","comments":true,"path":"about-me/index.html","permalink":"http://yoursite.com/about-me/index.html","excerpt":"","text":""}],"posts":[{"title":"Nginx动态编译新的模块","slug":"Nginx动态编译新的模块","date":"2018-01-03T13:44:44.000Z","updated":"2018-01-04T03:12:18.823Z","comments":true,"path":"2018/01/03/Nginx动态编译新的模块/","link":"","permalink":"http://yoursite.com/2018/01/03/Nginx动态编译新的模块/","excerpt":"","text":"###开始动手打算给电脑上的nginx添加一个当时没有编译安装的echo-nginx-module模块，这是一个第三方模块，要知道nginx要添加模块是需要重新编译的，这一点跟apache不同，apache是在配置文件里引用.so文件的。 首先先nginx -V，查看一下nginx已经编译的模块都有啥，如图： 于是我就git clone https://github.com/openresty/echo-nginx-module，但是发现竟然告诉我“git: command not found”。oh shit，原来这台nginx实验机器压根就没有装过git啊！而yum源里的软件基本上已经过时的太久了，就拿git来说吧，使用yum info git看到的版本是1.8.3.1。但是在https://github.com/git/git/releases 里可以看到，git的版本现在已经丧心病狂的到达了2.16的版本了。 ###那么我们先安装git!通过yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel和yum install gcc perl-ExtUtils-MakeMaker来安装依赖库。wget https://github.com/git/git/archive/v2.16.0-rc0.tar.gz来下载2.16的git保存到centos里。tar -xzvf v2.9.2.tar.gz -C /目标目录/，然后在目标目录里面执行make prefix=/usr/local/git all和make prefix=/usr/local/git install，编译过程可能会比较长，请耐心等待。 编译结束之后，echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc，把git添加到环境变量，再source /etc/bashrc让它实时生效，最后再一次看看git --version，大功告成！ ###开始编译新模块git搞定了之后，重新git clone https://github.com/openresty/echo-nginx-module，然后在nginx的configure文件夹里面，把echo-nginx-module模块添加上。命令如下： ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/root/pcre-8.41 --with-http_v2_module --add-module=/root/echo-nginx-module-0.61,我这里还附赠了一个“http_v2_module”。 configure完毕之后，去make一下就可以了，不要轻易make install，不然就是重新安装了。原来的nginx.conf等配置都没了。 养成替换nginx二进制文件的好习惯，如下： cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak cp nginx编译目录/objs/nginx /usr/local/nginx/sbin/ 然后再打开看一下nginx -V","categories":[{"name":"用来讨饭吃的技术","slug":"用来讨饭吃的技术","permalink":"http://yoursite.com/categories/用来讨饭吃的技术/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"从vmstat命令里看服务器瓶颈","slug":"从vmstat命令里看服务器瓶颈","date":"2018-01-03T12:56:56.000Z","updated":"2018-01-03T13:04:53.271Z","comments":true,"path":"2018/01/03/从vmstat命令里看服务器瓶颈/","link":"","permalink":"http://yoursite.com/2018/01/03/从vmstat命令里看服务器瓶颈/","excerpt":"重新翻看基础知识的第一天…","text":"重新翻看基础知识的第一天… 这几天重新翻看基础知识，看到了vmstat，我认为它是一个非常优秀的命令,因为它包括了top和free，甚至还包含了一些io的信息，可以说是运维人员常备命令之一。常用方法：#vmstat (-a) 多少秒刷一次 刷多少次 对上面这个图来一个简单的解释： r: 运行队列中进程数量，这个值长期大于1就要判断是否需要增加CPU。b: 等待IO的进程数量 swpd: 使用虚拟内存大小(如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能）free: 空闲物理内存大小buff: 用作缓冲的内存大小cache: 用作缓存的内存大小(如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小)inact: 非活跃内存大小（当使用-a选项时显示）active: 活跃的内存大小（当使用-a选项时显示） si: 每秒从交换区写到内存的大小，由磁盘调入内存so: 每秒写入交换区的内存大小，由内存调入磁盘注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。 bi: 每秒读取的块数bo: 每秒写入的块数注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。 in: 每秒中断数，包括时钟中断。cs: 每秒上下文切换数。注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。 us: 用户进程执行时间百分比(user time)注意： us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。 sy: 内核系统进程执行时间百分比(system time)注意：sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。 wa: IO等待时间百分比注意：wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。 id: 空闲时间百分比 最后总结：如果r经常大于4 ，且id经常少于40，表示cpu的负荷很重。如果bi，bo长期不等于0，表示内存不足。 r（运行队列）展示了正在执行和等待CPU资源的任务个数。当这个值超过了CPU数目，就会出现CPU瓶颈了。 CPU 100%并不能说明什么，Linux总是试图要CPU尽可能的繁忙，使得任务的吞吐量最大化。唯一能够确定CPU瓶颈的还是r（运行队列）的值。","categories":[{"name":"用来讨饭吃的技术","slug":"用来讨饭吃的技术","permalink":"http://yoursite.com/categories/用来讨饭吃的技术/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"运维","slug":"运维","permalink":"http://yoursite.com/tags/运维/"}]},{"title":"关于阿里云CDN的两个故障解决","slug":"CDN网站一次打不开的问题","date":"2017-12-28T09:34:57.000Z","updated":"2018-01-03T07:01:26.931Z","comments":true,"path":"2017/12/28/CDN网站一次打不开的问题/","link":"","permalink":"http://yoursite.com/2017/12/28/CDN网站一次打不开的问题/","excerpt":"测试中心今天在测试时候发现了一个问题：官方的A网站做了域名跳转，跳转到阿里云CDN，但是在浏览器里输入A地址栏的时候，发现域名的确变成了CDN的域名，但是页面是403。","text":"测试中心今天在测试时候发现了一个问题：官方的A网站做了域名跳转，跳转到阿里云CDN，但是在浏览器里输入A地址栏的时候，发现域名的确变成了CDN的域名，但是页面是403。 如图： 但是奇怪的是，再在浏览器点击一下回车，网页就神奇的打开了。 这个原因就是阿里云的CDN有一个“Refer防盗链”，需要在防盗链里面把A域名添加到白名单，这样的话就可以直接访问了。至于为什么第二次回车就可以访问，是因为那时候域名已经成CDN自己的域名了，当然可以访问。 但是这个防盗链也要注意！毕竟白/黑名单添加都是一个危险举动，一定三思后行。 不就之后，商城也下来一个需求，说公司有两个多年不用的域名B和C，打算废物利用，两个都要达到直接“跳转官网”的目的。 于是我就到阿里云域名管理的那里搜索一下，发现目前官网域名后端绑定的是一个CDN，于是也把域名B和域名C做一个CNAME到这个域名，不过登陆浏览器发现域名B和域名C都反馈502。 于是我就到电子商城后端的nginx.conf里查看，确认server_name字段没有写错，然后把域名B和域名C的CNAME直接改成了CDN的域名，再通过了dig确认。但是等于浏览器还是发现502。 最后找了阿里云的人了解，原来阿里云规定“一个CDN只能绑定一个域名，因为节点上没有那两个域名的配置，所以只要不符合节点上有配置文件信息的，全部502”。所以B和C是无法访问的。要解决这个问题有两招，1）把域名B和域名C直接A记录绑定CDN后面的SLB上，但是代价就是访问速度不如CDN快；2）重新购买两个CDN，都绑定SLB，然后把这两个CDN分别绑定到域名B和域名C上，代价是多收一点流量费…","categories":[{"name":"用来讨饭吃的技术","slug":"用来讨饭吃的技术","permalink":"http://yoursite.com/categories/用来讨饭吃的技术/"}],"tags":[{"name":"CDN","slug":"CDN","permalink":"http://yoursite.com/tags/CDN/"},{"name":"网站技术","slug":"网站技术","permalink":"http://yoursite.com/tags/网站技术/"}]},{"title":"screen的用法","slug":"screen的用法","date":"2017-12-21T07:59:44.000Z","updated":"2018-01-03T07:05:57.537Z","comments":true,"path":"2017/12/21/screen的用法/","link":"","permalink":"http://yoursite.com/2017/12/21/screen的用法/","excerpt":"如果你想在后台执行程序…","text":"如果你想在后台执行程序…很多时候在Linux要后台执行程序，都是使用“&amp;”，或者是nohup，不过这两个更多应用于临时的脚本。一个比较高科技的方法就是使用“screen”。 安装screen的方法很简单：yum install -y screen 如果新建一个screen，就输入screen -S name，这样会新开一个窗口，然后执行命令。比如我要启动django，那么就输入python manage.py runserver 0.0.0.0:9000即可。 这个重开一个窗口，列出所有screen进程，就这样：[root@docker ~]# screen -lsThere are screens on: 3029.xiedi (Attached) 如果想链接上之前那个django，执行命令screen -r 3029即可。","categories":[{"name":"用来讨饭吃的技术","slug":"用来讨饭吃的技术","permalink":"http://yoursite.com/categories/用来讨饭吃的技术/"}],"tags":[{"name":"其他软件","slug":"其他软件","permalink":"http://yoursite.com/tags/其他软件/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"pictest","slug":"pictest","date":"2017-12-13T13:40:06.000Z","updated":"2018-01-03T07:06:26.282Z","comments":true,"path":"2017/12/13/pictest/","link":"","permalink":"http://yoursite.com/2017/12/13/pictest/","excerpt":"这是一个我用来测试图片上传的文章","text":"这是一个我用来测试图片上传的文章 啊！五环，你比四环多一环！啊！五环，你比六环少一环！终于有一天，你会修到七环","categories":[{"name":"用来保护视力的图片","slug":"用来保护视力的图片","permalink":"http://yoursite.com/categories/用来保护视力的图片/"}],"tags":[{"name":"美女","slug":"美女","permalink":"http://yoursite.com/tags/美女/"},{"name":"图片","slug":"图片","permalink":"http://yoursite.com/tags/图片/"}]},{"title":"一个人去旅行","slug":"这里记录的不只有代码，还有生活和思想！","date":"2017-12-13T06:17:22.000Z","updated":"2018-01-03T07:06:21.722Z","comments":true,"path":"2017/12/13/这里记录的不只有代码，还有生活和思想！/","link":"","permalink":"http://yoursite.com/2017/12/13/这里记录的不只有代码，还有生活和思想！/","excerpt":"先用陈升先生的一首《一个人去旅行》做我这个博客的开场白","text":"先用陈升先生的一首《一个人去旅行》做我这个博客的开场白 你说要一个人去旅行 但是归期却没有约定 亚得里亚海边风中的吉他声你说你带着苍白的回忆 却谢谢能与我相逢 我怕你在异乡夜里孤独醒来要拒绝两人单调的生活 想寻找自由 迷信了爱情 就迷失了我自己你就这样 离开吧 抛弃吧 他乡的旅人你就那样 离开吧 抛弃吧 一个人生活 你说要一个人去旅行 眼里藏着一朵乌云 知道你藏不住秘密 天空就会飘着雨你说你带着一本日记 却不想再拥有回忆 我怕你在异乡孤独的醒来要拒绝两人单调的生活 不想再随波逐流 迷信了孤独 就软弱的抛弃了我的等待 你就这样 离开吧 抛弃吧 他乡的旅人你就那样 离开吧 抛弃吧 让我孤独生活 你就这样 离开吧 抛弃我 孤独的旅人你就这样 离开我 抛弃我 让我孤独生活 我想要一个人去旅行 但愿归期会有约定 每个人都在问我 是否可以找到自由的你亚得里亚海边他乡的人和风中的吉他声 我怕你一个人在异乡孤独醒来我会带着你回来","categories":[{"name":"音乐","slug":"音乐","permalink":"http://yoursite.com/categories/音乐/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://yoursite.com/tags/音乐/"},{"name":"感悟","slug":"感悟","permalink":"http://yoursite.com/tags/感悟/"}]}]}